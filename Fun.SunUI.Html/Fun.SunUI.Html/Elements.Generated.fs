namespace rec Fun.SunUI.Html.DslInternals

open FSharp.Data.Adaptive
open Fun.SunUI.Html.DslInternals
open Fun.SunUI
open Fun.SunUI.Html


type HTMLElementBuilder<'Element when 'Element :> Browser.Types.HTMLElement>() =
    inherit HtmlCoreBuilder<'Element>()

    [<CustomOperation("accessKey")>] member inline this.accessKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.accessKey), (fun ctx x -> ctx.Element.accessKey <- x), x)
    [<CustomOperation("accessKey")>] member inline this.accessKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.accessKey), (fun ctx x -> ctx.Element.accessKey <- x), x)
    [<CustomOperation("children")>] member inline this.children ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Browser.Types.HTMLCollection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.children), (fun ctx x -> ctx.Element.children <- x), x)
    [<CustomOperation("children")>] member inline this.children ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.children), (fun ctx x -> ctx.Element.children <- x), x)
    [<CustomOperation("contentEditable")>] member inline this.contentEditable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.contentEditable), (fun ctx x -> ctx.Element.contentEditable <- x), x)
    [<CustomOperation("contentEditable")>] member inline this.contentEditable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.contentEditable), (fun ctx x -> ctx.Element.contentEditable <- x), x)
    [<CustomOperation("dataset")>] member inline this.dataset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Browser.Types.DOMStringMap) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.dataset), (fun ctx x -> ctx.Element.dataset <- x), x)
    [<CustomOperation("dataset")>] member inline this.dataset ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.dataset), (fun ctx x -> ctx.Element.dataset <- x), x)
    [<CustomOperation("dir")>] member inline this.dir ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.dir), (fun ctx x -> ctx.Element.dir <- x), x)
    [<CustomOperation("dir")>] member inline this.dir ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.dir), (fun ctx x -> ctx.Element.dir <- x), x)
    [<CustomOperation("draggable")>] member inline this.draggable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.draggable), (fun ctx x -> ctx.Element.draggable <- x), x)
    [<CustomOperation("draggable")>] member inline this.draggable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.draggable), (fun ctx x -> ctx.Element.draggable <- x), x)
    [<CustomOperation("hidden")>] member inline this.hidden ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.hidden), (fun ctx x -> ctx.Element.hidden <- x), x)
    [<CustomOperation("hidden")>] member inline this.hidden ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.hidden), (fun ctx x -> ctx.Element.hidden <- x), x)
    [<CustomOperation("hideFocus")>] member inline this.hideFocus ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.hideFocus), (fun ctx x -> ctx.Element.hideFocus <- x), x)
    [<CustomOperation("hideFocus")>] member inline this.hideFocus ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.hideFocus), (fun ctx x -> ctx.Element.hideFocus <- x), x)
    [<CustomOperation("innerHTML")>] member inline this.innerHTML ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.innerHTML), (fun ctx x -> ctx.Element.innerHTML <- x), x)
    [<CustomOperation("innerHTML")>] member inline this.innerHTML ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.innerHTML), (fun ctx x -> ctx.Element.innerHTML <- x), x)
    [<CustomOperation("innerText")>] member inline this.innerText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.innerText), (fun ctx x -> ctx.Element.innerText <- x), x)
    [<CustomOperation("innerText")>] member inline this.innerText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.innerText), (fun ctx x -> ctx.Element.innerText <- x), x)
    [<CustomOperation("isContentEditable")>] member inline this.isContentEditable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.isContentEditable), (fun ctx x -> ctx.Element.isContentEditable <- x), x)
    [<CustomOperation("isContentEditable")>] member inline this.isContentEditable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.isContentEditable), (fun ctx x -> ctx.Element.isContentEditable <- x), x)
    [<CustomOperation("lang")>] member inline this.lang ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.lang), (fun ctx x -> ctx.Element.lang <- x), x)
    [<CustomOperation("lang")>] member inline this.lang ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.lang), (fun ctx x -> ctx.Element.lang <- x), x)
    [<CustomOperation("offsetHeight")>] member inline this.offsetHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.offsetHeight), (fun ctx x -> ctx.Element.offsetHeight <- x), x)
    [<CustomOperation("offsetHeight")>] member inline this.offsetHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.offsetHeight), (fun ctx x -> ctx.Element.offsetHeight <- x), x)
    [<CustomOperation("offsetLeft")>] member inline this.offsetLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.offsetLeft), (fun ctx x -> ctx.Element.offsetLeft <- x), x)
    [<CustomOperation("offsetLeft")>] member inline this.offsetLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.offsetLeft), (fun ctx x -> ctx.Element.offsetLeft <- x), x)
    [<CustomOperation("offsetParent")>] member inline this.offsetParent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Browser.Types.Element) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.offsetParent), (fun ctx x -> ctx.Element.offsetParent <- x), x)
    [<CustomOperation("offsetParent")>] member inline this.offsetParent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.offsetParent), (fun ctx x -> ctx.Element.offsetParent <- x), x)
    [<CustomOperation("offsetTop")>] member inline this.offsetTop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.offsetTop), (fun ctx x -> ctx.Element.offsetTop <- x), x)
    [<CustomOperation("offsetTop")>] member inline this.offsetTop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.offsetTop), (fun ctx x -> ctx.Element.offsetTop <- x), x)
    [<CustomOperation("offsetWidth")>] member inline this.offsetWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.offsetWidth), (fun ctx x -> ctx.Element.offsetWidth <- x), x)
    [<CustomOperation("offsetWidth")>] member inline this.offsetWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.offsetWidth), (fun ctx x -> ctx.Element.offsetWidth <- x), x)
    [<CustomOperation("onabort")>] member inline this.onabort ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onabort <- x), x)
    [<CustomOperation("onactivate")>] member inline this.onactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onactivate <- x), x)
    [<CustomOperation("onbeforeactivate")>] member inline this.onbeforeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onbeforeactivate <- x), x)
    [<CustomOperation("onbeforecopy")>] member inline this.onbeforecopy ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onbeforecopy <- x), x)
    [<CustomOperation("onbeforecut")>] member inline this.onbeforecut ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onbeforecut <- x), x)
    [<CustomOperation("onbeforedeactivate")>] member inline this.onbeforedeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onbeforedeactivate <- x), x)
    [<CustomOperation("onbeforepaste")>] member inline this.onbeforepaste ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onbeforepaste <- x), x)
    [<CustomOperation("onblur")>] member inline this.onblur ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.FocusEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onblur <- x), x)
    [<CustomOperation("oncanplay")>] member inline this.oncanplay ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncanplay <- x), x)
    [<CustomOperation("oncanplaythrough")>] member inline this.oncanplaythrough ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncanplaythrough <- x), x)
    [<CustomOperation("onchange")>] member inline this.onchange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onchange <- x), x)
    [<CustomOperation("onclick")>] member inline this.onclick ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onclick <- x), x)
    [<CustomOperation("oncontextmenu")>] member inline this.oncontextmenu ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.PointerEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncontextmenu <- x), x)
    [<CustomOperation("oncopy")>] member inline this.oncopy ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncopy <- x), x)
    [<CustomOperation("oncuechange")>] member inline this.oncuechange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncuechange <- x), x)
    [<CustomOperation("oncut")>] member inline this.oncut ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oncut <- x), x)
    [<CustomOperation("ondblclick")>] member inline this.ondblclick ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondblclick <- x), x)
    [<CustomOperation("ondeactivate")>] member inline this.ondeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondeactivate <- x), x)
    [<CustomOperation("ondrag")>] member inline this.ondrag ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondrag <- x), x)
    [<CustomOperation("ondragend")>] member inline this.ondragend ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondragend <- x), x)
    [<CustomOperation("ondragenter")>] member inline this.ondragenter ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondragenter <- x), x)
    [<CustomOperation("ondragleave")>] member inline this.ondragleave ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondragleave <- x), x)
    [<CustomOperation("ondragover")>] member inline this.ondragover ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondragover <- x), x)
    [<CustomOperation("ondragstart")>] member inline this.ondragstart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondragstart <- x), x)
    [<CustomOperation("ondrop")>] member inline this.ondrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.DragEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondrop <- x), x)
    [<CustomOperation("ondurationchange")>] member inline this.ondurationchange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ondurationchange <- x), x)
    [<CustomOperation("onemptied")>] member inline this.onemptied ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onemptied <- x), x)
    [<CustomOperation("onended")>] member inline this.onended ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onended <- x), x)
    [<CustomOperation("onerror")>] member inline this.onerror ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onerror <- x), x)
    [<CustomOperation("onfocus")>] member inline this.onfocus ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.FocusEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onfocus <- x), x)
    [<CustomOperation("oninput")>] member inline this.oninput ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.oninput <- x), x)
    [<CustomOperation("onkeydown")>] member inline this.onkeydown ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.KeyboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onkeydown <- x), x)
    [<CustomOperation("onkeypress")>] member inline this.onkeypress ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.KeyboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onkeypress <- x), x)
    [<CustomOperation("onkeyup")>] member inline this.onkeyup ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.KeyboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onkeyup <- x), x)
    [<CustomOperation("onload")>] member inline this.onload ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onload <- x), x)
    [<CustomOperation("onloadeddata")>] member inline this.onloadeddata ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onloadeddata <- x), x)
    [<CustomOperation("onloadedmetadata")>] member inline this.onloadedmetadata ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onloadedmetadata <- x), x)
    [<CustomOperation("onloadstart")>] member inline this.onloadstart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onloadstart <- x), x)
    [<CustomOperation("onmousedown")>] member inline this.onmousedown ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmousedown <- x), x)
    [<CustomOperation("onmouseenter")>] member inline this.onmouseenter ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmouseenter <- x), x)
    [<CustomOperation("onmouseleave")>] member inline this.onmouseleave ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmouseleave <- x), x)
    [<CustomOperation("onmousemove")>] member inline this.onmousemove ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmousemove <- x), x)
    [<CustomOperation("onmouseout")>] member inline this.onmouseout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmouseout <- x), x)
    [<CustomOperation("onmouseover")>] member inline this.onmouseover ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmouseover <- x), x)
    [<CustomOperation("onmouseup")>] member inline this.onmouseup ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmouseup <- x), x)
    [<CustomOperation("onmousewheel")>] member inline this.onmousewheel ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.MouseWheelEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onmousewheel <- x), x)
    [<CustomOperation("onpaste")>] member inline this.onpaste ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ClipboardEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onpaste <- x), x)
    [<CustomOperation("onpause")>] member inline this.onpause ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onpause <- x), x)
    [<CustomOperation("onplay")>] member inline this.onplay ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onplay <- x), x)
    [<CustomOperation("onplaying")>] member inline this.onplaying ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onplaying <- x), x)
    [<CustomOperation("onprogress")>] member inline this.onprogress ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.ProgressEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onprogress <- x), x)
    [<CustomOperation("onratechange")>] member inline this.onratechange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onratechange <- x), x)
    [<CustomOperation("onreset")>] member inline this.onreset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onreset <- x), x)
    [<CustomOperation("onscroll")>] member inline this.onscroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onscroll <- x), x)
    [<CustomOperation("onseeked")>] member inline this.onseeked ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onseeked <- x), x)
    [<CustomOperation("onseeking")>] member inline this.onseeking ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onseeking <- x), x)
    [<CustomOperation("onselect")>] member inline this.onselect ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.UIEvent, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onselect <- x), x)
    [<CustomOperation("onselectstart")>] member inline this.onselectstart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onselectstart <- x), x)
    [<CustomOperation("onstalled")>] member inline this.onstalled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onstalled <- x), x)
    [<CustomOperation("onsubmit")>] member inline this.onsubmit ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onsubmit <- x), x)
    [<CustomOperation("onsuspend")>] member inline this.onsuspend ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onsuspend <- x), x)
    [<CustomOperation("ontimeupdate")>] member inline this.ontimeupdate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.ontimeupdate <- x), x)
    [<CustomOperation("onvolumechange")>] member inline this.onvolumechange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onvolumechange <- x), x)
    [<CustomOperation("onwaiting")>] member inline this.onwaiting ([<InlineIfLambda>] builder: BuildElement<'Element>, x: Microsoft.FSharp.Core.FSharpFunc<Browser.Types.Event, Microsoft.FSharp.Core.Unit>) = this.MakeSimplePropertyBuilder(builder, (fun ctx x -> ctx.Element.onwaiting <- x), x)
    [<CustomOperation("outerHTML")>] member inline this.outerHTML ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.outerHTML), (fun ctx x -> ctx.Element.outerHTML <- x), x)
    [<CustomOperation("outerHTML")>] member inline this.outerHTML ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.outerHTML), (fun ctx x -> ctx.Element.outerHTML <- x), x)
    [<CustomOperation("outerText")>] member inline this.outerText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.outerText), (fun ctx x -> ctx.Element.outerText <- x), x)
    [<CustomOperation("outerText")>] member inline this.outerText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.outerText), (fun ctx x -> ctx.Element.outerText <- x), x)
    [<CustomOperation("spellcheck")>] member inline this.spellcheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.spellcheck), (fun ctx x -> ctx.Element.spellcheck <- x), x)
    [<CustomOperation("spellcheck")>] member inline this.spellcheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.spellcheck), (fun ctx x -> ctx.Element.spellcheck <- x), x)
    [<CustomOperation("tabIndex")>] member inline this.tabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.tabIndex), (fun ctx x -> ctx.Element.tabIndex <- x), x)
    [<CustomOperation("tabIndex")>] member inline this.tabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.tabIndex), (fun ctx x -> ctx.Element.tabIndex <- x), x)
    [<CustomOperation("title")>] member inline this.title ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.title), (fun ctx x -> ctx.Element.title <- x), x)
    [<CustomOperation("title")>] member inline this.title ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.title), (fun ctx x -> ctx.Element.title <- x), x)

                
            

// =======================================================================================================================

namespace Fun.SunUI.Html

[<AutoOpen>]
module HtmlCoreBuilderDslCE_BrowserTypes =
  
    open Fun.SunUI
    open Fun.SunUI.Html.DslInternals


            