namespace rec System.Windows.Forms.DslInternals

open FSharp.Data.Adaptive
open Fun.SunUI
open System.Windows.Forms
open System.Windows.Forms.DslInternals


type ControlBuilder<'Element when 'Element :> System.Windows.Forms.Control>() =
    inherit WinFormsControlBuilder<'Element>()

    [<CustomOperation("AccessibilityObjectEx")>] member inline this.AccessibilityObjectEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.AccessibilityObject), x)
    [<CustomOperation("AccessibilityObjectEx'")>] member inline this.AccessibilityObjectEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.AccessibilityObject), x)
    [<CustomOperation("AccessibilityObject")>] member inline this.AccessibilityObject ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.AccessibilityObject), x)
    [<CustomOperation("AccessibilityObject'")>] member inline this.AccessibilityObject' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.AccessibilityObject), x)
    [<CustomOperation("AccessibleDefaultActionDescription")>] member inline this.AccessibleDefaultActionDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDefaultActionDescription), (fun ctx x -> ctx.Element.AccessibleDefaultActionDescription <- x), x)
    [<CustomOperation("AccessibleDefaultActionDescription")>] member inline this.AccessibleDefaultActionDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDefaultActionDescription), (fun ctx x -> ctx.Element.AccessibleDefaultActionDescription <- x), x)
    [<CustomOperation("AccessibleDescription")>] member inline this.AccessibleDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDescription), (fun ctx x -> ctx.Element.AccessibleDescription <- x), x)
    [<CustomOperation("AccessibleDescription")>] member inline this.AccessibleDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDescription), (fun ctx x -> ctx.Element.AccessibleDescription <- x), x)
    [<CustomOperation("AccessibleName")>] member inline this.AccessibleName ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleName), (fun ctx x -> ctx.Element.AccessibleName <- x), x)
    [<CustomOperation("AccessibleName")>] member inline this.AccessibleName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleName), (fun ctx x -> ctx.Element.AccessibleName <- x), x)
    [<CustomOperation("AccessibleRole")>] member inline this.AccessibleRole ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AccessibleRole) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleRole), (fun ctx x -> ctx.Element.AccessibleRole <- x), x)
    [<CustomOperation("AccessibleRole")>] member inline this.AccessibleRole ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleRole), (fun ctx x -> ctx.Element.AccessibleRole <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoScrollOffset")>] member inline this.AutoScrollOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollOffset), (fun ctx x -> ctx.Element.AutoScrollOffset <- x), x)
    [<CustomOperation("AutoScrollOffset")>] member inline this.AutoScrollOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollOffset), (fun ctx x -> ctx.Element.AutoScrollOffset <- x), x)
    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BindingContext) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("Bounds")>] member inline this.Bounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Rectangle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Bounds), (fun ctx x -> ctx.Element.Bounds <- x), x)
    [<CustomOperation("Bounds")>] member inline this.Bounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Bounds), (fun ctx x -> ctx.Element.Bounds <- x), x)
    [<CustomOperation("Capture")>] member inline this.Capture ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Capture), (fun ctx x -> ctx.Element.Capture <- x), x)
    [<CustomOperation("Capture")>] member inline this.Capture ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Capture), (fun ctx x -> ctx.Element.Capture <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("ClientRectangleEx")>] member inline this.ClientRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ClientRectangle), x)
    [<CustomOperation("ClientRectangleEx'")>] member inline this.ClientRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ClientRectangle), x)
    [<CustomOperation("ClientRectangle")>] member inline this.ClientRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ClientRectangle), x)
    [<CustomOperation("ClientRectangle'")>] member inline this.ClientRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ClientRectangle), x)
    [<CustomOperation("ClientSize")>] member inline this.ClientSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ClientSize), (fun ctx x -> ctx.Element.ClientSize <- x), x)
    [<CustomOperation("ClientSize")>] member inline this.ClientSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ClientSize), (fun ctx x -> ctx.Element.ClientSize <- x), x)
    [<CustomOperation("CompanyNameEx")>] member inline this.CompanyNameEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CompanyName), x)
    [<CustomOperation("CompanyNameEx'")>] member inline this.CompanyNameEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CompanyName), x)
    [<CustomOperation("CompanyName")>] member inline this.CompanyName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CompanyName), x)
    [<CustomOperation("CompanyName'")>] member inline this.CompanyName' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CompanyName), x)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)
                        

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("DataBindingsEx")>] member inline this.DataBindingsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindingsEx'")>] member inline this.DataBindingsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindings")>] member inline this.DataBindings ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindings'")>] member inline this.DataBindings' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Height")>] member inline this.Height ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Height), (fun ctx x -> ctx.Element.Height <- x), x)
    [<CustomOperation("Height")>] member inline this.Height ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Height), (fun ctx x -> ctx.Element.Height <- x), x)
    [<CustomOperation("IsAccessible")>] member inline this.IsAccessible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IsAccessible), (fun ctx x -> ctx.Element.IsAccessible <- x), x)
    [<CustomOperation("IsAccessible")>] member inline this.IsAccessible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IsAccessible), (fun ctx x -> ctx.Element.IsAccessible <- x), x)
    [<CustomOperation("Left")>] member inline this.Left ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Left), (fun ctx x -> ctx.Element.Left <- x), x)
    [<CustomOperation("Left")>] member inline this.Left ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Left), (fun ctx x -> ctx.Element.Left <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)

    [<CustomOperation("Parent")>]
    member inline this.Parent ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Parent <- x), creator)

    [<CustomOperation("Parent")>]
    member inline this.Parent ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Parent <- x), creator)
                        
    [<CustomOperation("ProductNameEx")>] member inline this.ProductNameEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ProductName), x)
    [<CustomOperation("ProductNameEx'")>] member inline this.ProductNameEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ProductName), x)
    [<CustomOperation("ProductName")>] member inline this.ProductName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ProductName), x)
    [<CustomOperation("ProductName'")>] member inline this.ProductName' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ProductName), x)
    [<CustomOperation("ProductVersionEx")>] member inline this.ProductVersionEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ProductVersion), x)
    [<CustomOperation("ProductVersionEx'")>] member inline this.ProductVersionEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ProductVersion), x)
    [<CustomOperation("ProductVersion")>] member inline this.ProductVersion ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ProductVersion), x)
    [<CustomOperation("ProductVersion'")>] member inline this.ProductVersion' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ProductVersion), x)
    [<CustomOperation("Region")>] member inline this.Region ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Region) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Region), (fun ctx x -> ctx.Element.Region <- x), x)
    [<CustomOperation("Region")>] member inline this.Region ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Region), (fun ctx x -> ctx.Element.Region <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.ComponentModel.ISite) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Tag")>] member inline this.Tag ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Tag), (fun ctx x -> ctx.Element.Tag <- x), x)
    [<CustomOperation("Tag")>] member inline this.Tag ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Tag), (fun ctx x -> ctx.Element.Tag <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Top")>] member inline this.Top ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Top), (fun ctx x -> ctx.Element.Top <- x), x)
    [<CustomOperation("Top")>] member inline this.Top ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Top), (fun ctx x -> ctx.Element.Top <- x), x)
    [<CustomOperation("TopLevelControlEx")>] member inline this.TopLevelControlEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.TopLevelControl), x)
    [<CustomOperation("TopLevelControlEx'")>] member inline this.TopLevelControlEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.TopLevelControl), x)
    [<CustomOperation("TopLevelControl")>] member inline this.TopLevelControl ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.TopLevelControl), x)
    [<CustomOperation("TopLevelControl'")>] member inline this.TopLevelControl' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.TopLevelControl), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Width")>] member inline this.Width ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Width), (fun ctx x -> ctx.Element.Width <- x), x)
    [<CustomOperation("Width")>] member inline this.Width ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Width), (fun ctx x -> ctx.Element.Width <- x), x)
    [<CustomOperation("WindowTarget")>] member inline this.WindowTarget ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.IWindowTarget) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WindowTarget), (fun ctx x -> ctx.Element.WindowTarget <- x), x)
    [<CustomOperation("WindowTarget")>] member inline this.WindowTarget ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WindowTarget), (fun ctx x -> ctx.Element.WindowTarget <- x), x)
    [<CustomOperation("PreferredSizeEx")>] member inline this.PreferredSizeEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSizeEx'")>] member inline this.PreferredSizeEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSize")>] member inline this.PreferredSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSize'")>] member inline this.PreferredSize' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("BindingContextChanged")>] member inline this.BindingContextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContextChanged), "BindingContextChanged", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("ClientSizeChanged")>] member inline this.ClientSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ClientSizeChanged), "ClientSizeChanged", fn)
    [<CustomOperation("ContextMenuStripChanged")>] member inline this.ContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ContextMenuStripChanged), "ContextMenuStripChanged", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("EnabledChanged")>] member inline this.EnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EnabledChanged), "EnabledChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("LocationChanged")>] member inline this.LocationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LocationChanged), "LocationChanged", fn)
    [<CustomOperation("MarginChanged")>] member inline this.MarginChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MarginChanged), "MarginChanged", fn)
    [<CustomOperation("RegionChanged")>] member inline this.RegionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RegionChanged), "RegionChanged", fn)
    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
    [<CustomOperation("SizeChanged")>] member inline this.SizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeChanged), "SizeChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("VisibleChanged")>] member inline this.VisibleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VisibleChanged), "VisibleChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("ControlAdded")>] member inline this.ControlAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlAdded), "ControlAdded", fn)
    [<CustomOperation("ControlRemoved")>] member inline this.ControlRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlRemoved), "ControlRemoved", fn)
    [<CustomOperation("DragDrop")>] member inline this.DragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragDrop), "DragDrop", fn)
    [<CustomOperation("DragEnter")>] member inline this.DragEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragEnter), "DragEnter", fn)
    [<CustomOperation("DragOver")>] member inline this.DragOver ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragOver), "DragOver", fn)
    [<CustomOperation("DragLeave")>] member inline this.DragLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragLeave), "DragLeave", fn)
    [<CustomOperation("GiveFeedback")>] member inline this.GiveFeedback ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GiveFeedback), "GiveFeedback", fn)
    [<CustomOperation("HandleCreated")>] member inline this.HandleCreated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HandleCreated), "HandleCreated", fn)
    [<CustomOperation("HandleDestroyed")>] member inline this.HandleDestroyed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HandleDestroyed), "HandleDestroyed", fn)
    [<CustomOperation("HelpRequested")>] member inline this.HelpRequested ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpRequested), "HelpRequested", fn)
    [<CustomOperation("Invalidated")>] member inline this.Invalidated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Invalidated), "Invalidated", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("QueryContinueDrag")>] member inline this.QueryContinueDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryContinueDrag), "QueryContinueDrag", fn)
    [<CustomOperation("QueryAccessibilityHelp")>] member inline this.QueryAccessibilityHelp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryAccessibilityHelp), "QueryAccessibilityHelp", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("GotFocus")>] member inline this.GotFocus ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GotFocus), "GotFocus", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("Layout")>] member inline this.Layout ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Layout), "Layout", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
    [<CustomOperation("LostFocus")>] member inline this.LostFocus ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LostFocus), "LostFocus", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("MouseCaptureChanged")>] member inline this.MouseCaptureChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseCaptureChanged), "MouseCaptureChanged", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
    [<CustomOperation("DpiChangedBeforeParent")>] member inline this.DpiChangedBeforeParent ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DpiChangedBeforeParent), "DpiChangedBeforeParent", fn)
    [<CustomOperation("DpiChangedAfterParent")>] member inline this.DpiChangedAfterParent ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DpiChangedAfterParent), "DpiChangedAfterParent", fn)
    [<CustomOperation("MouseHover")>] member inline this.MouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseHover), "MouseHover", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseWheel")>] member inline this.MouseWheel ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseWheel), "MouseWheel", fn)
    [<CustomOperation("Move")>] member inline this.Move ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Move), "Move", fn)
    [<CustomOperation("PreviewKeyDown")>] member inline this.PreviewKeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PreviewKeyDown), "PreviewKeyDown", fn)
    [<CustomOperation("Resize")>] member inline this.Resize ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Resize), "Resize", fn)
    [<CustomOperation("ChangeUICues")>] member inline this.ChangeUICues ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ChangeUICues), "ChangeUICues", fn)
    [<CustomOperation("StyleChanged")>] member inline this.StyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StyleChanged), "StyleChanged", fn)
    [<CustomOperation("SystemColorsChanged")>] member inline this.SystemColorsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SystemColorsChanged), "SystemColorsChanged", fn)
    [<CustomOperation("Validating")>] member inline this.Validating ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Validating), "Validating", fn)
    [<CustomOperation("Validated")>] member inline this.Validated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Validated), "Validated", fn)
    [<CustomOperation("ParentChanged")>] member inline this.ParentChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ParentChanged), "ParentChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
                

type ScrollableControlBuilder<'Element when 'Element :> System.Windows.Forms.ScrollableControl>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("HorizontalScrollEx")>] member inline this.HorizontalScrollEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScrollEx'")>] member inline this.HorizontalScrollEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScroll")>] member inline this.HorizontalScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScroll'")>] member inline this.HorizontalScroll' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("VerticalScrollEx")>] member inline this.VerticalScrollEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScrollEx'")>] member inline this.VerticalScrollEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScroll")>] member inline this.VerticalScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScroll'")>] member inline this.VerticalScroll' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("DockPaddingEx")>] member inline this.DockPaddingEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPaddingEx'")>] member inline this.DockPaddingEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding")>] member inline this.DockPadding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding'")>] member inline this.DockPadding' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DockPadding), x)

    [<CustomOperation("Scroll")>] member inline this.Scroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Scroll), "Scroll", fn)
                

type ToolStripBuilder<'Element when 'Element :> System.Windows.Forms.ToolStrip>() =
    inherit ScrollableControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowItemReorder")>] member inline this.AllowItemReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowItemReorder), (fun ctx x -> ctx.Element.AllowItemReorder <- x), x)
    [<CustomOperation("AllowItemReorder")>] member inline this.AllowItemReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowItemReorder), (fun ctx x -> ctx.Element.AllowItemReorder <- x), x)
    [<CustomOperation("AllowMerge")>] member inline this.AllowMerge ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowMerge), (fun ctx x -> ctx.Element.AllowMerge <- x), x)
    [<CustomOperation("AllowMerge")>] member inline this.AllowMerge ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowMerge), (fun ctx x -> ctx.Element.AllowMerge <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BindingContext) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("DefaultDropDownDirection")>] member inline this.DefaultDropDownDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripDropDownDirection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultDropDownDirection), (fun ctx x -> ctx.Element.DefaultDropDownDirection <- x), x)
    [<CustomOperation("DefaultDropDownDirection")>] member inline this.DefaultDropDownDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultDropDownDirection), (fun ctx x -> ctx.Element.DefaultDropDownDirection <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("GripMargin")>] member inline this.GripMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripMargin), (fun ctx x -> ctx.Element.GripMargin <- x), x)
    [<CustomOperation("GripMargin")>] member inline this.GripMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripMargin), (fun ctx x -> ctx.Element.GripMargin <- x), x)
    [<CustomOperation("GripRectangleEx")>] member inline this.GripRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangleEx'")>] member inline this.GripRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangle")>] member inline this.GripRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangle'")>] member inline this.GripRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("HorizontalScrollEx")>] member inline this.HorizontalScrollEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScrollEx'")>] member inline this.HorizontalScrollEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScroll")>] member inline this.HorizontalScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("HorizontalScroll'")>] member inline this.HorizontalScroll' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.HorizontalScroll), x)
    [<CustomOperation("ImageScalingSize")>] member inline this.ImageScalingSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageScalingSize), (fun ctx x -> ctx.Element.ImageScalingSize <- x), x)
    [<CustomOperation("ImageScalingSize")>] member inline this.ImageScalingSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageScalingSize), (fun ctx x -> ctx.Element.ImageScalingSize <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("LayoutSettings")>] member inline this.LayoutSettings ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.LayoutSettings) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutSettings), (fun ctx x -> ctx.Element.LayoutSettings <- x), x)
    [<CustomOperation("LayoutSettings")>] member inline this.LayoutSettings ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutSettings), (fun ctx x -> ctx.Element.LayoutSettings <- x), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripLayoutStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("OverflowButtonEx")>] member inline this.OverflowButtonEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButtonEx'")>] member inline this.OverflowButtonEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButton")>] member inline this.OverflowButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButton'")>] member inline this.OverflowButton' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderer) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TextDirection")>] member inline this.TextDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripTextDirection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextDirection), (fun ctx x -> ctx.Element.TextDirection <- x), x)
    [<CustomOperation("TextDirection")>] member inline this.TextDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextDirection), (fun ctx x -> ctx.Element.TextDirection <- x), x)
    [<CustomOperation("VerticalScrollEx")>] member inline this.VerticalScrollEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScrollEx'")>] member inline this.VerticalScrollEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScroll")>] member inline this.VerticalScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.VerticalScroll), x)
    [<CustomOperation("VerticalScroll'")>] member inline this.VerticalScroll' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.VerticalScroll), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BeginDrag")>] member inline this.BeginDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeginDrag), "BeginDrag", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("ControlAdded")>] member inline this.ControlAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlAdded), "ControlAdded", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("ControlRemoved")>] member inline this.ControlRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlRemoved), "ControlRemoved", fn)
    [<CustomOperation("EndDrag")>] member inline this.EndDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EndDrag), "EndDrag", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("ItemAdded")>] member inline this.ItemAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemAdded), "ItemAdded", fn)
    [<CustomOperation("ItemClicked")>] member inline this.ItemClicked ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemClicked), "ItemClicked", fn)
    [<CustomOperation("ItemRemoved")>] member inline this.ItemRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemRemoved), "ItemRemoved", fn)
    [<CustomOperation("LayoutCompleted")>] member inline this.LayoutCompleted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutCompleted), "LayoutCompleted", fn)
    [<CustomOperation("LayoutStyleChanged")>] member inline this.LayoutStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyleChanged), "LayoutStyleChanged", fn)
    [<CustomOperation("PaintGrip")>] member inline this.PaintGrip ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaintGrip), "PaintGrip", fn)
    [<CustomOperation("RendererChanged")>] member inline this.RendererChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RendererChanged), "RendererChanged", fn)
                

type ToolStripDropDownBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripDropDown>() =
    inherit ToolStripBuilder<'Element>()

    [<CustomOperation("AllowItemReorder")>] member inline this.AllowItemReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowItemReorder), (fun ctx x -> ctx.Element.AllowItemReorder <- x), x)
    [<CustomOperation("AllowItemReorder")>] member inline this.AllowItemReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowItemReorder), (fun ctx x -> ctx.Element.AllowItemReorder <- x), x)
    [<CustomOperation("AllowTransparency")>] member inline this.AllowTransparency ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowTransparency), (fun ctx x -> ctx.Element.AllowTransparency <- x), x)
    [<CustomOperation("AllowTransparency")>] member inline this.AllowTransparency ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowTransparency), (fun ctx x -> ctx.Element.AllowTransparency <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoClose")>] member inline this.AutoClose ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoClose), (fun ctx x -> ctx.Element.AutoClose <- x), x)
    [<CustomOperation("AutoClose")>] member inline this.AutoClose ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoClose), (fun ctx x -> ctx.Element.AutoClose <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)
                        
    [<CustomOperation("DefaultDropDownDirection")>] member inline this.DefaultDropDownDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripDropDownDirection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultDropDownDirection), (fun ctx x -> ctx.Element.DefaultDropDownDirection <- x), x)
    [<CustomOperation("DefaultDropDownDirection")>] member inline this.DefaultDropDownDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultDropDownDirection), (fun ctx x -> ctx.Element.DefaultDropDownDirection <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("DropShadowEnabled")>] member inline this.DropShadowEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DropShadowEnabled), (fun ctx x -> ctx.Element.DropShadowEnabled <- x), x)
    [<CustomOperation("DropShadowEnabled")>] member inline this.DropShadowEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DropShadowEnabled), (fun ctx x -> ctx.Element.DropShadowEnabled <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("GripRectangleEx")>] member inline this.GripRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangleEx'")>] member inline this.GripRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangle")>] member inline this.GripRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripRectangle'")>] member inline this.GripRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.GripRectangle), x)
    [<CustomOperation("GripMargin")>] member inline this.GripMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripMargin), (fun ctx x -> ctx.Element.GripMargin <- x), x)
    [<CustomOperation("GripMargin")>] member inline this.GripMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripMargin), (fun ctx x -> ctx.Element.GripMargin <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("OverflowButtonEx")>] member inline this.OverflowButtonEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButtonEx'")>] member inline this.OverflowButtonEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButton")>] member inline this.OverflowButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OverflowButton'")>] member inline this.OverflowButton' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.OverflowButton), x)
    [<CustomOperation("OwnerItem")>] member inline this.OwnerItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.OwnerItem), (fun ctx x -> ctx.Element.OwnerItem <- x), x)
    [<CustomOperation("OwnerItem")>] member inline this.OwnerItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.OwnerItem), (fun ctx x -> ctx.Element.OwnerItem <- x), x)
    [<CustomOperation("Region")>] member inline this.Region ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Region) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Region), (fun ctx x -> ctx.Element.Region <- x), x)
    [<CustomOperation("Region")>] member inline this.Region ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Region), (fun ctx x -> ctx.Element.Region <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("TextDirection")>] member inline this.TextDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripTextDirection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextDirection), (fun ctx x -> ctx.Element.TextDirection <- x), x)
    [<CustomOperation("TextDirection")>] member inline this.TextDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextDirection), (fun ctx x -> ctx.Element.TextDirection <- x), x)
    [<CustomOperation("TopLevel")>] member inline this.TopLevel ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopLevel), (fun ctx x -> ctx.Element.TopLevel <- x), x)
    [<CustomOperation("TopLevel")>] member inline this.TopLevel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopLevel), (fun ctx x -> ctx.Element.TopLevel <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("BindingContextChanged")>] member inline this.BindingContextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContextChanged), "BindingContextChanged", fn)
    [<CustomOperation("ChangeUICues")>] member inline this.ChangeUICues ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ChangeUICues), "ChangeUICues", fn)
    [<CustomOperation("ContextMenuStripChanged")>] member inline this.ContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ContextMenuStripChanged), "ContextMenuStripChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("Closed")>] member inline this.Closed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Closed), "Closed", fn)
    [<CustomOperation("Closing")>] member inline this.Closing ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Closing), "Closing", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("GiveFeedback")>] member inline this.GiveFeedback ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GiveFeedback), "GiveFeedback", fn)
    [<CustomOperation("HelpRequested")>] member inline this.HelpRequested ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpRequested), "HelpRequested", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
    [<CustomOperation("Opening")>] member inline this.Opening ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Opening), "Opening", fn)
    [<CustomOperation("Opened")>] member inline this.Opened ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Opened), "Opened", fn)
    [<CustomOperation("RegionChanged")>] member inline this.RegionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RegionChanged), "RegionChanged", fn)
    [<CustomOperation("Scroll")>] member inline this.Scroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Scroll), "Scroll", fn)
    [<CustomOperation("StyleChanged")>] member inline this.StyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StyleChanged), "StyleChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("Validated")>] member inline this.Validated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Validated), "Validated", fn)
    [<CustomOperation("Validating")>] member inline this.Validating ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Validating), "Validating", fn)
                

type ToolStripDropDownMenuBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripDropDownMenu>() =
    inherit ToolStripDropDownBuilder<'Element>()

    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripLayoutStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("ShowImageMargin")>] member inline this.ShowImageMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowImageMargin), (fun ctx x -> ctx.Element.ShowImageMargin <- x), x)
    [<CustomOperation("ShowImageMargin")>] member inline this.ShowImageMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowImageMargin), (fun ctx x -> ctx.Element.ShowImageMargin <- x), x)
    [<CustomOperation("ShowCheckMargin")>] member inline this.ShowCheckMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCheckMargin), (fun ctx x -> ctx.Element.ShowCheckMargin <- x), x)
    [<CustomOperation("ShowCheckMargin")>] member inline this.ShowCheckMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCheckMargin), (fun ctx x -> ctx.Element.ShowCheckMargin <- x), x)

                

type ContextMenuStripBuilder<'Element when 'Element :> System.Windows.Forms.ContextMenuStrip>() =
    inherit ToolStripDropDownMenuBuilder<'Element>()

    [<CustomOperation("SourceControlEx")>] member inline this.SourceControlEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SourceControl), x)
    [<CustomOperation("SourceControlEx'")>] member inline this.SourceControlEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SourceControl), x)
    [<CustomOperation("SourceControl")>] member inline this.SourceControl ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SourceControl), x)
    [<CustomOperation("SourceControl'")>] member inline this.SourceControl' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SourceControl), x)

                

type ToolStripOverflowBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripOverflow>() =
    inherit ToolStripDropDownBuilder<'Element>()

    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)

                

type BindingNavigatorBuilder<'Element when 'Element :> System.Windows.Forms.BindingNavigator>() =
    inherit ToolStripBuilder<'Element>()

    [<CustomOperation("BindingSource")>] member inline this.BindingSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BindingSource) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingSource), (fun ctx x -> ctx.Element.BindingSource <- x), x)
    [<CustomOperation("BindingSource")>] member inline this.BindingSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BindingSource), (fun ctx x -> ctx.Element.BindingSource <- x), x)
    [<CustomOperation("MoveFirstItem")>] member inline this.MoveFirstItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MoveFirstItem), (fun ctx x -> ctx.Element.MoveFirstItem <- x), x)
    [<CustomOperation("MoveFirstItem")>] member inline this.MoveFirstItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MoveFirstItem), (fun ctx x -> ctx.Element.MoveFirstItem <- x), x)
    [<CustomOperation("MovePreviousItem")>] member inline this.MovePreviousItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MovePreviousItem), (fun ctx x -> ctx.Element.MovePreviousItem <- x), x)
    [<CustomOperation("MovePreviousItem")>] member inline this.MovePreviousItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MovePreviousItem), (fun ctx x -> ctx.Element.MovePreviousItem <- x), x)
    [<CustomOperation("MoveNextItem")>] member inline this.MoveNextItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MoveNextItem), (fun ctx x -> ctx.Element.MoveNextItem <- x), x)
    [<CustomOperation("MoveNextItem")>] member inline this.MoveNextItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MoveNextItem), (fun ctx x -> ctx.Element.MoveNextItem <- x), x)
    [<CustomOperation("MoveLastItem")>] member inline this.MoveLastItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MoveLastItem), (fun ctx x -> ctx.Element.MoveLastItem <- x), x)
    [<CustomOperation("MoveLastItem")>] member inline this.MoveLastItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MoveLastItem), (fun ctx x -> ctx.Element.MoveLastItem <- x), x)
    [<CustomOperation("AddNewItem")>] member inline this.AddNewItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AddNewItem), (fun ctx x -> ctx.Element.AddNewItem <- x), x)
    [<CustomOperation("AddNewItem")>] member inline this.AddNewItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AddNewItem), (fun ctx x -> ctx.Element.AddNewItem <- x), x)
    [<CustomOperation("DeleteItem")>] member inline this.DeleteItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DeleteItem), (fun ctx x -> ctx.Element.DeleteItem <- x), x)
    [<CustomOperation("DeleteItem")>] member inline this.DeleteItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DeleteItem), (fun ctx x -> ctx.Element.DeleteItem <- x), x)
    [<CustomOperation("PositionItem")>] member inline this.PositionItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PositionItem), (fun ctx x -> ctx.Element.PositionItem <- x), x)
    [<CustomOperation("PositionItem")>] member inline this.PositionItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PositionItem), (fun ctx x -> ctx.Element.PositionItem <- x), x)
    [<CustomOperation("CountItem")>] member inline this.CountItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CountItem), (fun ctx x -> ctx.Element.CountItem <- x), x)
    [<CustomOperation("CountItem")>] member inline this.CountItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CountItem), (fun ctx x -> ctx.Element.CountItem <- x), x)
    [<CustomOperation("CountItemFormat")>] member inline this.CountItemFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CountItemFormat), (fun ctx x -> ctx.Element.CountItemFormat <- x), x)
    [<CustomOperation("CountItemFormat")>] member inline this.CountItemFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CountItemFormat), (fun ctx x -> ctx.Element.CountItemFormat <- x), x)

    [<CustomOperation("RefreshItems")>] member inline this.RefreshItems ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RefreshItems), "RefreshItems", fn)
                

type MenuStripBuilder<'Element when 'Element :> System.Windows.Forms.MenuStrip>() =
    inherit ToolStripBuilder<'Element>()

    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("MdiWindowListItem")>] member inline this.MdiWindowListItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripMenuItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MdiWindowListItem), (fun ctx x -> ctx.Element.MdiWindowListItem <- x), x)
    [<CustomOperation("MdiWindowListItem")>] member inline this.MdiWindowListItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MdiWindowListItem), (fun ctx x -> ctx.Element.MdiWindowListItem <- x), x)

    [<CustomOperation("MenuActivate")>] member inline this.MenuActivate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MenuActivate), "MenuActivate", fn)
    [<CustomOperation("MenuDeactivate")>] member inline this.MenuDeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MenuDeactivate), "MenuDeactivate", fn)
                

type StatusStripBuilder<'Element when 'Element :> System.Windows.Forms.StatusStrip>() =
    inherit ToolStripBuilder<'Element>()

    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("CanOverflow")>] member inline this.CanOverflow ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CanOverflow), (fun ctx x -> ctx.Element.CanOverflow <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("GripStyle")>] member inline this.GripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GripStyle), (fun ctx x -> ctx.Element.GripStyle <- x), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripLayoutStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("LayoutStyle")>] member inline this.LayoutStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutStyle), (fun ctx x -> ctx.Element.LayoutStyle <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("SizingGrip")>] member inline this.SizingGrip ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SizingGrip), (fun ctx x -> ctx.Element.SizingGrip <- x), x)
    [<CustomOperation("SizingGrip")>] member inline this.SizingGrip ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SizingGrip), (fun ctx x -> ctx.Element.SizingGrip <- x), x)
    [<CustomOperation("SizeGripBoundsEx")>] member inline this.SizeGripBoundsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SizeGripBounds), x)
    [<CustomOperation("SizeGripBoundsEx'")>] member inline this.SizeGripBoundsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SizeGripBounds), x)
    [<CustomOperation("SizeGripBounds")>] member inline this.SizeGripBounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SizeGripBounds), x)
    [<CustomOperation("SizeGripBounds'")>] member inline this.SizeGripBounds' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SizeGripBounds), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)
    [<CustomOperation("Stretch")>] member inline this.Stretch ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Stretch), (fun ctx x -> ctx.Element.Stretch <- x), x)

    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
                

type ContainerControlBuilder<'Element when 'Element :> System.Windows.Forms.ContainerControl>() =
    inherit ScrollableControlBuilder<'Element>()

    [<CustomOperation("AutoScaleDimensions")>] member inline this.AutoScaleDimensions ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.SizeF) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleDimensions), (fun ctx x -> ctx.Element.AutoScaleDimensions <- x), x)
    [<CustomOperation("AutoScaleDimensions")>] member inline this.AutoScaleDimensions ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleDimensions), (fun ctx x -> ctx.Element.AutoScaleDimensions <- x), x)
    [<CustomOperation("AutoScaleMode")>] member inline this.AutoScaleMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoScaleMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleMode), (fun ctx x -> ctx.Element.AutoScaleMode <- x), x)
    [<CustomOperation("AutoScaleMode")>] member inline this.AutoScaleMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleMode), (fun ctx x -> ctx.Element.AutoScaleMode <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoValidate) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BindingContext) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)

    [<CustomOperation("ActiveControl")>]
    member inline this.ActiveControl ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ActiveControl <- x), creator)

    [<CustomOperation("ActiveControl")>]
    member inline this.ActiveControl ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ActiveControl <- x), creator)
                        
    [<CustomOperation("CurrentAutoScaleDimensionsEx")>] member inline this.CurrentAutoScaleDimensionsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CurrentAutoScaleDimensions), x)
    [<CustomOperation("CurrentAutoScaleDimensionsEx'")>] member inline this.CurrentAutoScaleDimensionsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CurrentAutoScaleDimensions), x)
    [<CustomOperation("CurrentAutoScaleDimensions")>] member inline this.CurrentAutoScaleDimensions ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CurrentAutoScaleDimensions), x)
    [<CustomOperation("CurrentAutoScaleDimensions'")>] member inline this.CurrentAutoScaleDimensions' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CurrentAutoScaleDimensions), x)
    [<CustomOperation("ParentFormEx")>] member inline this.ParentFormEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ParentForm), x)
    [<CustomOperation("ParentFormEx'")>] member inline this.ParentFormEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ParentForm), x)
    [<CustomOperation("ParentForm")>] member inline this.ParentForm ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ParentForm), x)
    [<CustomOperation("ParentForm'")>] member inline this.ParentForm' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ParentForm), x)

    [<CustomOperation("AutoValidateChanged")>] member inline this.AutoValidateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidateChanged), "AutoValidateChanged", fn)
                

type UpDownBaseBuilder<'Element when 'Element :> System.Windows.Forms.UpDownBase>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)
                        
    [<CustomOperation("DockPaddingEx")>] member inline this.DockPaddingEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPaddingEx'")>] member inline this.DockPaddingEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding")>] member inline this.DockPadding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding'")>] member inline this.DockPadding' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("InterceptArrowKeys")>] member inline this.InterceptArrowKeys ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.InterceptArrowKeys), (fun ctx x -> ctx.Element.InterceptArrowKeys <- x), x)
    [<CustomOperation("InterceptArrowKeys")>] member inline this.InterceptArrowKeys ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.InterceptArrowKeys), (fun ctx x -> ctx.Element.InterceptArrowKeys <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.HorizontalAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("UpDownAlign")>] member inline this.UpDownAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.LeftRightAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UpDownAlign), (fun ctx x -> ctx.Element.UpDownAlign <- x), x)
    [<CustomOperation("UpDownAlign")>] member inline this.UpDownAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UpDownAlign), (fun ctx x -> ctx.Element.UpDownAlign <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
    [<CustomOperation("MouseHover")>] member inline this.MouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseHover), "MouseHover", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
                

type DomainUpDownBuilder<'Element when 'Element :> System.Windows.Forms.DomainUpDown>() =
    inherit UpDownBaseBuilder<'Element>()

    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Wrap")>] member inline this.Wrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Wrap), (fun ctx x -> ctx.Element.Wrap <- x), x)
    [<CustomOperation("Wrap")>] member inline this.Wrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Wrap), (fun ctx x -> ctx.Element.Wrap <- x), x)

    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("SelectedItemChanged")>] member inline this.SelectedItemChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItemChanged), "SelectedItemChanged", fn)
                

type NumericUpDownBuilder<'Element when 'Element :> System.Windows.Forms.NumericUpDown>() =
    inherit UpDownBaseBuilder<'Element>()

    [<CustomOperation("AccelerationsEx")>] member inline this.AccelerationsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Accelerations), x)
    [<CustomOperation("AccelerationsEx'")>] member inline this.AccelerationsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Accelerations), x)
    [<CustomOperation("Accelerations")>] member inline this.Accelerations ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Accelerations), x)
    [<CustomOperation("Accelerations'")>] member inline this.Accelerations' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Accelerations), x)
    [<CustomOperation("DecimalPlaces")>] member inline this.DecimalPlaces ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DecimalPlaces), (fun ctx x -> ctx.Element.DecimalPlaces <- x), x)
    [<CustomOperation("DecimalPlaces")>] member inline this.DecimalPlaces ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DecimalPlaces), (fun ctx x -> ctx.Element.DecimalPlaces <- x), x)
    [<CustomOperation("Hexadecimal")>] member inline this.Hexadecimal ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Hexadecimal), (fun ctx x -> ctx.Element.Hexadecimal <- x), x)
    [<CustomOperation("Hexadecimal")>] member inline this.Hexadecimal ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Hexadecimal), (fun ctx x -> ctx.Element.Hexadecimal <- x), x)
    [<CustomOperation("Increment")>] member inline this.Increment ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Decimal) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Increment), (fun ctx x -> ctx.Element.Increment <- x), x)
    [<CustomOperation("Increment")>] member inline this.Increment ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Increment), (fun ctx x -> ctx.Element.Increment <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Decimal) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Decimal) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("ThousandsSeparator")>] member inline this.ThousandsSeparator ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ThousandsSeparator), (fun ctx x -> ctx.Element.ThousandsSeparator <- x), x)
    [<CustomOperation("ThousandsSeparator")>] member inline this.ThousandsSeparator ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ThousandsSeparator), (fun ctx x -> ctx.Element.ThousandsSeparator <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Decimal) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)

    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("ValueChanged")>] member inline this.ValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueChanged), "ValueChanged", fn)
                

type FormBuilder<'Element when 'Element :> System.Windows.Forms.Form>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AcceptButton")>] member inline this.AcceptButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.IButtonControl) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptButton), (fun ctx x -> ctx.Element.AcceptButton <- x), x)
    [<CustomOperation("AcceptButton")>] member inline this.AcceptButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptButton), (fun ctx x -> ctx.Element.AcceptButton <- x), x)
    [<CustomOperation("ActiveMdiChildEx")>] member inline this.ActiveMdiChildEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ActiveMdiChild), x)
    [<CustomOperation("ActiveMdiChildEx'")>] member inline this.ActiveMdiChildEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ActiveMdiChild), x)
    [<CustomOperation("ActiveMdiChild")>] member inline this.ActiveMdiChild ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ActiveMdiChild), x)
    [<CustomOperation("ActiveMdiChild'")>] member inline this.ActiveMdiChild' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ActiveMdiChild), x)
    [<CustomOperation("AllowTransparency")>] member inline this.AllowTransparency ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowTransparency), (fun ctx x -> ctx.Element.AllowTransparency <- x), x)
    [<CustomOperation("AllowTransparency")>] member inline this.AllowTransparency ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowTransparency), (fun ctx x -> ctx.Element.AllowTransparency <- x), x)
    [<CustomOperation("AutoScale")>] member inline this.AutoScale ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScale), (fun ctx x -> ctx.Element.AutoScale <- x), x)
    [<CustomOperation("AutoScale")>] member inline this.AutoScale ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScale), (fun ctx x -> ctx.Element.AutoScale <- x), x)
    [<CustomOperation("AutoScaleBaseSize")>] member inline this.AutoScaleBaseSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleBaseSize), (fun ctx x -> ctx.Element.AutoScaleBaseSize <- x), x)
    [<CustomOperation("AutoScaleBaseSize")>] member inline this.AutoScaleBaseSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleBaseSize), (fun ctx x -> ctx.Element.AutoScaleBaseSize <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoValidate) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("FormBorderStyle")>] member inline this.FormBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormBorderStyle), (fun ctx x -> ctx.Element.FormBorderStyle <- x), x)
    [<CustomOperation("FormBorderStyle")>] member inline this.FormBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormBorderStyle), (fun ctx x -> ctx.Element.FormBorderStyle <- x), x)
    [<CustomOperation("CancelButton")>] member inline this.CancelButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.IButtonControl) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CancelButton), (fun ctx x -> ctx.Element.CancelButton <- x), x)
    [<CustomOperation("CancelButton")>] member inline this.CancelButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CancelButton), (fun ctx x -> ctx.Element.CancelButton <- x), x)
    [<CustomOperation("ClientSize")>] member inline this.ClientSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ClientSize), (fun ctx x -> ctx.Element.ClientSize <- x), x)
    [<CustomOperation("ClientSize")>] member inline this.ClientSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ClientSize), (fun ctx x -> ctx.Element.ClientSize <- x), x)
    [<CustomOperation("ControlBox")>] member inline this.ControlBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlBox), (fun ctx x -> ctx.Element.ControlBox <- x), x)
    [<CustomOperation("ControlBox")>] member inline this.ControlBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ControlBox), (fun ctx x -> ctx.Element.ControlBox <- x), x)
    [<CustomOperation("DesktopBounds")>] member inline this.DesktopBounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Rectangle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DesktopBounds), (fun ctx x -> ctx.Element.DesktopBounds <- x), x)
    [<CustomOperation("DesktopBounds")>] member inline this.DesktopBounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DesktopBounds), (fun ctx x -> ctx.Element.DesktopBounds <- x), x)
    [<CustomOperation("DesktopLocation")>] member inline this.DesktopLocation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DesktopLocation), (fun ctx x -> ctx.Element.DesktopLocation <- x), x)
    [<CustomOperation("DesktopLocation")>] member inline this.DesktopLocation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DesktopLocation), (fun ctx x -> ctx.Element.DesktopLocation <- x), x)
    [<CustomOperation("DialogResult")>] member inline this.DialogResult ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DialogResult) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DialogResult), (fun ctx x -> ctx.Element.DialogResult <- x), x)
    [<CustomOperation("DialogResult")>] member inline this.DialogResult ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DialogResult), (fun ctx x -> ctx.Element.DialogResult <- x), x)
    [<CustomOperation("HelpButton")>] member inline this.HelpButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpButton), (fun ctx x -> ctx.Element.HelpButton <- x), x)
    [<CustomOperation("HelpButton")>] member inline this.HelpButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpButton), (fun ctx x -> ctx.Element.HelpButton <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Icon) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("IsMdiContainer")>] member inline this.IsMdiContainer ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IsMdiContainer), (fun ctx x -> ctx.Element.IsMdiContainer <- x), x)
    [<CustomOperation("IsMdiContainer")>] member inline this.IsMdiContainer ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IsMdiContainer), (fun ctx x -> ctx.Element.IsMdiContainer <- x), x)
    [<CustomOperation("KeyPreview")>] member inline this.KeyPreview ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPreview), (fun ctx x -> ctx.Element.KeyPreview <- x), x)
    [<CustomOperation("KeyPreview")>] member inline this.KeyPreview ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPreview), (fun ctx x -> ctx.Element.KeyPreview <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)

    [<CustomOperation("MainMenuStrip")>]
    member inline this.MainMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.MainMenuStrip <- x), creator)

    [<CustomOperation("MainMenuStrip")>]
    member inline this.MainMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.MainMenuStrip <- x), creator)
                        
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MaximizeBox")>] member inline this.MaximizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximizeBox), (fun ctx x -> ctx.Element.MaximizeBox <- x), x)
    [<CustomOperation("MaximizeBox")>] member inline this.MaximizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximizeBox), (fun ctx x -> ctx.Element.MaximizeBox <- x), x)
    [<CustomOperation("MdiChildrenEx")>] member inline this.MdiChildrenEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildrenEx'")>] member inline this.MdiChildrenEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildren")>] member inline this.MdiChildren ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildren'")>] member inline this.MdiChildren' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.MdiChildren), x)
    #if NET6_0
    [<CustomOperation("MdiChildrenMinimizedAnchorBottom")>] member inline this.MdiChildrenMinimizedAnchorBottom ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MdiChildrenMinimizedAnchorBottom), (fun ctx x -> ctx.Element.MdiChildrenMinimizedAnchorBottom <- x), x)
    [<CustomOperation("MdiChildrenMinimizedAnchorBottom")>] member inline this.MdiChildrenMinimizedAnchorBottom ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MdiChildrenMinimizedAnchorBottom), (fun ctx x -> ctx.Element.MdiChildrenMinimizedAnchorBottom <- x), x)
    #endif
    [<CustomOperation("MdiParent")>]
    member inline this.MdiParent ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.MdiParent <- x), creator)

    [<CustomOperation("MdiParent")>]
    member inline this.MdiParent ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.MdiParent <- x), creator)
                        
    [<CustomOperation("MinimizeBox")>] member inline this.MinimizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimizeBox), (fun ctx x -> ctx.Element.MinimizeBox <- x), x)
    [<CustomOperation("MinimizeBox")>] member inline this.MinimizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimizeBox), (fun ctx x -> ctx.Element.MinimizeBox <- x), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("OwnedFormsEx")>] member inline this.OwnedFormsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.OwnedForms), x)
    [<CustomOperation("OwnedFormsEx'")>] member inline this.OwnedFormsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.OwnedForms), x)
    [<CustomOperation("OwnedForms")>] member inline this.OwnedForms ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.OwnedForms), x)
    [<CustomOperation("OwnedForms'")>] member inline this.OwnedForms' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.OwnedForms), x)

    [<CustomOperation("Owner")>]
    member inline this.Owner ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Owner <- x), creator)

    [<CustomOperation("Owner")>]
    member inline this.Owner ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Owner <- x), creator)
                        
    [<CustomOperation("RestoreBoundsEx")>] member inline this.RestoreBoundsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.RestoreBounds), x)
    [<CustomOperation("RestoreBoundsEx'")>] member inline this.RestoreBoundsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.RestoreBounds), x)
    [<CustomOperation("RestoreBounds")>] member inline this.RestoreBounds ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.RestoreBounds), x)
    [<CustomOperation("RestoreBounds'")>] member inline this.RestoreBounds' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.RestoreBounds), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("ShowInTaskbar")>] member inline this.ShowInTaskbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowInTaskbar), (fun ctx x -> ctx.Element.ShowInTaskbar <- x), x)
    [<CustomOperation("ShowInTaskbar")>] member inline this.ShowInTaskbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowInTaskbar), (fun ctx x -> ctx.Element.ShowInTaskbar <- x), x)
    [<CustomOperation("ShowIcon")>] member inline this.ShowIcon ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowIcon), (fun ctx x -> ctx.Element.ShowIcon <- x), x)
    [<CustomOperation("ShowIcon")>] member inline this.ShowIcon ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowIcon), (fun ctx x -> ctx.Element.ShowIcon <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("SizeGripStyle")>] member inline this.SizeGripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SizeGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeGripStyle), (fun ctx x -> ctx.Element.SizeGripStyle <- x), x)
    [<CustomOperation("SizeGripStyle")>] member inline this.SizeGripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SizeGripStyle), (fun ctx x -> ctx.Element.SizeGripStyle <- x), x)
    [<CustomOperation("StartPosition")>] member inline this.StartPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormStartPosition) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StartPosition), (fun ctx x -> ctx.Element.StartPosition <- x), x)
    [<CustomOperation("StartPosition")>] member inline this.StartPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StartPosition), (fun ctx x -> ctx.Element.StartPosition <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TopLevel")>] member inline this.TopLevel ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopLevel), (fun ctx x -> ctx.Element.TopLevel <- x), x)
    [<CustomOperation("TopLevel")>] member inline this.TopLevel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopLevel), (fun ctx x -> ctx.Element.TopLevel <- x), x)
    [<CustomOperation("TopMost")>] member inline this.TopMost ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopMost), (fun ctx x -> ctx.Element.TopMost <- x), x)
    [<CustomOperation("TopMost")>] member inline this.TopMost ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopMost), (fun ctx x -> ctx.Element.TopMost <- x), x)
    [<CustomOperation("TransparencyKey")>] member inline this.TransparencyKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TransparencyKey), (fun ctx x -> ctx.Element.TransparencyKey <- x), x)
    [<CustomOperation("TransparencyKey")>] member inline this.TransparencyKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TransparencyKey), (fun ctx x -> ctx.Element.TransparencyKey <- x), x)
    [<CustomOperation("WindowState")>] member inline this.WindowState ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormWindowState) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WindowState), (fun ctx x -> ctx.Element.WindowState <- x), x)
    [<CustomOperation("WindowState")>] member inline this.WindowState ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WindowState), (fun ctx x -> ctx.Element.WindowState <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("AutoValidateChanged")>] member inline this.AutoValidateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidateChanged), "AutoValidateChanged", fn)
    [<CustomOperation("HelpButtonClicked")>] member inline this.HelpButtonClicked ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpButtonClicked), "HelpButtonClicked", fn)
    [<CustomOperation("MaximizedBoundsChanged")>] member inline this.MaximizedBoundsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximizedBoundsChanged), "MaximizedBoundsChanged", fn)
    [<CustomOperation("MaximumSizeChanged")>] member inline this.MaximumSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSizeChanged), "MaximumSizeChanged", fn)
    [<CustomOperation("MarginChanged")>] member inline this.MarginChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MarginChanged), "MarginChanged", fn)
    [<CustomOperation("MinimumSizeChanged")>] member inline this.MinimumSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSizeChanged), "MinimumSizeChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("Activated")>] member inline this.Activated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Activated), "Activated", fn)
    [<CustomOperation("Closing")>] member inline this.Closing ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Closing), "Closing", fn)
    [<CustomOperation("Closed")>] member inline this.Closed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Closed), "Closed", fn)
    [<CustomOperation("Deactivate")>] member inline this.Deactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Deactivate), "Deactivate", fn)
    [<CustomOperation("FormClosing")>] member inline this.FormClosing ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormClosing), "FormClosing", fn)
    [<CustomOperation("FormClosed")>] member inline this.FormClosed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormClosed), "FormClosed", fn)
    [<CustomOperation("Load")>] member inline this.Load ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Load), "Load", fn)
    [<CustomOperation("MdiChildActivate")>] member inline this.MdiChildActivate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MdiChildActivate), "MdiChildActivate", fn)
    [<CustomOperation("MenuComplete")>] member inline this.MenuComplete ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MenuComplete), "MenuComplete", fn)
    [<CustomOperation("MenuStart")>] member inline this.MenuStart ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MenuStart), "MenuStart", fn)
    [<CustomOperation("InputLanguageChanged")>] member inline this.InputLanguageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.InputLanguageChanged), "InputLanguageChanged", fn)
    [<CustomOperation("InputLanguageChanging")>] member inline this.InputLanguageChanging ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.InputLanguageChanging), "InputLanguageChanging", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("Shown")>] member inline this.Shown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Shown), "Shown", fn)
    [<CustomOperation("DpiChanged")>] member inline this.DpiChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DpiChanged), "DpiChanged", fn)
    [<CustomOperation("ResizeBegin")>] member inline this.ResizeBegin ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ResizeBegin), "ResizeBegin", fn)
    [<CustomOperation("ResizeEnd")>] member inline this.ResizeEnd ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ResizeEnd), "ResizeEnd", fn)
                

type PrintPreviewDialogBuilder<'Element when 'Element :> System.Windows.Forms.PrintPreviewDialog>() =
    inherit FormBuilder<'Element>()

    [<CustomOperation("AcceptButton")>] member inline this.AcceptButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.IButtonControl) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptButton), (fun ctx x -> ctx.Element.AcceptButton <- x), x)
    [<CustomOperation("AcceptButton")>] member inline this.AcceptButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptButton), (fun ctx x -> ctx.Element.AcceptButton <- x), x)
    [<CustomOperation("AutoScale")>] member inline this.AutoScale ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScale), (fun ctx x -> ctx.Element.AutoScale <- x), x)
    [<CustomOperation("AutoScale")>] member inline this.AutoScale ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScale), (fun ctx x -> ctx.Element.AutoScale <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoValidate) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("CancelButton")>] member inline this.CancelButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.IButtonControl) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CancelButton), (fun ctx x -> ctx.Element.CancelButton <- x), x)
    [<CustomOperation("CancelButton")>] member inline this.CancelButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CancelButton), (fun ctx x -> ctx.Element.CancelButton <- x), x)
    [<CustomOperation("ControlBox")>] member inline this.ControlBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlBox), (fun ctx x -> ctx.Element.ControlBox <- x), x)
    [<CustomOperation("ControlBox")>] member inline this.ControlBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ControlBox), (fun ctx x -> ctx.Element.ControlBox <- x), x)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)
                        
    [<CustomOperation("FormBorderStyle")>] member inline this.FormBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormBorderStyle), (fun ctx x -> ctx.Element.FormBorderStyle <- x), x)
    [<CustomOperation("FormBorderStyle")>] member inline this.FormBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormBorderStyle), (fun ctx x -> ctx.Element.FormBorderStyle <- x), x)
    [<CustomOperation("HelpButton")>] member inline this.HelpButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpButton), (fun ctx x -> ctx.Element.HelpButton <- x), x)
    [<CustomOperation("HelpButton")>] member inline this.HelpButton ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpButton), (fun ctx x -> ctx.Element.HelpButton <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Icon) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("IsMdiContainer")>] member inline this.IsMdiContainer ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IsMdiContainer), (fun ctx x -> ctx.Element.IsMdiContainer <- x), x)
    [<CustomOperation("IsMdiContainer")>] member inline this.IsMdiContainer ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IsMdiContainer), (fun ctx x -> ctx.Element.IsMdiContainer <- x), x)
    [<CustomOperation("KeyPreview")>] member inline this.KeyPreview ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPreview), (fun ctx x -> ctx.Element.KeyPreview <- x), x)
    [<CustomOperation("KeyPreview")>] member inline this.KeyPreview ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPreview), (fun ctx x -> ctx.Element.KeyPreview <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximizeBox")>] member inline this.MaximizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximizeBox), (fun ctx x -> ctx.Element.MaximizeBox <- x), x)
    [<CustomOperation("MaximizeBox")>] member inline this.MaximizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximizeBox), (fun ctx x -> ctx.Element.MaximizeBox <- x), x)
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("Margin")>] member inline this.Margin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Margin), (fun ctx x -> ctx.Element.Margin <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("StartPosition")>] member inline this.StartPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormStartPosition) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StartPosition), (fun ctx x -> ctx.Element.StartPosition <- x), x)
    [<CustomOperation("StartPosition")>] member inline this.StartPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StartPosition), (fun ctx x -> ctx.Element.StartPosition <- x), x)
    [<CustomOperation("TopMost")>] member inline this.TopMost ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopMost), (fun ctx x -> ctx.Element.TopMost <- x), x)
    [<CustomOperation("TopMost")>] member inline this.TopMost ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopMost), (fun ctx x -> ctx.Element.TopMost <- x), x)
    [<CustomOperation("TransparencyKey")>] member inline this.TransparencyKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TransparencyKey), (fun ctx x -> ctx.Element.TransparencyKey <- x), x)
    [<CustomOperation("TransparencyKey")>] member inline this.TransparencyKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TransparencyKey), (fun ctx x -> ctx.Element.TransparencyKey <- x), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)
    [<CustomOperation("WindowState")>] member inline this.WindowState ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FormWindowState) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WindowState), (fun ctx x -> ctx.Element.WindowState <- x), x)
    [<CustomOperation("WindowState")>] member inline this.WindowState ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WindowState), (fun ctx x -> ctx.Element.WindowState <- x), x)
    [<CustomOperation("AccessibleRole")>] member inline this.AccessibleRole ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AccessibleRole) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleRole), (fun ctx x -> ctx.Element.AccessibleRole <- x), x)
    [<CustomOperation("AccessibleRole")>] member inline this.AccessibleRole ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleRole), (fun ctx x -> ctx.Element.AccessibleRole <- x), x)
    [<CustomOperation("AccessibleDescription")>] member inline this.AccessibleDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDescription), (fun ctx x -> ctx.Element.AccessibleDescription <- x), x)
    [<CustomOperation("AccessibleDescription")>] member inline this.AccessibleDescription ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleDescription), (fun ctx x -> ctx.Element.AccessibleDescription <- x), x)
    [<CustomOperation("AccessibleName")>] member inline this.AccessibleName ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleName), (fun ctx x -> ctx.Element.AccessibleName <- x), x)
    [<CustomOperation("AccessibleName")>] member inline this.AccessibleName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AccessibleName), (fun ctx x -> ctx.Element.AccessibleName <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("DataBindingsEx")>] member inline this.DataBindingsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindingsEx'")>] member inline this.DataBindingsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindings")>] member inline this.DataBindings ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("DataBindings'")>] member inline this.DataBindings' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DataBindings), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Tag")>] member inline this.Tag ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Tag), (fun ctx x -> ctx.Element.Tag <- x), x)
    [<CustomOperation("Tag")>] member inline this.Tag ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Tag), (fun ctx x -> ctx.Element.Tag <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("DockPaddingEx")>] member inline this.DockPaddingEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPaddingEx'")>] member inline this.DockPaddingEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding")>] member inline this.DockPadding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding'")>] member inline this.DockPadding' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("UseAntiAlias")>] member inline this.UseAntiAlias ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseAntiAlias), (fun ctx x -> ctx.Element.UseAntiAlias <- x), x)
    [<CustomOperation("UseAntiAlias")>] member inline this.UseAntiAlias ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseAntiAlias), (fun ctx x -> ctx.Element.UseAntiAlias <- x), x)
    [<CustomOperation("AutoScaleBaseSize")>] member inline this.AutoScaleBaseSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleBaseSize), (fun ctx x -> ctx.Element.AutoScaleBaseSize <- x), x)
    [<CustomOperation("AutoScaleBaseSize")>] member inline this.AutoScaleBaseSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScaleBaseSize), (fun ctx x -> ctx.Element.AutoScaleBaseSize <- x), x)
    [<CustomOperation("Document")>] member inline this.Document ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Printing.PrintDocument) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Document), (fun ctx x -> ctx.Element.Document <- x), x)
    [<CustomOperation("Document")>] member inline this.Document ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Document), (fun ctx x -> ctx.Element.Document <- x), x)
    [<CustomOperation("MinimizeBox")>] member inline this.MinimizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimizeBox), (fun ctx x -> ctx.Element.MinimizeBox <- x), x)
    [<CustomOperation("MinimizeBox")>] member inline this.MinimizeBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimizeBox), (fun ctx x -> ctx.Element.MinimizeBox <- x), x)
    [<CustomOperation("PrintPreviewControlEx")>] member inline this.PrintPreviewControlEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.PrintPreviewControl), x)
    [<CustomOperation("PrintPreviewControlEx'")>] member inline this.PrintPreviewControlEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.PrintPreviewControl), x)
    [<CustomOperation("PrintPreviewControl")>] member inline this.PrintPreviewControl ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.PrintPreviewControl), x)
    [<CustomOperation("PrintPreviewControl'")>] member inline this.PrintPreviewControl' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.PrintPreviewControl), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("Opacity")>] member inline this.Opacity ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Opacity), (fun ctx x -> ctx.Element.Opacity <- x), x)
    [<CustomOperation("ShowInTaskbar")>] member inline this.ShowInTaskbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowInTaskbar), (fun ctx x -> ctx.Element.ShowInTaskbar <- x), x)
    [<CustomOperation("ShowInTaskbar")>] member inline this.ShowInTaskbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowInTaskbar), (fun ctx x -> ctx.Element.ShowInTaskbar <- x), x)
    [<CustomOperation("SizeGripStyle")>] member inline this.SizeGripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SizeGripStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeGripStyle), (fun ctx x -> ctx.Element.SizeGripStyle <- x), x)
    [<CustomOperation("SizeGripStyle")>] member inline this.SizeGripStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SizeGripStyle), (fun ctx x -> ctx.Element.SizeGripStyle <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("AutoValidateChanged")>] member inline this.AutoValidateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidateChanged), "AutoValidateChanged", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("ContextMenuStripChanged")>] member inline this.ContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ContextMenuStripChanged), "ContextMenuStripChanged", fn)
    [<CustomOperation("MaximumSizeChanged")>] member inline this.MaximumSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSizeChanged), "MaximumSizeChanged", fn)
    [<CustomOperation("MarginChanged")>] member inline this.MarginChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MarginChanged), "MarginChanged", fn)
    [<CustomOperation("MinimumSizeChanged")>] member inline this.MinimumSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSizeChanged), "MinimumSizeChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("SizeChanged")>] member inline this.SizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeChanged), "SizeChanged", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("EnabledChanged")>] member inline this.EnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EnabledChanged), "EnabledChanged", fn)
    [<CustomOperation("LocationChanged")>] member inline this.LocationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LocationChanged), "LocationChanged", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("VisibleChanged")>] member inline this.VisibleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VisibleChanged), "VisibleChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
                

type ThreadExceptionDialogBuilder<'Element when 'Element :> System.Windows.Forms.ThreadExceptionDialog>() =
    inherit FormBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
                
            
namespace rec System.Windows.Forms.DslInternals.Design

open FSharp.Data.Adaptive
open Fun.SunUI
open System.Windows.Forms
open System.Windows.Forms.DslInternals


type ComponentEditorFormBuilder<'Element when 'Element :> System.Windows.Forms.Design.ComponentEditorForm>() =
    inherit FormBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
                
            
namespace rec System.Windows.Forms.DslInternals

open FSharp.Data.Adaptive
open Fun.SunUI
open System.Windows.Forms
open System.Windows.Forms.DslInternals


type PropertyGridBuilder<'Element when 'Element :> System.Windows.Forms.PropertyGrid>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BrowsableAttributes")>] member inline this.BrowsableAttributes ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.ComponentModel.AttributeCollection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BrowsableAttributes), (fun ctx x -> ctx.Element.BrowsableAttributes <- x), x)
    [<CustomOperation("BrowsableAttributes")>] member inline this.BrowsableAttributes ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BrowsableAttributes), (fun ctx x -> ctx.Element.BrowsableAttributes <- x), x)
    [<CustomOperation("CategoryForeColor")>] member inline this.CategoryForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CategoryForeColor), (fun ctx x -> ctx.Element.CategoryForeColor <- x), x)
    [<CustomOperation("CategoryForeColor")>] member inline this.CategoryForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CategoryForeColor), (fun ctx x -> ctx.Element.CategoryForeColor <- x), x)
    [<CustomOperation("CommandsBackColor")>] member inline this.CommandsBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsBackColor), (fun ctx x -> ctx.Element.CommandsBackColor <- x), x)
    [<CustomOperation("CommandsBackColor")>] member inline this.CommandsBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsBackColor), (fun ctx x -> ctx.Element.CommandsBackColor <- x), x)
    [<CustomOperation("CommandsForeColor")>] member inline this.CommandsForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsForeColor), (fun ctx x -> ctx.Element.CommandsForeColor <- x), x)
    [<CustomOperation("CommandsForeColor")>] member inline this.CommandsForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsForeColor), (fun ctx x -> ctx.Element.CommandsForeColor <- x), x)
    [<CustomOperation("CommandsLinkColor")>] member inline this.CommandsLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsLinkColor), (fun ctx x -> ctx.Element.CommandsLinkColor <- x), x)
    [<CustomOperation("CommandsLinkColor")>] member inline this.CommandsLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsLinkColor), (fun ctx x -> ctx.Element.CommandsLinkColor <- x), x)
    [<CustomOperation("CommandsActiveLinkColor")>] member inline this.CommandsActiveLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsActiveLinkColor), (fun ctx x -> ctx.Element.CommandsActiveLinkColor <- x), x)
    [<CustomOperation("CommandsActiveLinkColor")>] member inline this.CommandsActiveLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsActiveLinkColor), (fun ctx x -> ctx.Element.CommandsActiveLinkColor <- x), x)
    [<CustomOperation("CommandsDisabledLinkColor")>] member inline this.CommandsDisabledLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsDisabledLinkColor), (fun ctx x -> ctx.Element.CommandsDisabledLinkColor <- x), x)
    [<CustomOperation("CommandsDisabledLinkColor")>] member inline this.CommandsDisabledLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsDisabledLinkColor), (fun ctx x -> ctx.Element.CommandsDisabledLinkColor <- x), x)
    [<CustomOperation("CommandsBorderColor")>] member inline this.CommandsBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsBorderColor), (fun ctx x -> ctx.Element.CommandsBorderColor <- x), x)
    [<CustomOperation("CommandsBorderColor")>] member inline this.CommandsBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsBorderColor), (fun ctx x -> ctx.Element.CommandsBorderColor <- x), x)
    [<CustomOperation("CommandsVisibleIfAvailable")>] member inline this.CommandsVisibleIfAvailable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsVisibleIfAvailable), (fun ctx x -> ctx.Element.CommandsVisibleIfAvailable <- x), x)
    [<CustomOperation("CommandsVisibleIfAvailable")>] member inline this.CommandsVisibleIfAvailable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommandsVisibleIfAvailable), (fun ctx x -> ctx.Element.CommandsVisibleIfAvailable <- x), x)
    [<CustomOperation("ContextMenuDefaultLocationEx")>] member inline this.ContextMenuDefaultLocationEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ContextMenuDefaultLocation), x)
    [<CustomOperation("ContextMenuDefaultLocationEx'")>] member inline this.ContextMenuDefaultLocationEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ContextMenuDefaultLocation), x)
    [<CustomOperation("ContextMenuDefaultLocation")>] member inline this.ContextMenuDefaultLocation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ContextMenuDefaultLocation), x)
    [<CustomOperation("ContextMenuDefaultLocation'")>] member inline this.ContextMenuDefaultLocation' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ContextMenuDefaultLocation), x)

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("HelpBackColor")>] member inline this.HelpBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpBackColor), (fun ctx x -> ctx.Element.HelpBackColor <- x), x)
    [<CustomOperation("HelpBackColor")>] member inline this.HelpBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpBackColor), (fun ctx x -> ctx.Element.HelpBackColor <- x), x)
    [<CustomOperation("HelpForeColor")>] member inline this.HelpForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpForeColor), (fun ctx x -> ctx.Element.HelpForeColor <- x), x)
    [<CustomOperation("HelpForeColor")>] member inline this.HelpForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpForeColor), (fun ctx x -> ctx.Element.HelpForeColor <- x), x)
    [<CustomOperation("HelpBorderColor")>] member inline this.HelpBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpBorderColor), (fun ctx x -> ctx.Element.HelpBorderColor <- x), x)
    [<CustomOperation("HelpBorderColor")>] member inline this.HelpBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpBorderColor), (fun ctx x -> ctx.Element.HelpBorderColor <- x), x)
    [<CustomOperation("HelpVisible")>] member inline this.HelpVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpVisible), (fun ctx x -> ctx.Element.HelpVisible <- x), x)
    [<CustomOperation("HelpVisible")>] member inline this.HelpVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HelpVisible), (fun ctx x -> ctx.Element.HelpVisible <- x), x)
    [<CustomOperation("SelectedItemWithFocusBackColor")>] member inline this.SelectedItemWithFocusBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItemWithFocusBackColor), (fun ctx x -> ctx.Element.SelectedItemWithFocusBackColor <- x), x)
    [<CustomOperation("SelectedItemWithFocusBackColor")>] member inline this.SelectedItemWithFocusBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItemWithFocusBackColor), (fun ctx x -> ctx.Element.SelectedItemWithFocusBackColor <- x), x)
    [<CustomOperation("SelectedItemWithFocusForeColor")>] member inline this.SelectedItemWithFocusForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItemWithFocusForeColor), (fun ctx x -> ctx.Element.SelectedItemWithFocusForeColor <- x), x)
    [<CustomOperation("SelectedItemWithFocusForeColor")>] member inline this.SelectedItemWithFocusForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItemWithFocusForeColor), (fun ctx x -> ctx.Element.SelectedItemWithFocusForeColor <- x), x)
    [<CustomOperation("DisabledItemForeColor")>] member inline this.DisabledItemForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DisabledItemForeColor), (fun ctx x -> ctx.Element.DisabledItemForeColor <- x), x)
    [<CustomOperation("DisabledItemForeColor")>] member inline this.DisabledItemForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DisabledItemForeColor), (fun ctx x -> ctx.Element.DisabledItemForeColor <- x), x)
    [<CustomOperation("CategorySplitterColor")>] member inline this.CategorySplitterColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CategorySplitterColor), (fun ctx x -> ctx.Element.CategorySplitterColor <- x), x)
    [<CustomOperation("CategorySplitterColor")>] member inline this.CategorySplitterColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CategorySplitterColor), (fun ctx x -> ctx.Element.CategorySplitterColor <- x), x)
    [<CustomOperation("CanShowVisualStyleGlyphs")>] member inline this.CanShowVisualStyleGlyphs ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CanShowVisualStyleGlyphs), (fun ctx x -> ctx.Element.CanShowVisualStyleGlyphs <- x), x)
    [<CustomOperation("CanShowVisualStyleGlyphs")>] member inline this.CanShowVisualStyleGlyphs ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CanShowVisualStyleGlyphs), (fun ctx x -> ctx.Element.CanShowVisualStyleGlyphs <- x), x)
    [<CustomOperation("LineColor")>] member inline this.LineColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LineColor), (fun ctx x -> ctx.Element.LineColor <- x), x)
    [<CustomOperation("LineColor")>] member inline this.LineColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LineColor), (fun ctx x -> ctx.Element.LineColor <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("PropertySort")>] member inline this.PropertySort ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.PropertySort) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PropertySort), (fun ctx x -> ctx.Element.PropertySort <- x), x)
    [<CustomOperation("PropertySort")>] member inline this.PropertySort ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PropertySort), (fun ctx x -> ctx.Element.PropertySort <- x), x)
    [<CustomOperation("PropertyTabsEx")>] member inline this.PropertyTabsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.PropertyTabs), x)
    [<CustomOperation("PropertyTabsEx'")>] member inline this.PropertyTabsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.PropertyTabs), x)
    [<CustomOperation("PropertyTabs")>] member inline this.PropertyTabs ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.PropertyTabs), x)
    [<CustomOperation("PropertyTabs'")>] member inline this.PropertyTabs' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.PropertyTabs), x)
    [<CustomOperation("SelectedObject")>] member inline this.SelectedObject ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedObject), (fun ctx x -> ctx.Element.SelectedObject <- x), x)
    [<CustomOperation("SelectedObject")>] member inline this.SelectedObject ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedObject), (fun ctx x -> ctx.Element.SelectedObject <- x), x)
    [<CustomOperation("SelectedObjects")>] member inline this.SelectedObjects ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedObjects), (fun ctx x -> ctx.Element.SelectedObjects <- x), x)
    [<CustomOperation("SelectedObjects")>] member inline this.SelectedObjects ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedObjects), (fun ctx x -> ctx.Element.SelectedObjects <- x), x)
    [<CustomOperation("SelectedTabEx")>] member inline this.SelectedTabEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedTab), x)
    [<CustomOperation("SelectedTabEx'")>] member inline this.SelectedTabEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedTab), x)
    [<CustomOperation("SelectedTab")>] member inline this.SelectedTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedTab), x)
    [<CustomOperation("SelectedTab'")>] member inline this.SelectedTab' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedTab), x)
    [<CustomOperation("SelectedGridItem")>] member inline this.SelectedGridItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.GridItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedGridItem), (fun ctx x -> ctx.Element.SelectedGridItem <- x), x)
    [<CustomOperation("SelectedGridItem")>] member inline this.SelectedGridItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedGridItem), (fun ctx x -> ctx.Element.SelectedGridItem <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.ComponentModel.ISite) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("LargeButtons")>] member inline this.LargeButtons ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LargeButtons), (fun ctx x -> ctx.Element.LargeButtons <- x), x)
    [<CustomOperation("LargeButtons")>] member inline this.LargeButtons ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LargeButtons), (fun ctx x -> ctx.Element.LargeButtons <- x), x)
    [<CustomOperation("ToolbarVisible")>] member inline this.ToolbarVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ToolbarVisible), (fun ctx x -> ctx.Element.ToolbarVisible <- x), x)
    [<CustomOperation("ToolbarVisible")>] member inline this.ToolbarVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ToolbarVisible), (fun ctx x -> ctx.Element.ToolbarVisible <- x), x)
    [<CustomOperation("ViewBackColor")>] member inline this.ViewBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ViewBackColor), (fun ctx x -> ctx.Element.ViewBackColor <- x), x)
    [<CustomOperation("ViewBackColor")>] member inline this.ViewBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ViewBackColor), (fun ctx x -> ctx.Element.ViewBackColor <- x), x)
    [<CustomOperation("ViewForeColor")>] member inline this.ViewForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ViewForeColor), (fun ctx x -> ctx.Element.ViewForeColor <- x), x)
    [<CustomOperation("ViewForeColor")>] member inline this.ViewForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ViewForeColor), (fun ctx x -> ctx.Element.ViewForeColor <- x), x)
    [<CustomOperation("ViewBorderColor")>] member inline this.ViewBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ViewBorderColor), (fun ctx x -> ctx.Element.ViewBorderColor <- x), x)
    [<CustomOperation("ViewBorderColor")>] member inline this.ViewBorderColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ViewBorderColor), (fun ctx x -> ctx.Element.ViewBorderColor <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
    [<CustomOperation("PropertyValueChanged")>] member inline this.PropertyValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PropertyValueChanged), "PropertyValueChanged", fn)
    [<CustomOperation("PropertyTabChanged")>] member inline this.PropertyTabChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PropertyTabChanged), "PropertyTabChanged", fn)
    [<CustomOperation("PropertySortChanged")>] member inline this.PropertySortChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PropertySortChanged), "PropertySortChanged", fn)
    [<CustomOperation("SelectedGridItemChanged")>] member inline this.SelectedGridItemChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedGridItemChanged), "SelectedGridItemChanged", fn)
    [<CustomOperation("SelectedObjectsChanged")>] member inline this.SelectedObjectsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedObjectsChanged), "SelectedObjectsChanged", fn)
                

type SplitContainerBuilder<'Element when 'Element :> System.Windows.Forms.SplitContainer>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollOffset")>] member inline this.AutoScrollOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollOffset), (fun ctx x -> ctx.Element.AutoScrollOffset <- x), x)
    [<CustomOperation("AutoScrollOffset")>] member inline this.AutoScrollOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollOffset), (fun ctx x -> ctx.Element.AutoScrollOffset <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AutoScrollPosition")>] member inline this.AutoScrollPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollPosition), (fun ctx x -> ctx.Element.AutoScrollPosition <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BindingContext) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("BindingContext")>] member inline this.BindingContext ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContext), (fun ctx x -> ctx.Element.BindingContext <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("FixedPanel")>] member inline this.FixedPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FixedPanel) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FixedPanel), (fun ctx x -> ctx.Element.FixedPanel <- x), x)
    [<CustomOperation("FixedPanel")>] member inline this.FixedPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FixedPanel), (fun ctx x -> ctx.Element.FixedPanel <- x), x)
    [<CustomOperation("IsSplitterFixed")>] member inline this.IsSplitterFixed ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IsSplitterFixed), (fun ctx x -> ctx.Element.IsSplitterFixed <- x), x)
    [<CustomOperation("IsSplitterFixed")>] member inline this.IsSplitterFixed ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IsSplitterFixed), (fun ctx x -> ctx.Element.IsSplitterFixed <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Orientation) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Panel1Ex")>] member inline this.Panel1Ex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Panel1), x)
    [<CustomOperation("Panel1Ex'")>] member inline this.Panel1Ex' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Panel1), x)
    [<CustomOperation("Panel1")>] member inline this.Panel1 ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Panel1), x)
    [<CustomOperation("Panel1'")>] member inline this.Panel1' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Panel1), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Panel1Collapsed")>] member inline this.Panel1Collapsed ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Panel1Collapsed), (fun ctx x -> ctx.Element.Panel1Collapsed <- x), x)
    [<CustomOperation("Panel1Collapsed")>] member inline this.Panel1Collapsed ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Panel1Collapsed), (fun ctx x -> ctx.Element.Panel1Collapsed <- x), x)
    [<CustomOperation("Panel2Collapsed")>] member inline this.Panel2Collapsed ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Panel2Collapsed), (fun ctx x -> ctx.Element.Panel2Collapsed <- x), x)
    [<CustomOperation("Panel2Collapsed")>] member inline this.Panel2Collapsed ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Panel2Collapsed), (fun ctx x -> ctx.Element.Panel2Collapsed <- x), x)
    [<CustomOperation("Panel1MinSize")>] member inline this.Panel1MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Panel1MinSize), (fun ctx x -> ctx.Element.Panel1MinSize <- x), x)
    [<CustomOperation("Panel1MinSize")>] member inline this.Panel1MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Panel1MinSize), (fun ctx x -> ctx.Element.Panel1MinSize <- x), x)
    [<CustomOperation("Panel2Ex")>] member inline this.Panel2Ex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Panel2), x)
    [<CustomOperation("Panel2Ex'")>] member inline this.Panel2Ex' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Panel2), x)
    [<CustomOperation("Panel2")>] member inline this.Panel2 ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Panel2), x)
    [<CustomOperation("Panel2'")>] member inline this.Panel2' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Panel2), x)
    [<CustomOperation("Panel2MinSize")>] member inline this.Panel2MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Panel2MinSize), (fun ctx x -> ctx.Element.Panel2MinSize <- x), x)
    [<CustomOperation("Panel2MinSize")>] member inline this.Panel2MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Panel2MinSize), (fun ctx x -> ctx.Element.Panel2MinSize <- x), x)
    [<CustomOperation("SplitterDistance")>] member inline this.SplitterDistance ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterDistance), (fun ctx x -> ctx.Element.SplitterDistance <- x), x)
    [<CustomOperation("SplitterDistance")>] member inline this.SplitterDistance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterDistance), (fun ctx x -> ctx.Element.SplitterDistance <- x), x)
    [<CustomOperation("SplitterIncrement")>] member inline this.SplitterIncrement ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterIncrement), (fun ctx x -> ctx.Element.SplitterIncrement <- x), x)
    [<CustomOperation("SplitterIncrement")>] member inline this.SplitterIncrement ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterIncrement), (fun ctx x -> ctx.Element.SplitterIncrement <- x), x)
    [<CustomOperation("SplitterRectangleEx")>] member inline this.SplitterRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SplitterRectangle), x)
    [<CustomOperation("SplitterRectangleEx'")>] member inline this.SplitterRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SplitterRectangle), x)
    [<CustomOperation("SplitterRectangle")>] member inline this.SplitterRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SplitterRectangle), x)
    [<CustomOperation("SplitterRectangle'")>] member inline this.SplitterRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SplitterRectangle), x)
    [<CustomOperation("SplitterWidth")>] member inline this.SplitterWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterWidth), (fun ctx x -> ctx.Element.SplitterWidth <- x), x)
    [<CustomOperation("SplitterWidth")>] member inline this.SplitterWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterWidth), (fun ctx x -> ctx.Element.SplitterWidth <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("ControlAdded")>] member inline this.ControlAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlAdded), "ControlAdded", fn)
    [<CustomOperation("ControlRemoved")>] member inline this.ControlRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ControlRemoved), "ControlRemoved", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("SplitterMoving")>] member inline this.SplitterMoving ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterMoving), "SplitterMoving", fn)
    [<CustomOperation("SplitterMoved")>] member inline this.SplitterMoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterMoved), "SplitterMoved", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
                

type ToolStripContainerBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripContainer>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BottomToolStripPanelEx")>] member inline this.BottomToolStripPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.BottomToolStripPanel), x)
    [<CustomOperation("BottomToolStripPanelEx'")>] member inline this.BottomToolStripPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.BottomToolStripPanel), x)
    [<CustomOperation("BottomToolStripPanel")>] member inline this.BottomToolStripPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.BottomToolStripPanel), x)
    [<CustomOperation("BottomToolStripPanel'")>] member inline this.BottomToolStripPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.BottomToolStripPanel), x)
    [<CustomOperation("BottomToolStripPanelVisible")>] member inline this.BottomToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BottomToolStripPanelVisible), (fun ctx x -> ctx.Element.BottomToolStripPanelVisible <- x), x)
    [<CustomOperation("BottomToolStripPanelVisible")>] member inline this.BottomToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BottomToolStripPanelVisible), (fun ctx x -> ctx.Element.BottomToolStripPanelVisible <- x), x)
    [<CustomOperation("ContentPanelEx")>] member inline this.ContentPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ContentPanel), x)
    [<CustomOperation("ContentPanelEx'")>] member inline this.ContentPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ContentPanel), x)
    [<CustomOperation("ContentPanel")>] member inline this.ContentPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ContentPanel), x)
    [<CustomOperation("ContentPanel'")>] member inline this.ContentPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ContentPanel), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)

    [<CustomOperation("ContextMenuStrip")>]
    member inline this.ContextMenuStrip ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContextMenuStrip <- x), creator)
                        
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("LeftToolStripPanelEx")>] member inline this.LeftToolStripPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LeftToolStripPanel), x)
    [<CustomOperation("LeftToolStripPanelEx'")>] member inline this.LeftToolStripPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LeftToolStripPanel), x)
    [<CustomOperation("LeftToolStripPanel")>] member inline this.LeftToolStripPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LeftToolStripPanel), x)
    [<CustomOperation("LeftToolStripPanel'")>] member inline this.LeftToolStripPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LeftToolStripPanel), x)
    [<CustomOperation("LeftToolStripPanelVisible")>] member inline this.LeftToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LeftToolStripPanelVisible), (fun ctx x -> ctx.Element.LeftToolStripPanelVisible <- x), x)
    [<CustomOperation("LeftToolStripPanelVisible")>] member inline this.LeftToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LeftToolStripPanelVisible), (fun ctx x -> ctx.Element.LeftToolStripPanelVisible <- x), x)
    [<CustomOperation("RightToolStripPanelEx")>] member inline this.RightToolStripPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.RightToolStripPanel), x)
    [<CustomOperation("RightToolStripPanelEx'")>] member inline this.RightToolStripPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.RightToolStripPanel), x)
    [<CustomOperation("RightToolStripPanel")>] member inline this.RightToolStripPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.RightToolStripPanel), x)
    [<CustomOperation("RightToolStripPanel'")>] member inline this.RightToolStripPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.RightToolStripPanel), x)
    [<CustomOperation("RightToolStripPanelVisible")>] member inline this.RightToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToolStripPanelVisible), (fun ctx x -> ctx.Element.RightToolStripPanelVisible <- x), x)
    [<CustomOperation("RightToolStripPanelVisible")>] member inline this.RightToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToolStripPanelVisible), (fun ctx x -> ctx.Element.RightToolStripPanelVisible <- x), x)
    [<CustomOperation("TopToolStripPanelEx")>] member inline this.TopToolStripPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.TopToolStripPanel), x)
    [<CustomOperation("TopToolStripPanelEx'")>] member inline this.TopToolStripPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.TopToolStripPanel), x)
    [<CustomOperation("TopToolStripPanel")>] member inline this.TopToolStripPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.TopToolStripPanel), x)
    [<CustomOperation("TopToolStripPanel'")>] member inline this.TopToolStripPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.TopToolStripPanel), x)
    [<CustomOperation("TopToolStripPanelVisible")>] member inline this.TopToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopToolStripPanelVisible), (fun ctx x -> ctx.Element.TopToolStripPanelVisible <- x), x)
    [<CustomOperation("TopToolStripPanelVisible")>] member inline this.TopToolStripPanelVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopToolStripPanelVisible), (fun ctx x -> ctx.Element.TopToolStripPanelVisible <- x), x)

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        

    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("ContextMenuStripChanged")>] member inline this.ContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ContextMenuStripChanged), "ContextMenuStripChanged", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
                

type ToolStripPanelBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripPanel>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("RowMargin")>] member inline this.RowMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowMargin), (fun ctx x -> ctx.Element.RowMargin <- x), x)
    [<CustomOperation("RowMargin")>] member inline this.RowMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowMargin), (fun ctx x -> ctx.Element.RowMargin <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("Locked")>] member inline this.Locked ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Locked), (fun ctx x -> ctx.Element.Locked <- x), x)
    [<CustomOperation("Locked")>] member inline this.Locked ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Locked), (fun ctx x -> ctx.Element.Locked <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Orientation) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderer) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)
    [<CustomOperation("RowsEx")>] member inline this.RowsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Rows), x)
    [<CustomOperation("RowsEx'")>] member inline this.RowsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Rows), x)
    [<CustomOperation("Rows")>] member inline this.Rows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Rows), x)
    [<CustomOperation("Rows'")>] member inline this.Rows' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Rows), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("RendererChanged")>] member inline this.RendererChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RendererChanged), "RendererChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
                

type UserControlBuilder<'Element when 'Element :> System.Windows.Forms.UserControl>() =
    inherit ContainerControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoValidate) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("AutoValidate")>] member inline this.AutoValidate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidate), (fun ctx x -> ctx.Element.AutoValidate <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("AutoValidateChanged")>] member inline this.AutoValidateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoValidateChanged), "AutoValidateChanged", fn)
    [<CustomOperation("Load")>] member inline this.Load ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Load), "Load", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
                

type PanelBuilder<'Element when 'Element :> System.Windows.Forms.Panel>() =
    inherit ScrollableControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
                

type FlowLayoutPanelBuilder<'Element when 'Element :> System.Windows.Forms.FlowLayoutPanel>() =
    inherit PanelBuilder<'Element>()

    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("FlowDirection")>] member inline this.FlowDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlowDirection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlowDirection), (fun ctx x -> ctx.Element.FlowDirection <- x), x)
    [<CustomOperation("FlowDirection")>] member inline this.FlowDirection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlowDirection), (fun ctx x -> ctx.Element.FlowDirection <- x), x)
    [<CustomOperation("WrapContents")>] member inline this.WrapContents ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WrapContents), (fun ctx x -> ctx.Element.WrapContents <- x), x)
    [<CustomOperation("WrapContents")>] member inline this.WrapContents ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WrapContents), (fun ctx x -> ctx.Element.WrapContents <- x), x)

                

type SplitterPanelBuilder() =
    inherit PanelBuilder<System.Windows.Forms.SplitterPanel>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("DockPaddingEx")>] member inline this.DockPaddingEx ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPaddingEx'")>] member inline this.DockPaddingEx' ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding")>] member inline this.DockPadding ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("DockPadding'")>] member inline this.DockPadding' ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DockPadding), x)
    [<CustomOperation("Height")>] member inline this.Height ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Height), (fun ctx x -> ctx.Element.Height <- x), x)
    [<CustomOperation("Height")>] member inline this.Height ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Height), (fun ctx x -> ctx.Element.Height <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)

    [<CustomOperation("Parent")>]
    member inline this.Parent ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Parent <- x), creator)

    [<CustomOperation("Parent")>]
    member inline this.Parent ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.Parent <- x), creator)
                        
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Width")>] member inline this.Width ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Width), (fun ctx x -> ctx.Element.Width <- x), x)
    [<CustomOperation("Width")>] member inline this.Width ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Width), (fun ctx x -> ctx.Element.Width <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("VisibleChanged")>] member inline this.VisibleChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VisibleChanged), "VisibleChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("LocationChanged")>] member inline this.LocationChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LocationChanged), "LocationChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitterPanel>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
                

type TableLayoutPanelBuilder<'Element when 'Element :> System.Windows.Forms.TableLayoutPanel>() =
    inherit PanelBuilder<'Element>()

    [<CustomOperation("LayoutEngineEx")>] member inline this.LayoutEngineEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngineEx'")>] member inline this.LayoutEngineEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine")>] member inline this.LayoutEngine ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutEngine'")>] member inline this.LayoutEngine' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.LayoutEngine), x)
    [<CustomOperation("LayoutSettings")>] member inline this.LayoutSettings ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TableLayoutSettings) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutSettings), (fun ctx x -> ctx.Element.LayoutSettings <- x), x)
    [<CustomOperation("LayoutSettings")>] member inline this.LayoutSettings ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LayoutSettings), (fun ctx x -> ctx.Element.LayoutSettings <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("CellBorderStyle")>] member inline this.CellBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TableLayoutPanelCellBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CellBorderStyle), (fun ctx x -> ctx.Element.CellBorderStyle <- x), x)
    [<CustomOperation("CellBorderStyle")>] member inline this.CellBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CellBorderStyle), (fun ctx x -> ctx.Element.CellBorderStyle <- x), x)

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("Controls")>]
    member inline this.Controls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> alist) =
        this.MakeChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )

    [<CustomOperation("StaticControls")>]
    member inline this.StaticControls ([<InlineIfLambda>] builder: BuildElement<'Element>, items: ElementCreator<WinForms> seq) =
        this.MakeStaticChildrenBuilder<'Element, System.Windows.Forms.Control>(
            builder,
            (fun x -> x.Element.Controls.Clear()),
            (fun x (ls: System.Windows.Forms.Control[]) -> x.Element.Controls.AddRange(ls)),
            items
        )
                        
    [<CustomOperation("ColumnCount")>] member inline this.ColumnCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnCount), (fun ctx x -> ctx.Element.ColumnCount <- x), x)
    [<CustomOperation("ColumnCount")>] member inline this.ColumnCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnCount), (fun ctx x -> ctx.Element.ColumnCount <- x), x)
    [<CustomOperation("GrowStyle")>] member inline this.GrowStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TableLayoutPanelGrowStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GrowStyle), (fun ctx x -> ctx.Element.GrowStyle <- x), x)
    [<CustomOperation("GrowStyle")>] member inline this.GrowStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GrowStyle), (fun ctx x -> ctx.Element.GrowStyle <- x), x)
    [<CustomOperation("RowCount")>] member inline this.RowCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowCount), (fun ctx x -> ctx.Element.RowCount <- x), x)
    [<CustomOperation("RowCount")>] member inline this.RowCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowCount), (fun ctx x -> ctx.Element.RowCount <- x), x)
    [<CustomOperation("RowStylesEx")>] member inline this.RowStylesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.RowStyles), x)
    [<CustomOperation("RowStylesEx'")>] member inline this.RowStylesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.RowStyles), x)
    [<CustomOperation("RowStyles")>] member inline this.RowStyles ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.RowStyles), x)
    [<CustomOperation("RowStyles'")>] member inline this.RowStyles' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.RowStyles), x)
    [<CustomOperation("ColumnStylesEx")>] member inline this.ColumnStylesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ColumnStyles), x)
    [<CustomOperation("ColumnStylesEx'")>] member inline this.ColumnStylesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ColumnStyles), x)
    [<CustomOperation("ColumnStyles")>] member inline this.ColumnStyles ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ColumnStyles), x)
    [<CustomOperation("ColumnStyles'")>] member inline this.ColumnStyles' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ColumnStyles), x)

    [<CustomOperation("CellPaint")>] member inline this.CellPaint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellPaint), "CellPaint", fn)
                

type TabPageBuilder<'Element when 'Element :> System.Windows.Forms.TabPage>() =
    inherit PanelBuilder<'Element>()

    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("UseVisualStyleBackColor")>] member inline this.UseVisualStyleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseVisualStyleBackColor), (fun ctx x -> ctx.Element.UseVisualStyleBackColor <- x), x)
    [<CustomOperation("UseVisualStyleBackColor")>] member inline this.UseVisualStyleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseVisualStyleBackColor), (fun ctx x -> ctx.Element.UseVisualStyleBackColor <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("PreferredSizeEx")>] member inline this.PreferredSizeEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSizeEx'")>] member inline this.PreferredSizeEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSize")>] member inline this.PreferredSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("PreferredSize'")>] member inline this.PreferredSize' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.PreferredSize), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("ToolTipText")>] member inline this.ToolTipText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ToolTipText), (fun ctx x -> ctx.Element.ToolTipText <- x), x)
    [<CustomOperation("ToolTipText")>] member inline this.ToolTipText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ToolTipText), (fun ctx x -> ctx.Element.ToolTipText <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)
    [<CustomOperation("Visible")>] member inline this.Visible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Visible), (fun ctx x -> ctx.Element.Visible <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("EnabledChanged")>] member inline this.EnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EnabledChanged), "EnabledChanged", fn)
    [<CustomOperation("LocationChanged")>] member inline this.LocationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LocationChanged), "LocationChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("VisibleChanged")>] member inline this.VisibleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VisibleChanged), "VisibleChanged", fn)
                

type ToolStripContentPanelBuilder<'Element when 'Element :> System.Windows.Forms.ToolStripContentPanel>() =
    inherit PanelBuilder<'Element>()

    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScroll")>] member inline this.AutoScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScroll), (fun ctx x -> ctx.Element.AutoScroll <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMargin")>] member inline this.AutoScrollMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMargin), (fun ctx x -> ctx.Element.AutoScrollMargin <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoScrollMinSize")>] member inline this.AutoScrollMinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoScrollMinSize), (fun ctx x -> ctx.Element.AutoScrollMinSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("Location")>] member inline this.Location ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Location), (fun ctx x -> ctx.Element.Location <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)
    [<CustomOperation("Name")>] member inline this.Name ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Name), (fun ctx x -> ctx.Element.Name <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderer) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("Renderer")>] member inline this.Renderer ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Renderer), (fun ctx x -> ctx.Element.Renderer <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ToolStripRenderMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)
    [<CustomOperation("RenderMode")>] member inline this.RenderMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RenderMode), (fun ctx x -> ctx.Element.RenderMode <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("DockChanged")>] member inline this.DockChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DockChanged), "DockChanged", fn)
    [<CustomOperation("Load")>] member inline this.Load ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Load), "Load", fn)
    [<CustomOperation("LocationChanged")>] member inline this.LocationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LocationChanged), "LocationChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("RendererChanged")>] member inline this.RendererChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RendererChanged), "RendererChanged", fn)
                
            
namespace rec System.Windows.Forms.DslInternals.Design

open FSharp.Data.Adaptive
open Fun.SunUI
open System.Windows.Forms
open System.Windows.Forms.DslInternals


type ComponentEditorPageBuilder<'Element when 'Element :> System.Windows.Forms.Design.ComponentEditorPage>() =
    inherit PanelBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("CommitOnDeactivate")>] member inline this.CommitOnDeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CommitOnDeactivate), (fun ctx x -> ctx.Element.CommitOnDeactivate <- x), x)
    [<CustomOperation("CommitOnDeactivate")>] member inline this.CommitOnDeactivate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CommitOnDeactivate), (fun ctx x -> ctx.Element.CommitOnDeactivate <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Icon) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("Icon")>] member inline this.Icon ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Icon), (fun ctx x -> ctx.Element.Icon <- x), x)
    [<CustomOperation("TitleEx")>] member inline this.TitleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Title), x)
    [<CustomOperation("TitleEx'")>] member inline this.TitleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Title), x)
    [<CustomOperation("Title")>] member inline this.Title ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Title), x)
    [<CustomOperation("Title'")>] member inline this.Title' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Title), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
                
            
namespace rec System.Windows.Forms.DslInternals

open FSharp.Data.Adaptive
open Fun.SunUI
open System.Windows.Forms
open System.Windows.Forms.DslInternals


type ListControlBuilder<'Element when 'Element :> System.Windows.Forms.ListControl>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DisplayMember")>] member inline this.DisplayMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMember), (fun ctx x -> ctx.Element.DisplayMember <- x), x)
    [<CustomOperation("DisplayMember")>] member inline this.DisplayMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMember), (fun ctx x -> ctx.Element.DisplayMember <- x), x)
    [<CustomOperation("FormatInfo")>] member inline this.FormatInfo ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.IFormatProvider) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatInfo), (fun ctx x -> ctx.Element.FormatInfo <- x), x)
    [<CustomOperation("FormatInfo")>] member inline this.FormatInfo ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormatInfo), (fun ctx x -> ctx.Element.FormatInfo <- x), x)
    [<CustomOperation("FormatString")>] member inline this.FormatString ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatString), (fun ctx x -> ctx.Element.FormatString <- x), x)
    [<CustomOperation("FormatString")>] member inline this.FormatString ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormatString), (fun ctx x -> ctx.Element.FormatString <- x), x)
    [<CustomOperation("FormattingEnabled")>] member inline this.FormattingEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormattingEnabled), (fun ctx x -> ctx.Element.FormattingEnabled <- x), x)
    [<CustomOperation("FormattingEnabled")>] member inline this.FormattingEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormattingEnabled), (fun ctx x -> ctx.Element.FormattingEnabled <- x), x)
    [<CustomOperation("ValueMember")>] member inline this.ValueMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMember), (fun ctx x -> ctx.Element.ValueMember <- x), x)
    [<CustomOperation("ValueMember")>] member inline this.ValueMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMember), (fun ctx x -> ctx.Element.ValueMember <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedValue")>] member inline this.SelectedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedValue), (fun ctx x -> ctx.Element.SelectedValue <- x), x)
    [<CustomOperation("SelectedValue")>] member inline this.SelectedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedValue), (fun ctx x -> ctx.Element.SelectedValue <- x), x)

    [<CustomOperation("DataSourceChanged")>] member inline this.DataSourceChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSourceChanged), "DataSourceChanged", fn)
    [<CustomOperation("DisplayMemberChanged")>] member inline this.DisplayMemberChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMemberChanged), "DisplayMemberChanged", fn)
    [<CustomOperation("Format")>] member inline this.Format ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Format), "Format", fn)
    [<CustomOperation("FormatInfoChanged")>] member inline this.FormatInfoChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatInfoChanged), "FormatInfoChanged", fn)
    [<CustomOperation("FormatStringChanged")>] member inline this.FormatStringChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatStringChanged), "FormatStringChanged", fn)
    [<CustomOperation("FormattingEnabledChanged")>] member inline this.FormattingEnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormattingEnabledChanged), "FormattingEnabledChanged", fn)
    [<CustomOperation("ValueMemberChanged")>] member inline this.ValueMemberChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMemberChanged), "ValueMemberChanged", fn)
    [<CustomOperation("SelectedValueChanged")>] member inline this.SelectedValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedValueChanged), "SelectedValueChanged", fn)
                

type ListBoxBuilder<'Element when 'Element :> System.Windows.Forms.ListBox>() =
    inherit ListControlBuilder<'Element>()

    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("ColumnWidth")>] member inline this.ColumnWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnWidth), (fun ctx x -> ctx.Element.ColumnWidth <- x), x)
    [<CustomOperation("ColumnWidth")>] member inline this.ColumnWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnWidth), (fun ctx x -> ctx.Element.ColumnWidth <- x), x)
    [<CustomOperation("UseCustomTabOffsets")>] member inline this.UseCustomTabOffsets ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCustomTabOffsets), (fun ctx x -> ctx.Element.UseCustomTabOffsets <- x), x)
    [<CustomOperation("UseCustomTabOffsets")>] member inline this.UseCustomTabOffsets ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCustomTabOffsets), (fun ctx x -> ctx.Element.UseCustomTabOffsets <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DrawMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("HorizontalExtent")>] member inline this.HorizontalExtent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalExtent), (fun ctx x -> ctx.Element.HorizontalExtent <- x), x)
    [<CustomOperation("HorizontalExtent")>] member inline this.HorizontalExtent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalExtent), (fun ctx x -> ctx.Element.HorizontalExtent <- x), x)
    [<CustomOperation("HorizontalScrollbar")>] member inline this.HorizontalScrollbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalScrollbar), (fun ctx x -> ctx.Element.HorizontalScrollbar <- x), x)
    [<CustomOperation("HorizontalScrollbar")>] member inline this.HorizontalScrollbar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalScrollbar), (fun ctx x -> ctx.Element.HorizontalScrollbar <- x), x)
    [<CustomOperation("IntegralHeight")>] member inline this.IntegralHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IntegralHeight), (fun ctx x -> ctx.Element.IntegralHeight <- x), x)
    [<CustomOperation("IntegralHeight")>] member inline this.IntegralHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IntegralHeight), (fun ctx x -> ctx.Element.IntegralHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("MultiColumn")>] member inline this.MultiColumn ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MultiColumn), (fun ctx x -> ctx.Element.MultiColumn <- x), x)
    [<CustomOperation("MultiColumn")>] member inline this.MultiColumn ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MultiColumn), (fun ctx x -> ctx.Element.MultiColumn <- x), x)
    [<CustomOperation("ScrollAlwaysVisible")>] member inline this.ScrollAlwaysVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollAlwaysVisible), (fun ctx x -> ctx.Element.ScrollAlwaysVisible <- x), x)
    [<CustomOperation("ScrollAlwaysVisible")>] member inline this.ScrollAlwaysVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollAlwaysVisible), (fun ctx x -> ctx.Element.ScrollAlwaysVisible <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndicesEx")>] member inline this.SelectedIndicesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndicesEx'")>] member inline this.SelectedIndicesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndices")>] member inline this.SelectedIndices ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndices'")>] member inline this.SelectedIndices' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("SelectedItemsEx")>] member inline this.SelectedItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItemsEx'")>] member inline this.SelectedItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItems")>] member inline this.SelectedItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItems'")>] member inline this.SelectedItems' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SelectionMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TopIndex")>] member inline this.TopIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopIndex), (fun ctx x -> ctx.Element.TopIndex <- x), x)
    [<CustomOperation("TopIndex")>] member inline this.TopIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopIndex), (fun ctx x -> ctx.Element.TopIndex <- x), x)
    [<CustomOperation("UseTabStops")>] member inline this.UseTabStops ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseTabStops), (fun ctx x -> ctx.Element.UseTabStops <- x), x)
    [<CustomOperation("UseTabStops")>] member inline this.UseTabStops ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseTabStops), (fun ctx x -> ctx.Element.UseTabStops <- x), x)
    [<CustomOperation("CustomTabOffsetsEx")>] member inline this.CustomTabOffsetsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CustomTabOffsets), x)
    [<CustomOperation("CustomTabOffsetsEx'")>] member inline this.CustomTabOffsetsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CustomTabOffsets), x)
    [<CustomOperation("CustomTabOffsets")>] member inline this.CustomTabOffsets ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CustomTabOffsets), x)
    [<CustomOperation("CustomTabOffsets'")>] member inline this.CustomTabOffsets' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CustomTabOffsets), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("DrawItem")>] member inline this.DrawItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawItem), "DrawItem", fn)
    [<CustomOperation("MeasureItem")>] member inline this.MeasureItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MeasureItem), "MeasureItem", fn)
    [<CustomOperation("SelectedIndexChanged")>] member inline this.SelectedIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndexChanged), "SelectedIndexChanged", fn)
                

type CheckedListBoxBuilder<'Element when 'Element :> System.Windows.Forms.CheckedListBox>() =
    inherit ListBoxBuilder<'Element>()

    [<CustomOperation("CheckOnClick")>] member inline this.CheckOnClick ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckOnClick), (fun ctx x -> ctx.Element.CheckOnClick <- x), x)
    [<CustomOperation("CheckOnClick")>] member inline this.CheckOnClick ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckOnClick), (fun ctx x -> ctx.Element.CheckOnClick <- x), x)
    [<CustomOperation("CheckedIndicesEx")>] member inline this.CheckedIndicesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndicesEx'")>] member inline this.CheckedIndicesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndices")>] member inline this.CheckedIndices ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndices'")>] member inline this.CheckedIndices' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedItemsEx")>] member inline this.CheckedItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItemsEx'")>] member inline this.CheckedItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItems")>] member inline this.CheckedItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItems'")>] member inline this.CheckedItems' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DisplayMember")>] member inline this.DisplayMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMember), (fun ctx x -> ctx.Element.DisplayMember <- x), x)
    [<CustomOperation("DisplayMember")>] member inline this.DisplayMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMember), (fun ctx x -> ctx.Element.DisplayMember <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DrawMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SelectionMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("ThreeDCheckBoxes")>] member inline this.ThreeDCheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ThreeDCheckBoxes), (fun ctx x -> ctx.Element.ThreeDCheckBoxes <- x), x)
    [<CustomOperation("ThreeDCheckBoxes")>] member inline this.ThreeDCheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ThreeDCheckBoxes), (fun ctx x -> ctx.Element.ThreeDCheckBoxes <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("ValueMember")>] member inline this.ValueMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMember), (fun ctx x -> ctx.Element.ValueMember <- x), x)
    [<CustomOperation("ValueMember")>] member inline this.ValueMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMember), (fun ctx x -> ctx.Element.ValueMember <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)

    [<CustomOperation("DataSourceChanged")>] member inline this.DataSourceChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSourceChanged), "DataSourceChanged", fn)
    [<CustomOperation("DisplayMemberChanged")>] member inline this.DisplayMemberChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DisplayMemberChanged), "DisplayMemberChanged", fn)
    [<CustomOperation("ItemCheck")>] member inline this.ItemCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemCheck), "ItemCheck", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("DrawItem")>] member inline this.DrawItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawItem), "DrawItem", fn)
    [<CustomOperation("MeasureItem")>] member inline this.MeasureItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MeasureItem), "MeasureItem", fn)
    [<CustomOperation("ValueMemberChanged")>] member inline this.ValueMemberChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueMemberChanged), "ValueMemberChanged", fn)
                

type ComboBoxBuilder<'Element when 'Element :> System.Windows.Forms.ComboBox>() =
    inherit ListControlBuilder<'Element>()

    [<CustomOperation("AutoCompleteMode")>] member inline this.AutoCompleteMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteMode), (fun ctx x -> ctx.Element.AutoCompleteMode <- x), x)
    [<CustomOperation("AutoCompleteMode")>] member inline this.AutoCompleteMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteMode), (fun ctx x -> ctx.Element.AutoCompleteMode <- x), x)
    [<CustomOperation("AutoCompleteSource")>] member inline this.AutoCompleteSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteSource) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteSource), (fun ctx x -> ctx.Element.AutoCompleteSource <- x), x)
    [<CustomOperation("AutoCompleteSource")>] member inline this.AutoCompleteSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteSource), (fun ctx x -> ctx.Element.AutoCompleteSource <- x), x)
    [<CustomOperation("AutoCompleteCustomSource")>] member inline this.AutoCompleteCustomSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteStringCollection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteCustomSource), (fun ctx x -> ctx.Element.AutoCompleteCustomSource <- x), x)
    [<CustomOperation("AutoCompleteCustomSource")>] member inline this.AutoCompleteCustomSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteCustomSource), (fun ctx x -> ctx.Element.AutoCompleteCustomSource <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DrawMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DropDownWidth")>] member inline this.DropDownWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownWidth), (fun ctx x -> ctx.Element.DropDownWidth <- x), x)
    [<CustomOperation("DropDownWidth")>] member inline this.DropDownWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownWidth), (fun ctx x -> ctx.Element.DropDownWidth <- x), x)
    [<CustomOperation("DropDownHeight")>] member inline this.DropDownHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownHeight), (fun ctx x -> ctx.Element.DropDownHeight <- x), x)
    [<CustomOperation("DropDownHeight")>] member inline this.DropDownHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownHeight), (fun ctx x -> ctx.Element.DropDownHeight <- x), x)
    [<CustomOperation("DroppedDown")>] member inline this.DroppedDown ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DroppedDown), (fun ctx x -> ctx.Element.DroppedDown <- x), x)
    [<CustomOperation("DroppedDown")>] member inline this.DroppedDown ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DroppedDown), (fun ctx x -> ctx.Element.DroppedDown <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlatStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("IntegralHeight")>] member inline this.IntegralHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IntegralHeight), (fun ctx x -> ctx.Element.IntegralHeight <- x), x)
    [<CustomOperation("IntegralHeight")>] member inline this.IntegralHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IntegralHeight), (fun ctx x -> ctx.Element.IntegralHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("MaxDropDownItems")>] member inline this.MaxDropDownItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDropDownItems), (fun ctx x -> ctx.Element.MaxDropDownItems <- x), x)
    [<CustomOperation("MaxDropDownItems")>] member inline this.MaxDropDownItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDropDownItems), (fun ctx x -> ctx.Element.MaxDropDownItems <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MaximumSize")>] member inline this.MaximumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaximumSize), (fun ctx x -> ctx.Element.MaximumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MinimumSize")>] member inline this.MinimumSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinimumSize), (fun ctx x -> ctx.Element.MinimumSize <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("SelectedItem")>] member inline this.SelectedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedItem), (fun ctx x -> ctx.Element.SelectedItem <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("DropDownStyle")>] member inline this.DropDownStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ComboBoxStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownStyle), (fun ctx x -> ctx.Element.DropDownStyle <- x), x)
    [<CustomOperation("DropDownStyle")>] member inline this.DropDownStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownStyle), (fun ctx x -> ctx.Element.DropDownStyle <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("DrawItem")>] member inline this.DrawItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawItem), "DrawItem", fn)
    [<CustomOperation("DropDown")>] member inline this.DropDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDown), "DropDown", fn)
    [<CustomOperation("MeasureItem")>] member inline this.MeasureItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MeasureItem), "MeasureItem", fn)
    [<CustomOperation("SelectedIndexChanged")>] member inline this.SelectedIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndexChanged), "SelectedIndexChanged", fn)
    [<CustomOperation("SelectionChangeCommitted")>] member inline this.SelectionChangeCommitted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionChangeCommitted), "SelectionChangeCommitted", fn)
    [<CustomOperation("DropDownStyleChanged")>] member inline this.DropDownStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownStyleChanged), "DropDownStyleChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("TextUpdate")>] member inline this.TextUpdate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextUpdate), "TextUpdate", fn)
    [<CustomOperation("DropDownClosed")>] member inline this.DropDownClosed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownClosed), "DropDownClosed", fn)
                

type DataGridViewComboBoxEditingControlBuilder<'Element when 'Element :> System.Windows.Forms.DataGridViewComboBoxEditingControl>() =
    inherit ComboBoxBuilder<'Element>()


    [<CustomOperation("EditingControlDataGridView")>]
    member inline this.EditingControlDataGridView ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.EditingControlDataGridView <- x), creator)

    [<CustomOperation("EditingControlDataGridView")>]
    member inline this.EditingControlDataGridView ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.EditingControlDataGridView <- x), creator)
                        
    [<CustomOperation("EditingControlFormattedValue")>] member inline this.EditingControlFormattedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlFormattedValue), (fun ctx x -> ctx.Element.EditingControlFormattedValue <- x), x)
    [<CustomOperation("EditingControlFormattedValue")>] member inline this.EditingControlFormattedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlFormattedValue), (fun ctx x -> ctx.Element.EditingControlFormattedValue <- x), x)
    [<CustomOperation("EditingControlRowIndex")>] member inline this.EditingControlRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlRowIndex), (fun ctx x -> ctx.Element.EditingControlRowIndex <- x), x)
    [<CustomOperation("EditingControlRowIndex")>] member inline this.EditingControlRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlRowIndex), (fun ctx x -> ctx.Element.EditingControlRowIndex <- x), x)
    [<CustomOperation("EditingControlValueChanged")>] member inline this.EditingControlValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlValueChanged), (fun ctx x -> ctx.Element.EditingControlValueChanged <- x), x)
    [<CustomOperation("EditingControlValueChanged")>] member inline this.EditingControlValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlValueChanged), (fun ctx x -> ctx.Element.EditingControlValueChanged <- x), x)
    [<CustomOperation("EditingPanelCursorEx")>] member inline this.EditingPanelCursorEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursorEx'")>] member inline this.EditingPanelCursorEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursor")>] member inline this.EditingPanelCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursor'")>] member inline this.EditingPanelCursor' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.EditingPanelCursor), x)

                

type TextBoxBaseBuilder<'Element when 'Element :> System.Windows.Forms.TextBoxBase>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AcceptsTab")>] member inline this.AcceptsTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTab), (fun ctx x -> ctx.Element.AcceptsTab <- x), x)
    [<CustomOperation("AcceptsTab")>] member inline this.AcceptsTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTab), (fun ctx x -> ctx.Element.AcceptsTab <- x), x)
    [<CustomOperation("ShortcutsEnabled")>] member inline this.ShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShortcutsEnabled), (fun ctx x -> ctx.Element.ShortcutsEnabled <- x), x)
    [<CustomOperation("ShortcutsEnabled")>] member inline this.ShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShortcutsEnabled), (fun ctx x -> ctx.Element.ShortcutsEnabled <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("Lines")>] member inline this.Lines ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Lines), (fun ctx x -> ctx.Element.Lines <- x), x)
    [<CustomOperation("Lines")>] member inline this.Lines ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Lines), (fun ctx x -> ctx.Element.Lines <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("Modified")>] member inline this.Modified ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Modified), (fun ctx x -> ctx.Element.Modified <- x), x)
    [<CustomOperation("Modified")>] member inline this.Modified ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Modified), (fun ctx x -> ctx.Element.Modified <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("WordWrap")>] member inline this.WordWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WordWrap), (fun ctx x -> ctx.Element.WordWrap <- x), x)
    [<CustomOperation("WordWrap")>] member inline this.WordWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WordWrap), (fun ctx x -> ctx.Element.WordWrap <- x), x)

    [<CustomOperation("AcceptsTabChanged")>] member inline this.AcceptsTabChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTabChanged), "AcceptsTabChanged", fn)
    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("BorderStyleChanged")>] member inline this.BorderStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyleChanged), "BorderStyleChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("HideSelectionChanged")>] member inline this.HideSelectionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelectionChanged), "HideSelectionChanged", fn)
    [<CustomOperation("ModifiedChanged")>] member inline this.ModifiedChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ModifiedChanged), "ModifiedChanged", fn)
    [<CustomOperation("MultilineChanged")>] member inline this.MultilineChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MultilineChanged), "MultilineChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("ReadOnlyChanged")>] member inline this.ReadOnlyChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnlyChanged), "ReadOnlyChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
                

type TextBoxBuilder<'Element when 'Element :> System.Windows.Forms.TextBox>() =
    inherit TextBoxBaseBuilder<'Element>()

    [<CustomOperation("AcceptsReturn")>] member inline this.AcceptsReturn ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsReturn), (fun ctx x -> ctx.Element.AcceptsReturn <- x), x)
    [<CustomOperation("AcceptsReturn")>] member inline this.AcceptsReturn ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsReturn), (fun ctx x -> ctx.Element.AcceptsReturn <- x), x)
    [<CustomOperation("AutoCompleteMode")>] member inline this.AutoCompleteMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteMode), (fun ctx x -> ctx.Element.AutoCompleteMode <- x), x)
    [<CustomOperation("AutoCompleteMode")>] member inline this.AutoCompleteMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteMode), (fun ctx x -> ctx.Element.AutoCompleteMode <- x), x)
    [<CustomOperation("AutoCompleteSource")>] member inline this.AutoCompleteSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteSource) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteSource), (fun ctx x -> ctx.Element.AutoCompleteSource <- x), x)
    [<CustomOperation("AutoCompleteSource")>] member inline this.AutoCompleteSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteSource), (fun ctx x -> ctx.Element.AutoCompleteSource <- x), x)
    [<CustomOperation("AutoCompleteCustomSource")>] member inline this.AutoCompleteCustomSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoCompleteStringCollection) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteCustomSource), (fun ctx x -> ctx.Element.AutoCompleteCustomSource <- x), x)
    [<CustomOperation("AutoCompleteCustomSource")>] member inline this.AutoCompleteCustomSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCompleteCustomSource), (fun ctx x -> ctx.Element.AutoCompleteCustomSource <- x), x)
    [<CustomOperation("CharacterCasing")>] member inline this.CharacterCasing ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.CharacterCasing) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CharacterCasing), (fun ctx x -> ctx.Element.CharacterCasing <- x), x)
    [<CustomOperation("CharacterCasing")>] member inline this.CharacterCasing ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CharacterCasing), (fun ctx x -> ctx.Element.CharacterCasing <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("PasswordChar")>] member inline this.PasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Char) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PasswordChar), (fun ctx x -> ctx.Element.PasswordChar <- x), x)
    [<CustomOperation("PasswordChar")>] member inline this.PasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PasswordChar), (fun ctx x -> ctx.Element.PasswordChar <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ScrollBars) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.HorizontalAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("UseSystemPasswordChar")>] member inline this.UseSystemPasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseSystemPasswordChar), (fun ctx x -> ctx.Element.UseSystemPasswordChar <- x), x)
    [<CustomOperation("UseSystemPasswordChar")>] member inline this.UseSystemPasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseSystemPasswordChar), (fun ctx x -> ctx.Element.UseSystemPasswordChar <- x), x)
    #if NET6_0
    [<CustomOperation("PlaceholderText")>] member inline this.PlaceholderText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PlaceholderText), (fun ctx x -> ctx.Element.PlaceholderText <- x), x)
    [<CustomOperation("PlaceholderText")>] member inline this.PlaceholderText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PlaceholderText), (fun ctx x -> ctx.Element.PlaceholderText <- x), x)
    #endif
    [<CustomOperation("TextAlignChanged")>] member inline this.TextAlignChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlignChanged), "TextAlignChanged", fn)
                

type DataGridViewTextBoxEditingControlBuilder<'Element when 'Element :> System.Windows.Forms.DataGridViewTextBoxEditingControl>() =
    inherit TextBoxBuilder<'Element>()


    [<CustomOperation("EditingControlDataGridView")>]
    member inline this.EditingControlDataGridView ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.EditingControlDataGridView <- x), creator)

    [<CustomOperation("EditingControlDataGridView")>]
    member inline this.EditingControlDataGridView ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.EditingControlDataGridView <- x), creator)
                        
    [<CustomOperation("EditingControlFormattedValue")>] member inline this.EditingControlFormattedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlFormattedValue), (fun ctx x -> ctx.Element.EditingControlFormattedValue <- x), x)
    [<CustomOperation("EditingControlFormattedValue")>] member inline this.EditingControlFormattedValue ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlFormattedValue), (fun ctx x -> ctx.Element.EditingControlFormattedValue <- x), x)
    [<CustomOperation("EditingControlRowIndex")>] member inline this.EditingControlRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlRowIndex), (fun ctx x -> ctx.Element.EditingControlRowIndex <- x), x)
    [<CustomOperation("EditingControlRowIndex")>] member inline this.EditingControlRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlRowIndex), (fun ctx x -> ctx.Element.EditingControlRowIndex <- x), x)
    [<CustomOperation("EditingControlValueChanged")>] member inline this.EditingControlValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlValueChanged), (fun ctx x -> ctx.Element.EditingControlValueChanged <- x), x)
    [<CustomOperation("EditingControlValueChanged")>] member inline this.EditingControlValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlValueChanged), (fun ctx x -> ctx.Element.EditingControlValueChanged <- x), x)
    [<CustomOperation("EditingPanelCursorEx")>] member inline this.EditingPanelCursorEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursorEx'")>] member inline this.EditingPanelCursorEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursor")>] member inline this.EditingPanelCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.EditingPanelCursor), x)
    [<CustomOperation("EditingPanelCursor'")>] member inline this.EditingPanelCursor' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.EditingPanelCursor), x)

                

type MaskedTextBoxBuilder<'Element when 'Element :> System.Windows.Forms.MaskedTextBox>() =
    inherit TextBoxBaseBuilder<'Element>()

    [<CustomOperation("AcceptsTab")>] member inline this.AcceptsTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTab), (fun ctx x -> ctx.Element.AcceptsTab <- x), x)
    [<CustomOperation("AcceptsTab")>] member inline this.AcceptsTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTab), (fun ctx x -> ctx.Element.AcceptsTab <- x), x)
    [<CustomOperation("AllowPromptAsInput")>] member inline this.AllowPromptAsInput ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowPromptAsInput), (fun ctx x -> ctx.Element.AllowPromptAsInput <- x), x)
    [<CustomOperation("AllowPromptAsInput")>] member inline this.AllowPromptAsInput ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowPromptAsInput), (fun ctx x -> ctx.Element.AllowPromptAsInput <- x), x)
    [<CustomOperation("AsciiOnly")>] member inline this.AsciiOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AsciiOnly), (fun ctx x -> ctx.Element.AsciiOnly <- x), x)
    [<CustomOperation("AsciiOnly")>] member inline this.AsciiOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AsciiOnly), (fun ctx x -> ctx.Element.AsciiOnly <- x), x)
    [<CustomOperation("BeepOnError")>] member inline this.BeepOnError ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BeepOnError), (fun ctx x -> ctx.Element.BeepOnError <- x), x)
    [<CustomOperation("BeepOnError")>] member inline this.BeepOnError ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BeepOnError), (fun ctx x -> ctx.Element.BeepOnError <- x), x)
    [<CustomOperation("Culture")>] member inline this.Culture ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Globalization.CultureInfo) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Culture), (fun ctx x -> ctx.Element.Culture <- x), x)
    [<CustomOperation("Culture")>] member inline this.Culture ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Culture), (fun ctx x -> ctx.Element.Culture <- x), x)
    [<CustomOperation("CutCopyMaskFormat")>] member inline this.CutCopyMaskFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.MaskFormat) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CutCopyMaskFormat), (fun ctx x -> ctx.Element.CutCopyMaskFormat <- x), x)
    [<CustomOperation("CutCopyMaskFormat")>] member inline this.CutCopyMaskFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CutCopyMaskFormat), (fun ctx x -> ctx.Element.CutCopyMaskFormat <- x), x)
    [<CustomOperation("FormatProvider")>] member inline this.FormatProvider ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.IFormatProvider) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatProvider), (fun ctx x -> ctx.Element.FormatProvider <- x), x)
    [<CustomOperation("FormatProvider")>] member inline this.FormatProvider ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FormatProvider), (fun ctx x -> ctx.Element.FormatProvider <- x), x)
    [<CustomOperation("HidePromptOnLeave")>] member inline this.HidePromptOnLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HidePromptOnLeave), (fun ctx x -> ctx.Element.HidePromptOnLeave <- x), x)
    [<CustomOperation("HidePromptOnLeave")>] member inline this.HidePromptOnLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HidePromptOnLeave), (fun ctx x -> ctx.Element.HidePromptOnLeave <- x), x)
    [<CustomOperation("InsertKeyMode")>] member inline this.InsertKeyMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.InsertKeyMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.InsertKeyMode), (fun ctx x -> ctx.Element.InsertKeyMode <- x), x)
    [<CustomOperation("InsertKeyMode")>] member inline this.InsertKeyMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.InsertKeyMode), (fun ctx x -> ctx.Element.InsertKeyMode <- x), x)
    [<CustomOperation("Lines")>] member inline this.Lines ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Lines), (fun ctx x -> ctx.Element.Lines <- x), x)
    [<CustomOperation("Lines")>] member inline this.Lines ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Lines), (fun ctx x -> ctx.Element.Lines <- x), x)
    [<CustomOperation("Mask")>] member inline this.Mask ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Mask), (fun ctx x -> ctx.Element.Mask <- x), x)
    [<CustomOperation("Mask")>] member inline this.Mask ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Mask), (fun ctx x -> ctx.Element.Mask <- x), x)
    [<CustomOperation("MaskedTextProviderEx")>] member inline this.MaskedTextProviderEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.MaskedTextProvider), x)
    [<CustomOperation("MaskedTextProviderEx'")>] member inline this.MaskedTextProviderEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.MaskedTextProvider), x)
    [<CustomOperation("MaskedTextProvider")>] member inline this.MaskedTextProvider ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.MaskedTextProvider), x)
    [<CustomOperation("MaskedTextProvider'")>] member inline this.MaskedTextProvider' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.MaskedTextProvider), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("PasswordChar")>] member inline this.PasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Char) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PasswordChar), (fun ctx x -> ctx.Element.PasswordChar <- x), x)
    [<CustomOperation("PasswordChar")>] member inline this.PasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PasswordChar), (fun ctx x -> ctx.Element.PasswordChar <- x), x)
    [<CustomOperation("PromptChar")>] member inline this.PromptChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Char) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PromptChar), (fun ctx x -> ctx.Element.PromptChar <- x), x)
    [<CustomOperation("PromptChar")>] member inline this.PromptChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PromptChar), (fun ctx x -> ctx.Element.PromptChar <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("RejectInputOnFirstFailure")>] member inline this.RejectInputOnFirstFailure ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RejectInputOnFirstFailure), (fun ctx x -> ctx.Element.RejectInputOnFirstFailure <- x), x)
    [<CustomOperation("RejectInputOnFirstFailure")>] member inline this.RejectInputOnFirstFailure ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RejectInputOnFirstFailure), (fun ctx x -> ctx.Element.RejectInputOnFirstFailure <- x), x)
    [<CustomOperation("ResetOnPrompt")>] member inline this.ResetOnPrompt ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ResetOnPrompt), (fun ctx x -> ctx.Element.ResetOnPrompt <- x), x)
    [<CustomOperation("ResetOnPrompt")>] member inline this.ResetOnPrompt ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ResetOnPrompt), (fun ctx x -> ctx.Element.ResetOnPrompt <- x), x)
    [<CustomOperation("ResetOnSpace")>] member inline this.ResetOnSpace ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ResetOnSpace), (fun ctx x -> ctx.Element.ResetOnSpace <- x), x)
    [<CustomOperation("ResetOnSpace")>] member inline this.ResetOnSpace ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ResetOnSpace), (fun ctx x -> ctx.Element.ResetOnSpace <- x), x)
    [<CustomOperation("SkipLiterals")>] member inline this.SkipLiterals ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SkipLiterals), (fun ctx x -> ctx.Element.SkipLiterals <- x), x)
    [<CustomOperation("SkipLiterals")>] member inline this.SkipLiterals ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SkipLiterals), (fun ctx x -> ctx.Element.SkipLiterals <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.HorizontalAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextMaskFormat")>] member inline this.TextMaskFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.MaskFormat) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextMaskFormat), (fun ctx x -> ctx.Element.TextMaskFormat <- x), x)
    [<CustomOperation("TextMaskFormat")>] member inline this.TextMaskFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextMaskFormat), (fun ctx x -> ctx.Element.TextMaskFormat <- x), x)
    [<CustomOperation("UseSystemPasswordChar")>] member inline this.UseSystemPasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseSystemPasswordChar), (fun ctx x -> ctx.Element.UseSystemPasswordChar <- x), x)
    [<CustomOperation("UseSystemPasswordChar")>] member inline this.UseSystemPasswordChar ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseSystemPasswordChar), (fun ctx x -> ctx.Element.UseSystemPasswordChar <- x), x)
    [<CustomOperation("ValidatingType")>] member inline this.ValidatingType ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Type) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ValidatingType), (fun ctx x -> ctx.Element.ValidatingType <- x), x)
    [<CustomOperation("ValidatingType")>] member inline this.ValidatingType ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ValidatingType), (fun ctx x -> ctx.Element.ValidatingType <- x), x)
    [<CustomOperation("WordWrap")>] member inline this.WordWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WordWrap), (fun ctx x -> ctx.Element.WordWrap <- x), x)
    [<CustomOperation("WordWrap")>] member inline this.WordWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WordWrap), (fun ctx x -> ctx.Element.WordWrap <- x), x)

    [<CustomOperation("AcceptsTabChanged")>] member inline this.AcceptsTabChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AcceptsTabChanged), "AcceptsTabChanged", fn)
    [<CustomOperation("IsOverwriteModeChanged")>] member inline this.IsOverwriteModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.IsOverwriteModeChanged), "IsOverwriteModeChanged", fn)
    [<CustomOperation("MaskChanged")>] member inline this.MaskChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MaskChanged), "MaskChanged", fn)
    [<CustomOperation("MaskInputRejected")>] member inline this.MaskInputRejected ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MaskInputRejected), "MaskInputRejected", fn)
    [<CustomOperation("MultilineChanged")>] member inline this.MultilineChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MultilineChanged), "MultilineChanged", fn)
    [<CustomOperation("TextAlignChanged")>] member inline this.TextAlignChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlignChanged), "TextAlignChanged", fn)
    [<CustomOperation("TypeValidationCompleted")>] member inline this.TypeValidationCompleted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TypeValidationCompleted), "TypeValidationCompleted", fn)
                

type RichTextBoxBuilder<'Element when 'Element :> System.Windows.Forms.RichTextBox>() =
    inherit TextBoxBaseBuilder<'Element>()

    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoWordSelection")>] member inline this.AutoWordSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoWordSelection), (fun ctx x -> ctx.Element.AutoWordSelection <- x), x)
    [<CustomOperation("AutoWordSelection")>] member inline this.AutoWordSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoWordSelection), (fun ctx x -> ctx.Element.AutoWordSelection <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BulletIndent")>] member inline this.BulletIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BulletIndent), (fun ctx x -> ctx.Element.BulletIndent <- x), x)
    [<CustomOperation("BulletIndent")>] member inline this.BulletIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BulletIndent), (fun ctx x -> ctx.Element.BulletIndent <- x), x)
    [<CustomOperation("DetectUrls")>] member inline this.DetectUrls ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DetectUrls), (fun ctx x -> ctx.Element.DetectUrls <- x), x)
    [<CustomOperation("DetectUrls")>] member inline this.DetectUrls ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DetectUrls), (fun ctx x -> ctx.Element.DetectUrls <- x), x)
    [<CustomOperation("EnableAutoDragDrop")>] member inline this.EnableAutoDragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EnableAutoDragDrop), (fun ctx x -> ctx.Element.EnableAutoDragDrop <- x), x)
    [<CustomOperation("EnableAutoDragDrop")>] member inline this.EnableAutoDragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EnableAutoDragDrop), (fun ctx x -> ctx.Element.EnableAutoDragDrop <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("LanguageOption")>] member inline this.LanguageOption ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RichTextBoxLanguageOptions) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LanguageOption), (fun ctx x -> ctx.Element.LanguageOption <- x), x)
    [<CustomOperation("LanguageOption")>] member inline this.LanguageOption ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LanguageOption), (fun ctx x -> ctx.Element.LanguageOption <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("MaxLength")>] member inline this.MaxLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxLength), (fun ctx x -> ctx.Element.MaxLength <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("RedoActionNameEx")>] member inline this.RedoActionNameEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.RedoActionName), x)
    [<CustomOperation("RedoActionNameEx'")>] member inline this.RedoActionNameEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.RedoActionName), x)
    [<CustomOperation("RedoActionName")>] member inline this.RedoActionName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.RedoActionName), x)
    [<CustomOperation("RedoActionName'")>] member inline this.RedoActionName' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.RedoActionName), x)
    [<CustomOperation("RichTextShortcutsEnabled")>] member inline this.RichTextShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RichTextShortcutsEnabled), (fun ctx x -> ctx.Element.RichTextShortcutsEnabled <- x), x)
    [<CustomOperation("RichTextShortcutsEnabled")>] member inline this.RichTextShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RichTextShortcutsEnabled), (fun ctx x -> ctx.Element.RichTextShortcutsEnabled <- x), x)
    [<CustomOperation("RightMargin")>] member inline this.RightMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightMargin), (fun ctx x -> ctx.Element.RightMargin <- x), x)
    [<CustomOperation("RightMargin")>] member inline this.RightMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightMargin), (fun ctx x -> ctx.Element.RightMargin <- x), x)
    [<CustomOperation("Rtf")>] member inline this.Rtf ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Rtf), (fun ctx x -> ctx.Element.Rtf <- x), x)
    [<CustomOperation("Rtf")>] member inline this.Rtf ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Rtf), (fun ctx x -> ctx.Element.Rtf <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RichTextBoxScrollBars) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("SelectionAlignment")>] member inline this.SelectionAlignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.HorizontalAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionAlignment), (fun ctx x -> ctx.Element.SelectionAlignment <- x), x)
    [<CustomOperation("SelectionAlignment")>] member inline this.SelectionAlignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionAlignment), (fun ctx x -> ctx.Element.SelectionAlignment <- x), x)
    [<CustomOperation("SelectionBullet")>] member inline this.SelectionBullet ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionBullet), (fun ctx x -> ctx.Element.SelectionBullet <- x), x)
    [<CustomOperation("SelectionBullet")>] member inline this.SelectionBullet ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionBullet), (fun ctx x -> ctx.Element.SelectionBullet <- x), x)
    [<CustomOperation("SelectionCharOffset")>] member inline this.SelectionCharOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionCharOffset), (fun ctx x -> ctx.Element.SelectionCharOffset <- x), x)
    [<CustomOperation("SelectionCharOffset")>] member inline this.SelectionCharOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionCharOffset), (fun ctx x -> ctx.Element.SelectionCharOffset <- x), x)
    [<CustomOperation("SelectionColor")>] member inline this.SelectionColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionColor), (fun ctx x -> ctx.Element.SelectionColor <- x), x)
    [<CustomOperation("SelectionColor")>] member inline this.SelectionColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionColor), (fun ctx x -> ctx.Element.SelectionColor <- x), x)
    [<CustomOperation("SelectionBackColor")>] member inline this.SelectionBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionBackColor), (fun ctx x -> ctx.Element.SelectionBackColor <- x), x)
    [<CustomOperation("SelectionBackColor")>] member inline this.SelectionBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionBackColor), (fun ctx x -> ctx.Element.SelectionBackColor <- x), x)
    [<CustomOperation("SelectionFont")>] member inline this.SelectionFont ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionFont), (fun ctx x -> ctx.Element.SelectionFont <- x), x)
    [<CustomOperation("SelectionFont")>] member inline this.SelectionFont ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionFont), (fun ctx x -> ctx.Element.SelectionFont <- x), x)
    [<CustomOperation("SelectionHangingIndent")>] member inline this.SelectionHangingIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionHangingIndent), (fun ctx x -> ctx.Element.SelectionHangingIndent <- x), x)
    [<CustomOperation("SelectionHangingIndent")>] member inline this.SelectionHangingIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionHangingIndent), (fun ctx x -> ctx.Element.SelectionHangingIndent <- x), x)
    [<CustomOperation("SelectionIndent")>] member inline this.SelectionIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionIndent), (fun ctx x -> ctx.Element.SelectionIndent <- x), x)
    [<CustomOperation("SelectionIndent")>] member inline this.SelectionIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionIndent), (fun ctx x -> ctx.Element.SelectionIndent <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionLength")>] member inline this.SelectionLength ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionLength), (fun ctx x -> ctx.Element.SelectionLength <- x), x)
    [<CustomOperation("SelectionProtected")>] member inline this.SelectionProtected ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionProtected), (fun ctx x -> ctx.Element.SelectionProtected <- x), x)
    [<CustomOperation("SelectionProtected")>] member inline this.SelectionProtected ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionProtected), (fun ctx x -> ctx.Element.SelectionProtected <- x), x)
    [<CustomOperation("SelectedRtf")>] member inline this.SelectedRtf ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedRtf), (fun ctx x -> ctx.Element.SelectedRtf <- x), x)
    [<CustomOperation("SelectedRtf")>] member inline this.SelectedRtf ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedRtf), (fun ctx x -> ctx.Element.SelectedRtf <- x), x)
    [<CustomOperation("SelectionRightIndent")>] member inline this.SelectionRightIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionRightIndent), (fun ctx x -> ctx.Element.SelectionRightIndent <- x), x)
    [<CustomOperation("SelectionRightIndent")>] member inline this.SelectionRightIndent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionRightIndent), (fun ctx x -> ctx.Element.SelectionRightIndent <- x), x)
    [<CustomOperation("SelectionTabs")>] member inline this.SelectionTabs ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionTabs), (fun ctx x -> ctx.Element.SelectionTabs <- x), x)
    [<CustomOperation("SelectionTabs")>] member inline this.SelectionTabs ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionTabs), (fun ctx x -> ctx.Element.SelectionTabs <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("SelectedText")>] member inline this.SelectedText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedText), (fun ctx x -> ctx.Element.SelectedText <- x), x)
    [<CustomOperation("ShowSelectionMargin")>] member inline this.ShowSelectionMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowSelectionMargin), (fun ctx x -> ctx.Element.ShowSelectionMargin <- x), x)
    [<CustomOperation("ShowSelectionMargin")>] member inline this.ShowSelectionMargin ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowSelectionMargin), (fun ctx x -> ctx.Element.ShowSelectionMargin <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("UndoActionNameEx")>] member inline this.UndoActionNameEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.UndoActionName), x)
    [<CustomOperation("UndoActionNameEx'")>] member inline this.UndoActionNameEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.UndoActionName), x)
    [<CustomOperation("UndoActionName")>] member inline this.UndoActionName ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.UndoActionName), x)
    [<CustomOperation("UndoActionName'")>] member inline this.UndoActionName' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.UndoActionName), x)
    [<CustomOperation("ZoomFactor")>] member inline this.ZoomFactor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Single) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ZoomFactor), (fun ctx x -> ctx.Element.ZoomFactor <- x), x)
    [<CustomOperation("ZoomFactor")>] member inline this.ZoomFactor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ZoomFactor), (fun ctx x -> ctx.Element.ZoomFactor <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ContentsResized")>] member inline this.ContentsResized ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ContentsResized), "ContentsResized", fn)
    [<CustomOperation("DragDrop")>] member inline this.DragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragDrop), "DragDrop", fn)
    [<CustomOperation("DragEnter")>] member inline this.DragEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragEnter), "DragEnter", fn)
    [<CustomOperation("DragLeave")>] member inline this.DragLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragLeave), "DragLeave", fn)
    [<CustomOperation("DragOver")>] member inline this.DragOver ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragOver), "DragOver", fn)
    [<CustomOperation("GiveFeedback")>] member inline this.GiveFeedback ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GiveFeedback), "GiveFeedback", fn)
    [<CustomOperation("QueryContinueDrag")>] member inline this.QueryContinueDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryContinueDrag), "QueryContinueDrag", fn)
    [<CustomOperation("HScroll")>] member inline this.HScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HScroll), "HScroll", fn)
    [<CustomOperation("LinkClicked")>] member inline this.LinkClicked ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkClicked), "LinkClicked", fn)
    [<CustomOperation("ImeChange")>] member inline this.ImeChange ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeChange), "ImeChange", fn)
    [<CustomOperation("Protected")>] member inline this.Protected ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Protected), "Protected", fn)
    [<CustomOperation("SelectionChanged")>] member inline this.SelectionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionChanged), "SelectionChanged", fn)
    [<CustomOperation("VScroll")>] member inline this.VScroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VScroll), "VScroll", fn)
                

type ButtonBaseBuilder<'Element when 'Element :> System.Windows.Forms.ButtonBase>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AutoEllipsis")>] member inline this.AutoEllipsis ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoEllipsis), (fun ctx x -> ctx.Element.AutoEllipsis <- x), x)
    [<CustomOperation("AutoEllipsis")>] member inline this.AutoEllipsis ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoEllipsis), (fun ctx x -> ctx.Element.AutoEllipsis <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlatStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatAppearanceEx")>] member inline this.FlatAppearanceEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.FlatAppearance), x)
    [<CustomOperation("FlatAppearanceEx'")>] member inline this.FlatAppearanceEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.FlatAppearance), x)
    [<CustomOperation("FlatAppearance")>] member inline this.FlatAppearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.FlatAppearance), x)
    [<CustomOperation("FlatAppearance'")>] member inline this.FlatAppearance' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.FlatAppearance), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("ImageAlign")>] member inline this.ImageAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageAlign), (fun ctx x -> ctx.Element.ImageAlign <- x), x)
    [<CustomOperation("ImageAlign")>] member inline this.ImageAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageAlign), (fun ctx x -> ctx.Element.ImageAlign <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextImageRelation")>] member inline this.TextImageRelation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TextImageRelation) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextImageRelation), (fun ctx x -> ctx.Element.TextImageRelation <- x), x)
    [<CustomOperation("TextImageRelation")>] member inline this.TextImageRelation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextImageRelation), (fun ctx x -> ctx.Element.TextImageRelation <- x), x)
    [<CustomOperation("UseMnemonic")>] member inline this.UseMnemonic ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseMnemonic), (fun ctx x -> ctx.Element.UseMnemonic <- x), x)
    [<CustomOperation("UseMnemonic")>] member inline this.UseMnemonic ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseMnemonic), (fun ctx x -> ctx.Element.UseMnemonic <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseVisualStyleBackColor")>] member inline this.UseVisualStyleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseVisualStyleBackColor), (fun ctx x -> ctx.Element.UseVisualStyleBackColor <- x), x)
    [<CustomOperation("UseVisualStyleBackColor")>] member inline this.UseVisualStyleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseVisualStyleBackColor), (fun ctx x -> ctx.Element.UseVisualStyleBackColor <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
                

type ButtonBuilder<'Element when 'Element :> System.Windows.Forms.Button>() =
    inherit ButtonBaseBuilder<'Element>()

    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("DialogResult")>] member inline this.DialogResult ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DialogResult) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DialogResult), (fun ctx x -> ctx.Element.DialogResult <- x), x)
    [<CustomOperation("DialogResult")>] member inline this.DialogResult ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DialogResult), (fun ctx x -> ctx.Element.DialogResult <- x), x)

    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
                

type CheckBoxBuilder<'Element when 'Element :> System.Windows.Forms.CheckBox>() =
    inherit ButtonBaseBuilder<'Element>()

    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Appearance) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("AutoCheck")>] member inline this.AutoCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCheck), (fun ctx x -> ctx.Element.AutoCheck <- x), x)
    [<CustomOperation("AutoCheck")>] member inline this.AutoCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCheck), (fun ctx x -> ctx.Element.AutoCheck <- x), x)
    [<CustomOperation("CheckAlign")>] member inline this.CheckAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckAlign), (fun ctx x -> ctx.Element.CheckAlign <- x), x)
    [<CustomOperation("CheckAlign")>] member inline this.CheckAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckAlign), (fun ctx x -> ctx.Element.CheckAlign <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("CheckState")>] member inline this.CheckState ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.CheckState) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckState), (fun ctx x -> ctx.Element.CheckState <- x), x)
    [<CustomOperation("CheckState")>] member inline this.CheckState ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckState), (fun ctx x -> ctx.Element.CheckState <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("ThreeState")>] member inline this.ThreeState ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ThreeState), (fun ctx x -> ctx.Element.ThreeState <- x), x)
    [<CustomOperation("ThreeState")>] member inline this.ThreeState ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ThreeState), (fun ctx x -> ctx.Element.ThreeState <- x), x)

    [<CustomOperation("AppearanceChanged")>] member inline this.AppearanceChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AppearanceChanged), "AppearanceChanged", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("CheckedChanged")>] member inline this.CheckedChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckedChanged), "CheckedChanged", fn)
    [<CustomOperation("CheckStateChanged")>] member inline this.CheckStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckStateChanged), "CheckStateChanged", fn)
                

type RadioButtonBuilder<'Element when 'Element :> System.Windows.Forms.RadioButton>() =
    inherit ButtonBaseBuilder<'Element>()

    [<CustomOperation("AutoCheck")>] member inline this.AutoCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCheck), (fun ctx x -> ctx.Element.AutoCheck <- x), x)
    [<CustomOperation("AutoCheck")>] member inline this.AutoCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoCheck), (fun ctx x -> ctx.Element.AutoCheck <- x), x)
    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Appearance) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("CheckAlign")>] member inline this.CheckAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckAlign), (fun ctx x -> ctx.Element.CheckAlign <- x), x)
    [<CustomOperation("CheckAlign")>] member inline this.CheckAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckAlign), (fun ctx x -> ctx.Element.CheckAlign <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)

    [<CustomOperation("AppearanceChanged")>] member inline this.AppearanceChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AppearanceChanged), "AppearanceChanged", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("CheckedChanged")>] member inline this.CheckedChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckedChanged), "CheckedChanged", fn)
                

type ScrollBarBuilder<'Element when 'Element :> System.Windows.Forms.ScrollBar>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("LargeChange")>] member inline this.LargeChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LargeChange), (fun ctx x -> ctx.Element.LargeChange <- x), x)
    [<CustomOperation("LargeChange")>] member inline this.LargeChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LargeChange), (fun ctx x -> ctx.Element.LargeChange <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("SmallChange")>] member inline this.SmallChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SmallChange), (fun ctx x -> ctx.Element.SmallChange <- x), x)
    [<CustomOperation("SmallChange")>] member inline this.SmallChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SmallChange), (fun ctx x -> ctx.Element.SmallChange <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)

    #if NET6_0
    [<CustomOperation("ScaleScrollBarForDpiChange")>] member inline this.ScaleScrollBarForDpiChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScaleScrollBarForDpiChange), (fun ctx x -> ctx.Element.ScaleScrollBarForDpiChange <- x), x)
    [<CustomOperation("ScaleScrollBarForDpiChange")>] member inline this.ScaleScrollBarForDpiChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScaleScrollBarForDpiChange), (fun ctx x -> ctx.Element.ScaleScrollBarForDpiChange <- x), x)
    #endif

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("Scroll")>] member inline this.Scroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Scroll), "Scroll", fn)
    [<CustomOperation("ValueChanged")>] member inline this.ValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueChanged), "ValueChanged", fn)
                

type HScrollBarBuilder<'Element when 'Element :> System.Windows.Forms.HScrollBar>() =
    inherit ScrollBarBuilder<'Element>()


                

type VScrollBarBuilder<'Element when 'Element :> System.Windows.Forms.VScrollBar>() =
    inherit ScrollBarBuilder<'Element>()

    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)

    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
                

type LabelBuilder<'Element when 'Element :> System.Windows.Forms.Label>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoEllipsis")>] member inline this.AutoEllipsis ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoEllipsis), (fun ctx x -> ctx.Element.AutoEllipsis <- x), x)
    [<CustomOperation("AutoEllipsis")>] member inline this.AutoEllipsis ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoEllipsis), (fun ctx x -> ctx.Element.AutoEllipsis <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlatStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageAlign")>] member inline this.ImageAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageAlign), (fun ctx x -> ctx.Element.ImageAlign <- x), x)
    [<CustomOperation("ImageAlign")>] member inline this.ImageAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageAlign), (fun ctx x -> ctx.Element.ImageAlign <- x), x)

    #if NET6_0
    [<CustomOperation("LiveSetting")>] member inline this.LiveSetting ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Automation.AutomationLiveSetting) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LiveSetting), (fun ctx x -> ctx.Element.LiveSetting <- x), x)
    [<CustomOperation("LiveSetting")>] member inline this.LiveSetting ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LiveSetting), (fun ctx x -> ctx.Element.LiveSetting <- x), x)
    #endif

    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.ContentAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("TextAlign")>] member inline this.TextAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlign), (fun ctx x -> ctx.Element.TextAlign <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseMnemonic")>] member inline this.UseMnemonic ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseMnemonic), (fun ctx x -> ctx.Element.UseMnemonic <- x), x)
    [<CustomOperation("UseMnemonic")>] member inline this.UseMnemonic ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseMnemonic), (fun ctx x -> ctx.Element.UseMnemonic <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextAlignChanged")>] member inline this.TextAlignChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextAlignChanged), "TextAlignChanged", fn)
                

type LinkLabelBuilder<'Element when 'Element :> System.Windows.Forms.LinkLabel>() =
    inherit LabelBuilder<'Element>()

    [<CustomOperation("ActiveLinkColor")>] member inline this.ActiveLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ActiveLinkColor), (fun ctx x -> ctx.Element.ActiveLinkColor <- x), x)
    [<CustomOperation("ActiveLinkColor")>] member inline this.ActiveLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ActiveLinkColor), (fun ctx x -> ctx.Element.ActiveLinkColor <- x), x)
    [<CustomOperation("DisabledLinkColor")>] member inline this.DisabledLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DisabledLinkColor), (fun ctx x -> ctx.Element.DisabledLinkColor <- x), x)
    [<CustomOperation("DisabledLinkColor")>] member inline this.DisabledLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DisabledLinkColor), (fun ctx x -> ctx.Element.DisabledLinkColor <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlatStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("LinkArea")>] member inline this.LinkArea ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.LinkArea) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkArea), (fun ctx x -> ctx.Element.LinkArea <- x), x)
    [<CustomOperation("LinkArea")>] member inline this.LinkArea ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LinkArea), (fun ctx x -> ctx.Element.LinkArea <- x), x)
    [<CustomOperation("LinkBehavior")>] member inline this.LinkBehavior ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.LinkBehavior) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkBehavior), (fun ctx x -> ctx.Element.LinkBehavior <- x), x)
    [<CustomOperation("LinkBehavior")>] member inline this.LinkBehavior ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LinkBehavior), (fun ctx x -> ctx.Element.LinkBehavior <- x), x)
    [<CustomOperation("LinkColor")>] member inline this.LinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkColor), (fun ctx x -> ctx.Element.LinkColor <- x), x)
    [<CustomOperation("LinkColor")>] member inline this.LinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LinkColor), (fun ctx x -> ctx.Element.LinkColor <- x), x)
    [<CustomOperation("LinksEx")>] member inline this.LinksEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Links), x)
    [<CustomOperation("LinksEx'")>] member inline this.LinksEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Links), x)
    [<CustomOperation("Links")>] member inline this.Links ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Links), x)
    [<CustomOperation("Links'")>] member inline this.Links' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Links), x)
    [<CustomOperation("LinkVisited")>] member inline this.LinkVisited ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkVisited), (fun ctx x -> ctx.Element.LinkVisited <- x), x)
    [<CustomOperation("LinkVisited")>] member inline this.LinkVisited ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LinkVisited), (fun ctx x -> ctx.Element.LinkVisited <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("VisitedLinkColor")>] member inline this.VisitedLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.VisitedLinkColor), (fun ctx x -> ctx.Element.VisitedLinkColor <- x), x)
    [<CustomOperation("VisitedLinkColor")>] member inline this.VisitedLinkColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.VisitedLinkColor), (fun ctx x -> ctx.Element.VisitedLinkColor <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)

    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("LinkClicked")>] member inline this.LinkClicked ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LinkClicked), "LinkClicked", fn)
                

type WebBrowserBaseBuilder<'Element when 'Element :> System.Windows.Forms.WebBrowserBase>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("ActiveXInstanceEx")>] member inline this.ActiveXInstanceEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.ActiveXInstance), x)
    [<CustomOperation("ActiveXInstanceEx'")>] member inline this.ActiveXInstanceEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.ActiveXInstance), x)
    [<CustomOperation("ActiveXInstance")>] member inline this.ActiveXInstance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.ActiveXInstance), x)
    [<CustomOperation("ActiveXInstance'")>] member inline this.ActiveXInstance' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.ActiveXInstance), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.ComponentModel.ISite) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)
    [<CustomOperation("UseWaitCursor")>] member inline this.UseWaitCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseWaitCursor), (fun ctx x -> ctx.Element.UseWaitCursor <- x), x)

    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
    [<CustomOperation("MouseCaptureChanged")>] member inline this.MouseCaptureChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseCaptureChanged), "MouseCaptureChanged", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BindingContextChanged")>] member inline this.BindingContextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContextChanged), "BindingContextChanged", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("EnabledChanged")>] member inline this.EnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EnabledChanged), "EnabledChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("DragDrop")>] member inline this.DragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragDrop), "DragDrop", fn)
    [<CustomOperation("DragEnter")>] member inline this.DragEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragEnter), "DragEnter", fn)
    [<CustomOperation("DragOver")>] member inline this.DragOver ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragOver), "DragOver", fn)
    [<CustomOperation("DragLeave")>] member inline this.DragLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragLeave), "DragLeave", fn)
    [<CustomOperation("GiveFeedback")>] member inline this.GiveFeedback ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GiveFeedback), "GiveFeedback", fn)
    [<CustomOperation("HelpRequested")>] member inline this.HelpRequested ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpRequested), "HelpRequested", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("QueryContinueDrag")>] member inline this.QueryContinueDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryContinueDrag), "QueryContinueDrag", fn)
    [<CustomOperation("QueryAccessibilityHelp")>] member inline this.QueryAccessibilityHelp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryAccessibilityHelp), "QueryAccessibilityHelp", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("Layout")>] member inline this.Layout ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Layout), "Layout", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
    [<CustomOperation("MouseHover")>] member inline this.MouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseHover), "MouseHover", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseWheel")>] member inline this.MouseWheel ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseWheel), "MouseWheel", fn)
    [<CustomOperation("ChangeUICues")>] member inline this.ChangeUICues ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ChangeUICues), "ChangeUICues", fn)
    [<CustomOperation("StyleChanged")>] member inline this.StyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StyleChanged), "StyleChanged", fn)
                

type WebBrowserBuilder<'Element when 'Element :> System.Windows.Forms.WebBrowser>() =
    inherit WebBrowserBaseBuilder<'Element>()

    [<CustomOperation("AllowNavigation")>] member inline this.AllowNavigation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowNavigation), (fun ctx x -> ctx.Element.AllowNavigation <- x), x)
    [<CustomOperation("AllowNavigation")>] member inline this.AllowNavigation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowNavigation), (fun ctx x -> ctx.Element.AllowNavigation <- x), x)
    [<CustomOperation("AllowWebBrowserDrop")>] member inline this.AllowWebBrowserDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowWebBrowserDrop), (fun ctx x -> ctx.Element.AllowWebBrowserDrop <- x), x)
    [<CustomOperation("AllowWebBrowserDrop")>] member inline this.AllowWebBrowserDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowWebBrowserDrop), (fun ctx x -> ctx.Element.AllowWebBrowserDrop <- x), x)
    [<CustomOperation("ScriptErrorsSuppressed")>] member inline this.ScriptErrorsSuppressed ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScriptErrorsSuppressed), (fun ctx x -> ctx.Element.ScriptErrorsSuppressed <- x), x)
    [<CustomOperation("ScriptErrorsSuppressed")>] member inline this.ScriptErrorsSuppressed ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScriptErrorsSuppressed), (fun ctx x -> ctx.Element.ScriptErrorsSuppressed <- x), x)
    [<CustomOperation("WebBrowserShortcutsEnabled")>] member inline this.WebBrowserShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WebBrowserShortcutsEnabled), (fun ctx x -> ctx.Element.WebBrowserShortcutsEnabled <- x), x)
    [<CustomOperation("WebBrowserShortcutsEnabled")>] member inline this.WebBrowserShortcutsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WebBrowserShortcutsEnabled), (fun ctx x -> ctx.Element.WebBrowserShortcutsEnabled <- x), x)
    [<CustomOperation("DocumentEx")>] member inline this.DocumentEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Document), x)
    [<CustomOperation("DocumentEx'")>] member inline this.DocumentEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Document), x)
    [<CustomOperation("Document")>] member inline this.Document ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Document), x)
    [<CustomOperation("Document'")>] member inline this.Document' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Document), x)
    [<CustomOperation("DocumentStream")>] member inline this.DocumentStream ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.IO.Stream) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentStream), (fun ctx x -> ctx.Element.DocumentStream <- x), x)
    [<CustomOperation("DocumentStream")>] member inline this.DocumentStream ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentStream), (fun ctx x -> ctx.Element.DocumentStream <- x), x)
    [<CustomOperation("DocumentText")>] member inline this.DocumentText ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentText), (fun ctx x -> ctx.Element.DocumentText <- x), x)
    [<CustomOperation("DocumentText")>] member inline this.DocumentText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentText), (fun ctx x -> ctx.Element.DocumentText <- x), x)
    [<CustomOperation("DocumentTitleEx")>] member inline this.DocumentTitleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DocumentTitle), x)
    [<CustomOperation("DocumentTitleEx'")>] member inline this.DocumentTitleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DocumentTitle), x)
    [<CustomOperation("DocumentTitle")>] member inline this.DocumentTitle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DocumentTitle), x)
    [<CustomOperation("DocumentTitle'")>] member inline this.DocumentTitle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DocumentTitle), x)
    [<CustomOperation("DocumentTypeEx")>] member inline this.DocumentTypeEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DocumentType), x)
    [<CustomOperation("DocumentTypeEx'")>] member inline this.DocumentTypeEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DocumentType), x)
    [<CustomOperation("DocumentType")>] member inline this.DocumentType ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DocumentType), x)
    [<CustomOperation("DocumentType'")>] member inline this.DocumentType' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DocumentType), x)
    [<CustomOperation("IsWebBrowserContextMenuEnabled")>] member inline this.IsWebBrowserContextMenuEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.IsWebBrowserContextMenuEnabled), (fun ctx x -> ctx.Element.IsWebBrowserContextMenuEnabled <- x), x)
    [<CustomOperation("IsWebBrowserContextMenuEnabled")>] member inline this.IsWebBrowserContextMenuEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.IsWebBrowserContextMenuEnabled), (fun ctx x -> ctx.Element.IsWebBrowserContextMenuEnabled <- x), x)
    [<CustomOperation("ObjectForScripting")>] member inline this.ObjectForScripting ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ObjectForScripting), (fun ctx x -> ctx.Element.ObjectForScripting <- x), x)
    [<CustomOperation("ObjectForScripting")>] member inline this.ObjectForScripting ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ObjectForScripting), (fun ctx x -> ctx.Element.ObjectForScripting <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("StatusTextEx")>] member inline this.StatusTextEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.StatusText), x)
    [<CustomOperation("StatusTextEx'")>] member inline this.StatusTextEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.StatusText), x)
    [<CustomOperation("StatusText")>] member inline this.StatusText ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.StatusText), x)
    [<CustomOperation("StatusText'")>] member inline this.StatusText' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.StatusText), x)
    [<CustomOperation("Url")>] member inline this.Url ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Uri) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Url), (fun ctx x -> ctx.Element.Url <- x), x)
    [<CustomOperation("Url")>] member inline this.Url ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Url), (fun ctx x -> ctx.Element.Url <- x), x)
    [<CustomOperation("VersionEx")>] member inline this.VersionEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Version), x)
    [<CustomOperation("VersionEx'")>] member inline this.VersionEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Version), x)
    [<CustomOperation("Version")>] member inline this.Version ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Version), x)
    [<CustomOperation("Version'")>] member inline this.Version' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Version), x)
    [<CustomOperation("ScrollBarsEnabled")>] member inline this.ScrollBarsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBarsEnabled), (fun ctx x -> ctx.Element.ScrollBarsEnabled <- x), x)
    [<CustomOperation("ScrollBarsEnabled")>] member inline this.ScrollBarsEnabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBarsEnabled), (fun ctx x -> ctx.Element.ScrollBarsEnabled <- x), x)

    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("CanGoBackChanged")>] member inline this.CanGoBackChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CanGoBackChanged), "CanGoBackChanged", fn)
    [<CustomOperation("CanGoForwardChanged")>] member inline this.CanGoForwardChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CanGoForwardChanged), "CanGoForwardChanged", fn)
    [<CustomOperation("DocumentCompleted")>] member inline this.DocumentCompleted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentCompleted), "DocumentCompleted", fn)
    [<CustomOperation("DocumentTitleChanged")>] member inline this.DocumentTitleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DocumentTitleChanged), "DocumentTitleChanged", fn)
    [<CustomOperation("EncryptionLevelChanged")>] member inline this.EncryptionLevelChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EncryptionLevelChanged), "EncryptionLevelChanged", fn)
    [<CustomOperation("FileDownload")>] member inline this.FileDownload ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FileDownload), "FileDownload", fn)
    [<CustomOperation("Navigated")>] member inline this.Navigated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Navigated), "Navigated", fn)
    [<CustomOperation("Navigating")>] member inline this.Navigating ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Navigating), "Navigating", fn)
    [<CustomOperation("NewWindow")>] member inline this.NewWindow ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.NewWindow), "NewWindow", fn)
    [<CustomOperation("ProgressChanged")>] member inline this.ProgressChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ProgressChanged), "ProgressChanged", fn)
    [<CustomOperation("StatusTextChanged")>] member inline this.StatusTextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StatusTextChanged), "StatusTextChanged", fn)
                

type AxHostBuilder<'Element when 'Element :> System.Windows.Forms.AxHost>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Cursor) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Cursor")>] member inline this.Cursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Cursor), (fun ctx x -> ctx.Element.Cursor <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Enabled")>] member inline this.Enabled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Enabled), (fun ctx x -> ctx.Element.Enabled <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.ComponentModel.ISite) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("Site")>] member inline this.Site ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Site), (fun ctx x -> ctx.Element.Site <- x), x)
    [<CustomOperation("OcxState")>] member inline this.OcxState ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AxHost.State) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.OcxState), (fun ctx x -> ctx.Element.OcxState <- x), x)
    [<CustomOperation("OcxState")>] member inline this.OcxState ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.OcxState), (fun ctx x -> ctx.Element.OcxState <- x), x)

    [<CustomOperation("ContainingControl")>]
    member inline this.ContainingControl ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContainingControl <- x), creator)

    [<CustomOperation("ContainingControl")>]
    member inline this.ContainingControl ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.ContainingControl <- x), creator)
                        

    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("BindingContextChanged")>] member inline this.BindingContextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BindingContextChanged), "BindingContextChanged", fn)
    [<CustomOperation("CursorChanged")>] member inline this.CursorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CursorChanged), "CursorChanged", fn)
    [<CustomOperation("EnabledChanged")>] member inline this.EnabledChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EnabledChanged), "EnabledChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("DragDrop")>] member inline this.DragDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragDrop), "DragDrop", fn)
    [<CustomOperation("DragEnter")>] member inline this.DragEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragEnter), "DragEnter", fn)
    [<CustomOperation("DragOver")>] member inline this.DragOver ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragOver), "DragOver", fn)
    [<CustomOperation("DragLeave")>] member inline this.DragLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DragLeave), "DragLeave", fn)
    [<CustomOperation("GiveFeedback")>] member inline this.GiveFeedback ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GiveFeedback), "GiveFeedback", fn)
    [<CustomOperation("HelpRequested")>] member inline this.HelpRequested ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.HelpRequested), "HelpRequested", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("QueryContinueDrag")>] member inline this.QueryContinueDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryContinueDrag), "QueryContinueDrag", fn)
    [<CustomOperation("QueryAccessibilityHelp")>] member inline this.QueryAccessibilityHelp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.QueryAccessibilityHelp), "QueryAccessibilityHelp", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("Layout")>] member inline this.Layout ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Layout), "Layout", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
    [<CustomOperation("MouseHover")>] member inline this.MouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseHover), "MouseHover", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseWheel")>] member inline this.MouseWheel ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseWheel), "MouseWheel", fn)
    [<CustomOperation("ChangeUICues")>] member inline this.ChangeUICues ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ChangeUICues), "ChangeUICues", fn)
    [<CustomOperation("StyleChanged")>] member inline this.StyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StyleChanged), "StyleChanged", fn)
                

type DataGridViewBuilder<'Element when 'Element :> System.Windows.Forms.DataGridView>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AdjustedTopLeftHeaderBorderStyleEx")>] member inline this.AdjustedTopLeftHeaderBorderStyleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.AdjustedTopLeftHeaderBorderStyle), x)
    [<CustomOperation("AdjustedTopLeftHeaderBorderStyleEx'")>] member inline this.AdjustedTopLeftHeaderBorderStyleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.AdjustedTopLeftHeaderBorderStyle), x)
    [<CustomOperation("AdjustedTopLeftHeaderBorderStyle")>] member inline this.AdjustedTopLeftHeaderBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.AdjustedTopLeftHeaderBorderStyle), x)
    [<CustomOperation("AdjustedTopLeftHeaderBorderStyle'")>] member inline this.AdjustedTopLeftHeaderBorderStyle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.AdjustedTopLeftHeaderBorderStyle), x)
    [<CustomOperation("AdvancedCellBorderStyleEx")>] member inline this.AdvancedCellBorderStyleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.AdvancedCellBorderStyle), x)
    [<CustomOperation("AdvancedCellBorderStyleEx'")>] member inline this.AdvancedCellBorderStyleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.AdvancedCellBorderStyle), x)
    [<CustomOperation("AdvancedCellBorderStyle")>] member inline this.AdvancedCellBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.AdvancedCellBorderStyle), x)
    [<CustomOperation("AdvancedCellBorderStyle'")>] member inline this.AdvancedCellBorderStyle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.AdvancedCellBorderStyle), x)
    [<CustomOperation("AdvancedColumnHeadersBorderStyleEx")>] member inline this.AdvancedColumnHeadersBorderStyleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.AdvancedColumnHeadersBorderStyle), x)
    [<CustomOperation("AdvancedColumnHeadersBorderStyleEx'")>] member inline this.AdvancedColumnHeadersBorderStyleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.AdvancedColumnHeadersBorderStyle), x)
    [<CustomOperation("AdvancedColumnHeadersBorderStyle")>] member inline this.AdvancedColumnHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.AdvancedColumnHeadersBorderStyle), x)
    [<CustomOperation("AdvancedColumnHeadersBorderStyle'")>] member inline this.AdvancedColumnHeadersBorderStyle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.AdvancedColumnHeadersBorderStyle), x)
    [<CustomOperation("AdvancedRowHeadersBorderStyleEx")>] member inline this.AdvancedRowHeadersBorderStyleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.AdvancedRowHeadersBorderStyle), x)
    [<CustomOperation("AdvancedRowHeadersBorderStyleEx'")>] member inline this.AdvancedRowHeadersBorderStyleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.AdvancedRowHeadersBorderStyle), x)
    [<CustomOperation("AdvancedRowHeadersBorderStyle")>] member inline this.AdvancedRowHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.AdvancedRowHeadersBorderStyle), x)
    [<CustomOperation("AdvancedRowHeadersBorderStyle'")>] member inline this.AdvancedRowHeadersBorderStyle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.AdvancedRowHeadersBorderStyle), x)
    [<CustomOperation("AllowUserToAddRows")>] member inline this.AllowUserToAddRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToAddRows), (fun ctx x -> ctx.Element.AllowUserToAddRows <- x), x)
    [<CustomOperation("AllowUserToAddRows")>] member inline this.AllowUserToAddRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToAddRows), (fun ctx x -> ctx.Element.AllowUserToAddRows <- x), x)
    [<CustomOperation("AllowUserToDeleteRows")>] member inline this.AllowUserToDeleteRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToDeleteRows), (fun ctx x -> ctx.Element.AllowUserToDeleteRows <- x), x)
    [<CustomOperation("AllowUserToDeleteRows")>] member inline this.AllowUserToDeleteRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToDeleteRows), (fun ctx x -> ctx.Element.AllowUserToDeleteRows <- x), x)
    [<CustomOperation("AllowUserToOrderColumns")>] member inline this.AllowUserToOrderColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToOrderColumns), (fun ctx x -> ctx.Element.AllowUserToOrderColumns <- x), x)
    [<CustomOperation("AllowUserToOrderColumns")>] member inline this.AllowUserToOrderColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToOrderColumns), (fun ctx x -> ctx.Element.AllowUserToOrderColumns <- x), x)
    [<CustomOperation("AllowUserToResizeColumns")>] member inline this.AllowUserToResizeColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeColumns), (fun ctx x -> ctx.Element.AllowUserToResizeColumns <- x), x)
    [<CustomOperation("AllowUserToResizeColumns")>] member inline this.AllowUserToResizeColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeColumns), (fun ctx x -> ctx.Element.AllowUserToResizeColumns <- x), x)
    [<CustomOperation("AllowUserToResizeRows")>] member inline this.AllowUserToResizeRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeRows), (fun ctx x -> ctx.Element.AllowUserToResizeRows <- x), x)
    [<CustomOperation("AllowUserToResizeRows")>] member inline this.AllowUserToResizeRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeRows), (fun ctx x -> ctx.Element.AllowUserToResizeRows <- x), x)
    [<CustomOperation("AlternatingRowsDefaultCellStyle")>] member inline this.AlternatingRowsDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AlternatingRowsDefaultCellStyle), (fun ctx x -> ctx.Element.AlternatingRowsDefaultCellStyle <- x), x)
    [<CustomOperation("AlternatingRowsDefaultCellStyle")>] member inline this.AlternatingRowsDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AlternatingRowsDefaultCellStyle), (fun ctx x -> ctx.Element.AlternatingRowsDefaultCellStyle <- x), x)
    [<CustomOperation("AutoGenerateColumns")>] member inline this.AutoGenerateColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoGenerateColumns), (fun ctx x -> ctx.Element.AutoGenerateColumns <- x), x)
    [<CustomOperation("AutoGenerateColumns")>] member inline this.AutoGenerateColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoGenerateColumns), (fun ctx x -> ctx.Element.AutoGenerateColumns <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeColumnsMode")>] member inline this.AutoSizeColumnsMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewAutoSizeColumnsMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeColumnsMode), (fun ctx x -> ctx.Element.AutoSizeColumnsMode <- x), x)
    [<CustomOperation("AutoSizeColumnsMode")>] member inline this.AutoSizeColumnsMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeColumnsMode), (fun ctx x -> ctx.Element.AutoSizeColumnsMode <- x), x)
    [<CustomOperation("AutoSizeRowsMode")>] member inline this.AutoSizeRowsMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewAutoSizeRowsMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeRowsMode), (fun ctx x -> ctx.Element.AutoSizeRowsMode <- x), x)
    [<CustomOperation("AutoSizeRowsMode")>] member inline this.AutoSizeRowsMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeRowsMode), (fun ctx x -> ctx.Element.AutoSizeRowsMode <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundColor")>] member inline this.BackgroundColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundColor), (fun ctx x -> ctx.Element.BackgroundColor <- x), x)
    [<CustomOperation("BackgroundColor")>] member inline this.BackgroundColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundColor), (fun ctx x -> ctx.Element.BackgroundColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("CellBorderStyle")>] member inline this.CellBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CellBorderStyle), (fun ctx x -> ctx.Element.CellBorderStyle <- x), x)
    [<CustomOperation("CellBorderStyle")>] member inline this.CellBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CellBorderStyle), (fun ctx x -> ctx.Element.CellBorderStyle <- x), x)
    [<CustomOperation("ClipboardCopyMode")>] member inline this.ClipboardCopyMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewClipboardCopyMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ClipboardCopyMode), (fun ctx x -> ctx.Element.ClipboardCopyMode <- x), x)
    [<CustomOperation("ClipboardCopyMode")>] member inline this.ClipboardCopyMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ClipboardCopyMode), (fun ctx x -> ctx.Element.ClipboardCopyMode <- x), x)
    [<CustomOperation("ColumnCount")>] member inline this.ColumnCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnCount), (fun ctx x -> ctx.Element.ColumnCount <- x), x)
    [<CustomOperation("ColumnCount")>] member inline this.ColumnCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnCount), (fun ctx x -> ctx.Element.ColumnCount <- x), x)
    [<CustomOperation("ColumnHeadersBorderStyle")>] member inline this.ColumnHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewHeaderBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersBorderStyle), (fun ctx x -> ctx.Element.ColumnHeadersBorderStyle <- x), x)
    [<CustomOperation("ColumnHeadersBorderStyle")>] member inline this.ColumnHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersBorderStyle), (fun ctx x -> ctx.Element.ColumnHeadersBorderStyle <- x), x)
    [<CustomOperation("ColumnHeadersDefaultCellStyle")>] member inline this.ColumnHeadersDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersDefaultCellStyle), (fun ctx x -> ctx.Element.ColumnHeadersDefaultCellStyle <- x), x)
    [<CustomOperation("ColumnHeadersDefaultCellStyle")>] member inline this.ColumnHeadersDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersDefaultCellStyle), (fun ctx x -> ctx.Element.ColumnHeadersDefaultCellStyle <- x), x)
    [<CustomOperation("ColumnHeadersHeight")>] member inline this.ColumnHeadersHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeight), (fun ctx x -> ctx.Element.ColumnHeadersHeight <- x), x)
    [<CustomOperation("ColumnHeadersHeight")>] member inline this.ColumnHeadersHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeight), (fun ctx x -> ctx.Element.ColumnHeadersHeight <- x), x)
    [<CustomOperation("ColumnHeadersHeightSizeMode")>] member inline this.ColumnHeadersHeightSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeightSizeMode), (fun ctx x -> ctx.Element.ColumnHeadersHeightSizeMode <- x), x)
    [<CustomOperation("ColumnHeadersHeightSizeMode")>] member inline this.ColumnHeadersHeightSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeightSizeMode), (fun ctx x -> ctx.Element.ColumnHeadersHeightSizeMode <- x), x)
    [<CustomOperation("ColumnHeadersVisible")>] member inline this.ColumnHeadersVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersVisible), (fun ctx x -> ctx.Element.ColumnHeadersVisible <- x), x)
    [<CustomOperation("ColumnHeadersVisible")>] member inline this.ColumnHeadersVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersVisible), (fun ctx x -> ctx.Element.ColumnHeadersVisible <- x), x)
    [<CustomOperation("ColumnsEx")>] member inline this.ColumnsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Columns), x)
    [<CustomOperation("ColumnsEx'")>] member inline this.ColumnsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Columns), x)
    [<CustomOperation("Columns")>] member inline this.Columns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Columns), x)
    [<CustomOperation("Columns'")>] member inline this.Columns' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Columns), x)
    [<CustomOperation("CurrentCell")>] member inline this.CurrentCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCell) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CurrentCell), (fun ctx x -> ctx.Element.CurrentCell <- x), x)
    [<CustomOperation("CurrentCell")>] member inline this.CurrentCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CurrentCell), (fun ctx x -> ctx.Element.CurrentCell <- x), x)
    [<CustomOperation("CurrentCellAddressEx")>] member inline this.CurrentCellAddressEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CurrentCellAddress), x)
    [<CustomOperation("CurrentCellAddressEx'")>] member inline this.CurrentCellAddressEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CurrentCellAddress), x)
    [<CustomOperation("CurrentCellAddress")>] member inline this.CurrentCellAddress ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CurrentCellAddress), x)
    [<CustomOperation("CurrentCellAddress'")>] member inline this.CurrentCellAddress' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CurrentCellAddress), x)
    [<CustomOperation("CurrentRowEx")>] member inline this.CurrentRowEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CurrentRow), x)
    [<CustomOperation("CurrentRowEx'")>] member inline this.CurrentRowEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CurrentRow), x)
    [<CustomOperation("CurrentRow")>] member inline this.CurrentRow ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CurrentRow), x)
    [<CustomOperation("CurrentRow'")>] member inline this.CurrentRow' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CurrentRow), x)
    [<CustomOperation("DataMember")>] member inline this.DataMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DataMember), (fun ctx x -> ctx.Element.DataMember <- x), x)
    [<CustomOperation("DataMember")>] member inline this.DataMember ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DataMember), (fun ctx x -> ctx.Element.DataMember <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Object) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DataSource")>] member inline this.DataSource ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DataSource), (fun ctx x -> ctx.Element.DataSource <- x), x)
    [<CustomOperation("DefaultCellStyle")>] member inline this.DefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultCellStyle), (fun ctx x -> ctx.Element.DefaultCellStyle <- x), x)
    [<CustomOperation("DefaultCellStyle")>] member inline this.DefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultCellStyle), (fun ctx x -> ctx.Element.DefaultCellStyle <- x), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("EditMode")>] member inline this.EditMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewEditMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EditMode), (fun ctx x -> ctx.Element.EditMode <- x), x)
    [<CustomOperation("EditMode")>] member inline this.EditMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EditMode), (fun ctx x -> ctx.Element.EditMode <- x), x)
    [<CustomOperation("EditingControlEx")>] member inline this.EditingControlEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.EditingControl), x)
    [<CustomOperation("EditingControlEx'")>] member inline this.EditingControlEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.EditingControl), x)
    [<CustomOperation("EditingControl")>] member inline this.EditingControl ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.EditingControl), x)
    [<CustomOperation("EditingControl'")>] member inline this.EditingControl' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.EditingControl), x)
    [<CustomOperation("EditingPanelEx")>] member inline this.EditingPanelEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.EditingPanel), x)
    [<CustomOperation("EditingPanelEx'")>] member inline this.EditingPanelEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.EditingPanel), x)
    [<CustomOperation("EditingPanel")>] member inline this.EditingPanel ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.EditingPanel), x)
    [<CustomOperation("EditingPanel'")>] member inline this.EditingPanel' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.EditingPanel), x)
    [<CustomOperation("EnableHeadersVisualStyles")>] member inline this.EnableHeadersVisualStyles ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.EnableHeadersVisualStyles), (fun ctx x -> ctx.Element.EnableHeadersVisualStyles <- x), x)
    [<CustomOperation("EnableHeadersVisualStyles")>] member inline this.EnableHeadersVisualStyles ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.EnableHeadersVisualStyles), (fun ctx x -> ctx.Element.EnableHeadersVisualStyles <- x), x)
    [<CustomOperation("FirstDisplayedCell")>] member inline this.FirstDisplayedCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCell) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedCell), (fun ctx x -> ctx.Element.FirstDisplayedCell <- x), x)
    [<CustomOperation("FirstDisplayedCell")>] member inline this.FirstDisplayedCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedCell), (fun ctx x -> ctx.Element.FirstDisplayedCell <- x), x)
    [<CustomOperation("FirstDisplayedScrollingColumnIndex")>] member inline this.FirstDisplayedScrollingColumnIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedScrollingColumnIndex), (fun ctx x -> ctx.Element.FirstDisplayedScrollingColumnIndex <- x), x)
    [<CustomOperation("FirstDisplayedScrollingColumnIndex")>] member inline this.FirstDisplayedScrollingColumnIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedScrollingColumnIndex), (fun ctx x -> ctx.Element.FirstDisplayedScrollingColumnIndex <- x), x)
    [<CustomOperation("FirstDisplayedScrollingRowIndex")>] member inline this.FirstDisplayedScrollingRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedScrollingRowIndex), (fun ctx x -> ctx.Element.FirstDisplayedScrollingRowIndex <- x), x)
    [<CustomOperation("FirstDisplayedScrollingRowIndex")>] member inline this.FirstDisplayedScrollingRowIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDisplayedScrollingRowIndex), (fun ctx x -> ctx.Element.FirstDisplayedScrollingRowIndex <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("GridColor")>] member inline this.GridColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GridColor), (fun ctx x -> ctx.Element.GridColor <- x), x)
    [<CustomOperation("GridColor")>] member inline this.GridColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GridColor), (fun ctx x -> ctx.Element.GridColor <- x), x)
    [<CustomOperation("HorizontalScrollingOffset")>] member inline this.HorizontalScrollingOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalScrollingOffset), (fun ctx x -> ctx.Element.HorizontalScrollingOffset <- x), x)
    [<CustomOperation("HorizontalScrollingOffset")>] member inline this.HorizontalScrollingOffset ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HorizontalScrollingOffset), (fun ctx x -> ctx.Element.HorizontalScrollingOffset <- x), x)
    [<CustomOperation("MultiSelect")>] member inline this.MultiSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MultiSelect), (fun ctx x -> ctx.Element.MultiSelect <- x), x)
    [<CustomOperation("MultiSelect")>] member inline this.MultiSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MultiSelect), (fun ctx x -> ctx.Element.MultiSelect <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("ReadOnly")>] member inline this.ReadOnly ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnly), (fun ctx x -> ctx.Element.ReadOnly <- x), x)
    [<CustomOperation("RowCount")>] member inline this.RowCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowCount), (fun ctx x -> ctx.Element.RowCount <- x), x)
    [<CustomOperation("RowCount")>] member inline this.RowCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowCount), (fun ctx x -> ctx.Element.RowCount <- x), x)
    [<CustomOperation("RowHeadersBorderStyle")>] member inline this.RowHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewHeaderBorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersBorderStyle), (fun ctx x -> ctx.Element.RowHeadersBorderStyle <- x), x)
    [<CustomOperation("RowHeadersBorderStyle")>] member inline this.RowHeadersBorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersBorderStyle), (fun ctx x -> ctx.Element.RowHeadersBorderStyle <- x), x)
    [<CustomOperation("RowHeadersDefaultCellStyle")>] member inline this.RowHeadersDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersDefaultCellStyle), (fun ctx x -> ctx.Element.RowHeadersDefaultCellStyle <- x), x)
    [<CustomOperation("RowHeadersDefaultCellStyle")>] member inline this.RowHeadersDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersDefaultCellStyle), (fun ctx x -> ctx.Element.RowHeadersDefaultCellStyle <- x), x)
    [<CustomOperation("RowHeadersVisible")>] member inline this.RowHeadersVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersVisible), (fun ctx x -> ctx.Element.RowHeadersVisible <- x), x)
    [<CustomOperation("RowHeadersVisible")>] member inline this.RowHeadersVisible ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersVisible), (fun ctx x -> ctx.Element.RowHeadersVisible <- x), x)
    [<CustomOperation("RowHeadersWidth")>] member inline this.RowHeadersWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidth), (fun ctx x -> ctx.Element.RowHeadersWidth <- x), x)
    [<CustomOperation("RowHeadersWidth")>] member inline this.RowHeadersWidth ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidth), (fun ctx x -> ctx.Element.RowHeadersWidth <- x), x)
    [<CustomOperation("RowHeadersWidthSizeMode")>] member inline this.RowHeadersWidthSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidthSizeMode), (fun ctx x -> ctx.Element.RowHeadersWidthSizeMode <- x), x)
    [<CustomOperation("RowHeadersWidthSizeMode")>] member inline this.RowHeadersWidthSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidthSizeMode), (fun ctx x -> ctx.Element.RowHeadersWidthSizeMode <- x), x)
    [<CustomOperation("RowsEx")>] member inline this.RowsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Rows), x)
    [<CustomOperation("RowsEx'")>] member inline this.RowsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Rows), x)
    [<CustomOperation("Rows")>] member inline this.Rows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Rows), x)
    [<CustomOperation("Rows'")>] member inline this.Rows' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Rows), x)
    [<CustomOperation("RowsDefaultCellStyle")>] member inline this.RowsDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewCellStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowsDefaultCellStyle), (fun ctx x -> ctx.Element.RowsDefaultCellStyle <- x), x)
    [<CustomOperation("RowsDefaultCellStyle")>] member inline this.RowsDefaultCellStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowsDefaultCellStyle), (fun ctx x -> ctx.Element.RowsDefaultCellStyle <- x), x)
    [<CustomOperation("RowTemplate")>] member inline this.RowTemplate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewRow) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RowTemplate), (fun ctx x -> ctx.Element.RowTemplate <- x), x)
    [<CustomOperation("RowTemplate")>] member inline this.RowTemplate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RowTemplate), (fun ctx x -> ctx.Element.RowTemplate <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ScrollBars) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("ScrollBars")>] member inline this.ScrollBars ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollBars), (fun ctx x -> ctx.Element.ScrollBars <- x), x)
    [<CustomOperation("SelectedCellsEx")>] member inline this.SelectedCellsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedCells), x)
    [<CustomOperation("SelectedCellsEx'")>] member inline this.SelectedCellsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedCells), x)
    [<CustomOperation("SelectedCells")>] member inline this.SelectedCells ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedCells), x)
    [<CustomOperation("SelectedCells'")>] member inline this.SelectedCells' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedCells), x)
    [<CustomOperation("SelectedColumnsEx")>] member inline this.SelectedColumnsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedColumns), x)
    [<CustomOperation("SelectedColumnsEx'")>] member inline this.SelectedColumnsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedColumns), x)
    [<CustomOperation("SelectedColumns")>] member inline this.SelectedColumns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedColumns), x)
    [<CustomOperation("SelectedColumns'")>] member inline this.SelectedColumns' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedColumns), x)
    [<CustomOperation("SelectedRowsEx")>] member inline this.SelectedRowsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedRows), x)
    [<CustomOperation("SelectedRowsEx'")>] member inline this.SelectedRowsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedRows), x)
    [<CustomOperation("SelectedRows")>] member inline this.SelectedRows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedRows), x)
    [<CustomOperation("SelectedRows'")>] member inline this.SelectedRows' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedRows), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewSelectionMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("SelectionMode")>] member inline this.SelectionMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionMode), (fun ctx x -> ctx.Element.SelectionMode <- x), x)
    [<CustomOperation("ShowCellErrors")>] member inline this.ShowCellErrors ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCellErrors), (fun ctx x -> ctx.Element.ShowCellErrors <- x), x)
    [<CustomOperation("ShowCellErrors")>] member inline this.ShowCellErrors ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCellErrors), (fun ctx x -> ctx.Element.ShowCellErrors <- x), x)
    [<CustomOperation("ShowCellToolTips")>] member inline this.ShowCellToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCellToolTips), (fun ctx x -> ctx.Element.ShowCellToolTips <- x), x)
    [<CustomOperation("ShowCellToolTips")>] member inline this.ShowCellToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCellToolTips), (fun ctx x -> ctx.Element.ShowCellToolTips <- x), x)
    [<CustomOperation("ShowEditingIcon")>] member inline this.ShowEditingIcon ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowEditingIcon), (fun ctx x -> ctx.Element.ShowEditingIcon <- x), x)
    [<CustomOperation("ShowEditingIcon")>] member inline this.ShowEditingIcon ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowEditingIcon), (fun ctx x -> ctx.Element.ShowEditingIcon <- x), x)
    [<CustomOperation("ShowRowErrors")>] member inline this.ShowRowErrors ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowRowErrors), (fun ctx x -> ctx.Element.ShowRowErrors <- x), x)
    [<CustomOperation("ShowRowErrors")>] member inline this.ShowRowErrors ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowRowErrors), (fun ctx x -> ctx.Element.ShowRowErrors <- x), x)
    [<CustomOperation("SortedColumnEx")>] member inline this.SortedColumnEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SortedColumn), x)
    [<CustomOperation("SortedColumnEx'")>] member inline this.SortedColumnEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SortedColumn), x)
    [<CustomOperation("SortedColumn")>] member inline this.SortedColumn ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SortedColumn), x)
    [<CustomOperation("SortedColumn'")>] member inline this.SortedColumn' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SortedColumn), x)
    [<CustomOperation("StandardTab")>] member inline this.StandardTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StandardTab), (fun ctx x -> ctx.Element.StandardTab <- x), x)
    [<CustomOperation("StandardTab")>] member inline this.StandardTab ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StandardTab), (fun ctx x -> ctx.Element.StandardTab <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TopLeftHeaderCell")>] member inline this.TopLeftHeaderCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DataGridViewHeaderCell) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopLeftHeaderCell), (fun ctx x -> ctx.Element.TopLeftHeaderCell <- x), x)
    [<CustomOperation("TopLeftHeaderCell")>] member inline this.TopLeftHeaderCell ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopLeftHeaderCell), (fun ctx x -> ctx.Element.TopLeftHeaderCell <- x), x)
    [<CustomOperation("UserSetCursorEx")>] member inline this.UserSetCursorEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.UserSetCursor), x)
    [<CustomOperation("UserSetCursorEx'")>] member inline this.UserSetCursorEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.UserSetCursor), x)
    [<CustomOperation("UserSetCursor")>] member inline this.UserSetCursor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.UserSetCursor), x)
    [<CustomOperation("UserSetCursor'")>] member inline this.UserSetCursor' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.UserSetCursor), x)
    [<CustomOperation("VirtualMode")>] member inline this.VirtualMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualMode), (fun ctx x -> ctx.Element.VirtualMode <- x), x)
    [<CustomOperation("VirtualMode")>] member inline this.VirtualMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualMode), (fun ctx x -> ctx.Element.VirtualMode <- x), x)

    [<CustomOperation("AllowUserToAddRowsChanged")>] member inline this.AllowUserToAddRowsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToAddRowsChanged), "AllowUserToAddRowsChanged", fn)
    [<CustomOperation("AllowUserToDeleteRowsChanged")>] member inline this.AllowUserToDeleteRowsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToDeleteRowsChanged), "AllowUserToDeleteRowsChanged", fn)
    [<CustomOperation("AllowUserToOrderColumnsChanged")>] member inline this.AllowUserToOrderColumnsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToOrderColumnsChanged), "AllowUserToOrderColumnsChanged", fn)
    [<CustomOperation("AllowUserToResizeColumnsChanged")>] member inline this.AllowUserToResizeColumnsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeColumnsChanged), "AllowUserToResizeColumnsChanged", fn)
    [<CustomOperation("AllowUserToResizeRowsChanged")>] member inline this.AllowUserToResizeRowsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowUserToResizeRowsChanged), "AllowUserToResizeRowsChanged", fn)
    [<CustomOperation("AlternatingRowsDefaultCellStyleChanged")>] member inline this.AlternatingRowsDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AlternatingRowsDefaultCellStyleChanged), "AlternatingRowsDefaultCellStyleChanged", fn)
    [<CustomOperation("AutoGenerateColumnsChanged")>] member inline this.AutoGenerateColumnsChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoGenerateColumnsChanged), "AutoGenerateColumnsChanged", fn)
    [<CustomOperation("AutoSizeColumnsModeChanged")>] member inline this.AutoSizeColumnsModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeColumnsModeChanged), "AutoSizeColumnsModeChanged", fn)
    [<CustomOperation("AutoSizeRowsModeChanged")>] member inline this.AutoSizeRowsModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeRowsModeChanged), "AutoSizeRowsModeChanged", fn)
    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundColorChanged")>] member inline this.BackgroundColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundColorChanged), "BackgroundColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("BorderStyleChanged")>] member inline this.BorderStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyleChanged), "BorderStyleChanged", fn)
    [<CustomOperation("CellBorderStyleChanged")>] member inline this.CellBorderStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellBorderStyleChanged), "CellBorderStyleChanged", fn)
    [<CustomOperation("ColumnHeadersBorderStyleChanged")>] member inline this.ColumnHeadersBorderStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersBorderStyleChanged), "ColumnHeadersBorderStyleChanged", fn)
    [<CustomOperation("ColumnHeadersDefaultCellStyleChanged")>] member inline this.ColumnHeadersDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersDefaultCellStyleChanged), "ColumnHeadersDefaultCellStyleChanged", fn)
    [<CustomOperation("ColumnHeadersHeightChanged")>] member inline this.ColumnHeadersHeightChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeightChanged), "ColumnHeadersHeightChanged", fn)
    [<CustomOperation("ColumnHeadersHeightSizeModeChanged")>] member inline this.ColumnHeadersHeightSizeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeadersHeightSizeModeChanged), "ColumnHeadersHeightSizeModeChanged", fn)
    [<CustomOperation("DataMemberChanged")>] member inline this.DataMemberChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataMemberChanged), "DataMemberChanged", fn)
    [<CustomOperation("DataSourceChanged")>] member inline this.DataSourceChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataSourceChanged), "DataSourceChanged", fn)
    [<CustomOperation("DefaultCellStyleChanged")>] member inline this.DefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultCellStyleChanged), "DefaultCellStyleChanged", fn)
    [<CustomOperation("EditModeChanged")>] member inline this.EditModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EditModeChanged), "EditModeChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("GridColorChanged")>] member inline this.GridColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GridColorChanged), "GridColorChanged", fn)
    [<CustomOperation("MultiSelectChanged")>] member inline this.MultiSelectChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MultiSelectChanged), "MultiSelectChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("ReadOnlyChanged")>] member inline this.ReadOnlyChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ReadOnlyChanged), "ReadOnlyChanged", fn)
    [<CustomOperation("RowHeadersBorderStyleChanged")>] member inline this.RowHeadersBorderStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersBorderStyleChanged), "RowHeadersBorderStyleChanged", fn)
    [<CustomOperation("RowHeadersDefaultCellStyleChanged")>] member inline this.RowHeadersDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersDefaultCellStyleChanged), "RowHeadersDefaultCellStyleChanged", fn)
    [<CustomOperation("RowHeadersWidthChanged")>] member inline this.RowHeadersWidthChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidthChanged), "RowHeadersWidthChanged", fn)
    [<CustomOperation("RowHeadersWidthSizeModeChanged")>] member inline this.RowHeadersWidthSizeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeadersWidthSizeModeChanged), "RowHeadersWidthSizeModeChanged", fn)
    [<CustomOperation("RowsDefaultCellStyleChanged")>] member inline this.RowsDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowsDefaultCellStyleChanged), "RowsDefaultCellStyleChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("AutoSizeColumnModeChanged")>] member inline this.AutoSizeColumnModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeColumnModeChanged), "AutoSizeColumnModeChanged", fn)
    [<CustomOperation("CancelRowEdit")>] member inline this.CancelRowEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CancelRowEdit), "CancelRowEdit", fn)
    [<CustomOperation("CellBeginEdit")>] member inline this.CellBeginEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellBeginEdit), "CellBeginEdit", fn)
    [<CustomOperation("CellClick")>] member inline this.CellClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellClick), "CellClick", fn)
    [<CustomOperation("CellContentClick")>] member inline this.CellContentClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellContentClick), "CellContentClick", fn)
    [<CustomOperation("CellContentDoubleClick")>] member inline this.CellContentDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellContentDoubleClick), "CellContentDoubleClick", fn)
    [<CustomOperation("CellContextMenuStripChanged")>] member inline this.CellContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellContextMenuStripChanged), "CellContextMenuStripChanged", fn)
    [<CustomOperation("CellContextMenuStripNeeded")>] member inline this.CellContextMenuStripNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellContextMenuStripNeeded), "CellContextMenuStripNeeded", fn)
    [<CustomOperation("CellDoubleClick")>] member inline this.CellDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellDoubleClick), "CellDoubleClick", fn)
    [<CustomOperation("CellEndEdit")>] member inline this.CellEndEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellEndEdit), "CellEndEdit", fn)
    [<CustomOperation("CellEnter")>] member inline this.CellEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellEnter), "CellEnter", fn)
    [<CustomOperation("CellErrorTextChanged")>] member inline this.CellErrorTextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellErrorTextChanged), "CellErrorTextChanged", fn)
    [<CustomOperation("CellErrorTextNeeded")>] member inline this.CellErrorTextNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellErrorTextNeeded), "CellErrorTextNeeded", fn)
    [<CustomOperation("CellFormatting")>] member inline this.CellFormatting ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellFormatting), "CellFormatting", fn)
    [<CustomOperation("CellLeave")>] member inline this.CellLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellLeave), "CellLeave", fn)
    [<CustomOperation("CellMouseClick")>] member inline this.CellMouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseClick), "CellMouseClick", fn)
    [<CustomOperation("CellMouseDoubleClick")>] member inline this.CellMouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseDoubleClick), "CellMouseDoubleClick", fn)
    [<CustomOperation("CellMouseDown")>] member inline this.CellMouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseDown), "CellMouseDown", fn)
    [<CustomOperation("CellMouseEnter")>] member inline this.CellMouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseEnter), "CellMouseEnter", fn)
    [<CustomOperation("CellMouseLeave")>] member inline this.CellMouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseLeave), "CellMouseLeave", fn)
    [<CustomOperation("CellMouseMove")>] member inline this.CellMouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseMove), "CellMouseMove", fn)
    [<CustomOperation("CellMouseUp")>] member inline this.CellMouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellMouseUp), "CellMouseUp", fn)
    [<CustomOperation("CellPainting")>] member inline this.CellPainting ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellPainting), "CellPainting", fn)
    [<CustomOperation("CellParsing")>] member inline this.CellParsing ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellParsing), "CellParsing", fn)
    [<CustomOperation("CellStateChanged")>] member inline this.CellStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellStateChanged), "CellStateChanged", fn)
    [<CustomOperation("CellStyleChanged")>] member inline this.CellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellStyleChanged), "CellStyleChanged", fn)
    [<CustomOperation("CellStyleContentChanged")>] member inline this.CellStyleContentChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellStyleContentChanged), "CellStyleContentChanged", fn)
    [<CustomOperation("CellToolTipTextChanged")>] member inline this.CellToolTipTextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellToolTipTextChanged), "CellToolTipTextChanged", fn)
    [<CustomOperation("CellToolTipTextNeeded")>] member inline this.CellToolTipTextNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellToolTipTextNeeded), "CellToolTipTextNeeded", fn)
    [<CustomOperation("CellValidated")>] member inline this.CellValidated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellValidated), "CellValidated", fn)
    [<CustomOperation("CellValidating")>] member inline this.CellValidating ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellValidating), "CellValidating", fn)
    [<CustomOperation("CellValueChanged")>] member inline this.CellValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellValueChanged), "CellValueChanged", fn)
    [<CustomOperation("CellValueNeeded")>] member inline this.CellValueNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellValueNeeded), "CellValueNeeded", fn)
    [<CustomOperation("CellValuePushed")>] member inline this.CellValuePushed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CellValuePushed), "CellValuePushed", fn)
    [<CustomOperation("ColumnAdded")>] member inline this.ColumnAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnAdded), "ColumnAdded", fn)
    [<CustomOperation("ColumnContextMenuStripChanged")>] member inline this.ColumnContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnContextMenuStripChanged), "ColumnContextMenuStripChanged", fn)
    [<CustomOperation("ColumnDataPropertyNameChanged")>] member inline this.ColumnDataPropertyNameChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnDataPropertyNameChanged), "ColumnDataPropertyNameChanged", fn)
    [<CustomOperation("ColumnDefaultCellStyleChanged")>] member inline this.ColumnDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnDefaultCellStyleChanged), "ColumnDefaultCellStyleChanged", fn)
    [<CustomOperation("ColumnDisplayIndexChanged")>] member inline this.ColumnDisplayIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnDisplayIndexChanged), "ColumnDisplayIndexChanged", fn)
    [<CustomOperation("ColumnDividerDoubleClick")>] member inline this.ColumnDividerDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnDividerDoubleClick), "ColumnDividerDoubleClick", fn)
    [<CustomOperation("ColumnDividerWidthChanged")>] member inline this.ColumnDividerWidthChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnDividerWidthChanged), "ColumnDividerWidthChanged", fn)
    [<CustomOperation("ColumnHeaderMouseClick")>] member inline this.ColumnHeaderMouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeaderMouseClick), "ColumnHeaderMouseClick", fn)
    [<CustomOperation("ColumnHeaderMouseDoubleClick")>] member inline this.ColumnHeaderMouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeaderMouseDoubleClick), "ColumnHeaderMouseDoubleClick", fn)
    [<CustomOperation("ColumnHeaderCellChanged")>] member inline this.ColumnHeaderCellChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnHeaderCellChanged), "ColumnHeaderCellChanged", fn)
    [<CustomOperation("ColumnMinimumWidthChanged")>] member inline this.ColumnMinimumWidthChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnMinimumWidthChanged), "ColumnMinimumWidthChanged", fn)
    [<CustomOperation("ColumnNameChanged")>] member inline this.ColumnNameChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnNameChanged), "ColumnNameChanged", fn)
    [<CustomOperation("ColumnRemoved")>] member inline this.ColumnRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnRemoved), "ColumnRemoved", fn)
    [<CustomOperation("ColumnSortModeChanged")>] member inline this.ColumnSortModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnSortModeChanged), "ColumnSortModeChanged", fn)
    [<CustomOperation("ColumnStateChanged")>] member inline this.ColumnStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnStateChanged), "ColumnStateChanged", fn)
    [<CustomOperation("ColumnToolTipTextChanged")>] member inline this.ColumnToolTipTextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnToolTipTextChanged), "ColumnToolTipTextChanged", fn)
    [<CustomOperation("ColumnWidthChanged")>] member inline this.ColumnWidthChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnWidthChanged), "ColumnWidthChanged", fn)
    [<CustomOperation("CurrentCellChanged")>] member inline this.CurrentCellChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CurrentCellChanged), "CurrentCellChanged", fn)
    [<CustomOperation("CurrentCellDirtyStateChanged")>] member inline this.CurrentCellDirtyStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CurrentCellDirtyStateChanged), "CurrentCellDirtyStateChanged", fn)
    [<CustomOperation("DataBindingComplete")>] member inline this.DataBindingComplete ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataBindingComplete), "DataBindingComplete", fn)
    [<CustomOperation("DataError")>] member inline this.DataError ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DataError), "DataError", fn)
    [<CustomOperation("DefaultValuesNeeded")>] member inline this.DefaultValuesNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DefaultValuesNeeded), "DefaultValuesNeeded", fn)
    [<CustomOperation("EditingControlShowing")>] member inline this.EditingControlShowing ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.EditingControlShowing), "EditingControlShowing", fn)
    [<CustomOperation("NewRowNeeded")>] member inline this.NewRowNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.NewRowNeeded), "NewRowNeeded", fn)
    [<CustomOperation("RowContextMenuStripChanged")>] member inline this.RowContextMenuStripChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowContextMenuStripChanged), "RowContextMenuStripChanged", fn)
    [<CustomOperation("RowContextMenuStripNeeded")>] member inline this.RowContextMenuStripNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowContextMenuStripNeeded), "RowContextMenuStripNeeded", fn)
    [<CustomOperation("RowDefaultCellStyleChanged")>] member inline this.RowDefaultCellStyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowDefaultCellStyleChanged), "RowDefaultCellStyleChanged", fn)
    [<CustomOperation("RowDirtyStateNeeded")>] member inline this.RowDirtyStateNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowDirtyStateNeeded), "RowDirtyStateNeeded", fn)
    [<CustomOperation("RowDividerDoubleClick")>] member inline this.RowDividerDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowDividerDoubleClick), "RowDividerDoubleClick", fn)
    [<CustomOperation("RowDividerHeightChanged")>] member inline this.RowDividerHeightChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowDividerHeightChanged), "RowDividerHeightChanged", fn)
    [<CustomOperation("RowEnter")>] member inline this.RowEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowEnter), "RowEnter", fn)
    [<CustomOperation("RowErrorTextChanged")>] member inline this.RowErrorTextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowErrorTextChanged), "RowErrorTextChanged", fn)
    [<CustomOperation("RowErrorTextNeeded")>] member inline this.RowErrorTextNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowErrorTextNeeded), "RowErrorTextNeeded", fn)
    [<CustomOperation("RowHeaderMouseClick")>] member inline this.RowHeaderMouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeaderMouseClick), "RowHeaderMouseClick", fn)
    [<CustomOperation("RowHeaderMouseDoubleClick")>] member inline this.RowHeaderMouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeaderMouseDoubleClick), "RowHeaderMouseDoubleClick", fn)
    [<CustomOperation("RowHeaderCellChanged")>] member inline this.RowHeaderCellChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeaderCellChanged), "RowHeaderCellChanged", fn)
    [<CustomOperation("RowHeightChanged")>] member inline this.RowHeightChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeightChanged), "RowHeightChanged", fn)
    [<CustomOperation("RowHeightInfoNeeded")>] member inline this.RowHeightInfoNeeded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeightInfoNeeded), "RowHeightInfoNeeded", fn)
    [<CustomOperation("RowHeightInfoPushed")>] member inline this.RowHeightInfoPushed ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowHeightInfoPushed), "RowHeightInfoPushed", fn)
    [<CustomOperation("RowLeave")>] member inline this.RowLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowLeave), "RowLeave", fn)
    [<CustomOperation("RowMinimumHeightChanged")>] member inline this.RowMinimumHeightChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowMinimumHeightChanged), "RowMinimumHeightChanged", fn)
    [<CustomOperation("RowPostPaint")>] member inline this.RowPostPaint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowPostPaint), "RowPostPaint", fn)
    [<CustomOperation("RowPrePaint")>] member inline this.RowPrePaint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowPrePaint), "RowPrePaint", fn)
    [<CustomOperation("RowsAdded")>] member inline this.RowsAdded ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowsAdded), "RowsAdded", fn)
    [<CustomOperation("RowsRemoved")>] member inline this.RowsRemoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowsRemoved), "RowsRemoved", fn)
    [<CustomOperation("RowStateChanged")>] member inline this.RowStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowStateChanged), "RowStateChanged", fn)
    [<CustomOperation("RowUnshared")>] member inline this.RowUnshared ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowUnshared), "RowUnshared", fn)
    [<CustomOperation("RowValidated")>] member inline this.RowValidated ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowValidated), "RowValidated", fn)
    [<CustomOperation("RowValidating")>] member inline this.RowValidating ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RowValidating), "RowValidating", fn)
    [<CustomOperation("Scroll")>] member inline this.Scroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Scroll), "Scroll", fn)
    [<CustomOperation("SelectionChanged")>] member inline this.SelectionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionChanged), "SelectionChanged", fn)
    [<CustomOperation("SortCompare")>] member inline this.SortCompare ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SortCompare), "SortCompare", fn)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), "Sorted", fn)
    [<CustomOperation("StyleChanged")>] member inline this.StyleChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StyleChanged), "StyleChanged", fn)
    [<CustomOperation("UserAddedRow")>] member inline this.UserAddedRow ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.UserAddedRow), "UserAddedRow", fn)
    [<CustomOperation("UserDeletedRow")>] member inline this.UserDeletedRow ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.UserDeletedRow), "UserDeletedRow", fn)
    [<CustomOperation("UserDeletingRow")>] member inline this.UserDeletingRow ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.UserDeletingRow), "UserDeletingRow", fn)
                

type DateTimePickerBuilder<'Element when 'Element :> System.Windows.Forms.DateTimePicker>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("CalendarForeColor")>] member inline this.CalendarForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarForeColor), (fun ctx x -> ctx.Element.CalendarForeColor <- x), x)
    [<CustomOperation("CalendarForeColor")>] member inline this.CalendarForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarForeColor), (fun ctx x -> ctx.Element.CalendarForeColor <- x), x)
    [<CustomOperation("CalendarFont")>] member inline this.CalendarFont ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarFont), (fun ctx x -> ctx.Element.CalendarFont <- x), x)
    [<CustomOperation("CalendarFont")>] member inline this.CalendarFont ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarFont), (fun ctx x -> ctx.Element.CalendarFont <- x), x)
    [<CustomOperation("CalendarTitleBackColor")>] member inline this.CalendarTitleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTitleBackColor), (fun ctx x -> ctx.Element.CalendarTitleBackColor <- x), x)
    [<CustomOperation("CalendarTitleBackColor")>] member inline this.CalendarTitleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTitleBackColor), (fun ctx x -> ctx.Element.CalendarTitleBackColor <- x), x)
    [<CustomOperation("CalendarTitleForeColor")>] member inline this.CalendarTitleForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTitleForeColor), (fun ctx x -> ctx.Element.CalendarTitleForeColor <- x), x)
    [<CustomOperation("CalendarTitleForeColor")>] member inline this.CalendarTitleForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTitleForeColor), (fun ctx x -> ctx.Element.CalendarTitleForeColor <- x), x)
    [<CustomOperation("CalendarTrailingForeColor")>] member inline this.CalendarTrailingForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTrailingForeColor), (fun ctx x -> ctx.Element.CalendarTrailingForeColor <- x), x)
    [<CustomOperation("CalendarTrailingForeColor")>] member inline this.CalendarTrailingForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarTrailingForeColor), (fun ctx x -> ctx.Element.CalendarTrailingForeColor <- x), x)
    [<CustomOperation("CalendarMonthBackground")>] member inline this.CalendarMonthBackground ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarMonthBackground), (fun ctx x -> ctx.Element.CalendarMonthBackground <- x), x)
    [<CustomOperation("CalendarMonthBackground")>] member inline this.CalendarMonthBackground ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarMonthBackground), (fun ctx x -> ctx.Element.CalendarMonthBackground <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("Checked")>] member inline this.Checked ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Checked), (fun ctx x -> ctx.Element.Checked <- x), x)
    [<CustomOperation("CustomFormat")>] member inline this.CustomFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CustomFormat), (fun ctx x -> ctx.Element.CustomFormat <- x), x)
    [<CustomOperation("CustomFormat")>] member inline this.CustomFormat ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CustomFormat), (fun ctx x -> ctx.Element.CustomFormat <- x), x)
    [<CustomOperation("DropDownAlign")>] member inline this.DropDownAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.LeftRightAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownAlign), (fun ctx x -> ctx.Element.DropDownAlign <- x), x)
    [<CustomOperation("DropDownAlign")>] member inline this.DropDownAlign ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DropDownAlign), (fun ctx x -> ctx.Element.DropDownAlign <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Format")>] member inline this.Format ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DateTimePickerFormat) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Format), (fun ctx x -> ctx.Element.Format <- x), x)
    [<CustomOperation("Format")>] member inline this.Format ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Format), (fun ctx x -> ctx.Element.Format <- x), x)
    [<CustomOperation("MaxDate")>] member inline this.MaxDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDate), (fun ctx x -> ctx.Element.MaxDate <- x), x)
    [<CustomOperation("MaxDate")>] member inline this.MaxDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDate), (fun ctx x -> ctx.Element.MaxDate <- x), x)
    [<CustomOperation("MinDate")>] member inline this.MinDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinDate), (fun ctx x -> ctx.Element.MinDate <- x), x)
    [<CustomOperation("MinDate")>] member inline this.MinDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinDate), (fun ctx x -> ctx.Element.MinDate <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("ShowCheckBox")>] member inline this.ShowCheckBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCheckBox), (fun ctx x -> ctx.Element.ShowCheckBox <- x), x)
    [<CustomOperation("ShowCheckBox")>] member inline this.ShowCheckBox ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowCheckBox), (fun ctx x -> ctx.Element.ShowCheckBox <- x), x)
    [<CustomOperation("ShowUpDown")>] member inline this.ShowUpDown ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowUpDown), (fun ctx x -> ctx.Element.ShowUpDown <- x), x)
    [<CustomOperation("ShowUpDown")>] member inline this.ShowUpDown ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowUpDown), (fun ctx x -> ctx.Element.ShowUpDown <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)

    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("FormatChanged")>] member inline this.FormatChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FormatChanged), "FormatChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("CloseUp")>] member inline this.CloseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CloseUp), "CloseUp", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("ValueChanged")>] member inline this.ValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueChanged), "ValueChanged", fn)
    [<CustomOperation("DropDown")>] member inline this.DropDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DropDown), "DropDown", fn)
                

type GroupBoxBuilder<'Element when 'Element :> System.Windows.Forms.GroupBox>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AutoSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("AutoSizeMode")>] member inline this.AutoSizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeMode), (fun ctx x -> ctx.Element.AutoSizeMode <- x), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.FlatStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("FlatStyle")>] member inline this.FlatStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FlatStyle), (fun ctx x -> ctx.Element.FlatStyle <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)
    [<CustomOperation("UseCompatibleTextRendering")>] member inline this.UseCompatibleTextRendering ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleTextRendering), (fun ctx x -> ctx.Element.UseCompatibleTextRendering <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("MouseDown")>] member inline this.MouseDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDown), "MouseDown", fn)
    [<CustomOperation("MouseUp")>] member inline this.MouseUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseUp), "MouseUp", fn)
    [<CustomOperation("MouseMove")>] member inline this.MouseMove ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseMove), "MouseMove", fn)
    [<CustomOperation("MouseEnter")>] member inline this.MouseEnter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseEnter), "MouseEnter", fn)
    [<CustomOperation("MouseLeave")>] member inline this.MouseLeave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseLeave), "MouseLeave", fn)
                

type MonthCalendarBuilder<'Element when 'Element :> System.Windows.Forms.MonthCalendar>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AnnuallyBoldedDates")>] member inline this.AnnuallyBoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AnnuallyBoldedDates), (fun ctx x -> ctx.Element.AnnuallyBoldedDates <- x), x)
    [<CustomOperation("AnnuallyBoldedDates")>] member inline this.AnnuallyBoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AnnuallyBoldedDates), (fun ctx x -> ctx.Element.AnnuallyBoldedDates <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BoldedDates")>] member inline this.BoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BoldedDates), (fun ctx x -> ctx.Element.BoldedDates <- x), x)
    [<CustomOperation("BoldedDates")>] member inline this.BoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BoldedDates), (fun ctx x -> ctx.Element.BoldedDates <- x), x)
    [<CustomOperation("CalendarDimensions")>] member inline this.CalendarDimensions ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarDimensions), (fun ctx x -> ctx.Element.CalendarDimensions <- x), x)
    [<CustomOperation("CalendarDimensions")>] member inline this.CalendarDimensions ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CalendarDimensions), (fun ctx x -> ctx.Element.CalendarDimensions <- x), x)
    [<CustomOperation("FirstDayOfWeek")>] member inline this.FirstDayOfWeek ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Day) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDayOfWeek), (fun ctx x -> ctx.Element.FirstDayOfWeek <- x), x)
    [<CustomOperation("FirstDayOfWeek")>] member inline this.FirstDayOfWeek ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FirstDayOfWeek), (fun ctx x -> ctx.Element.FirstDayOfWeek <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("MaxDate")>] member inline this.MaxDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDate), (fun ctx x -> ctx.Element.MaxDate <- x), x)
    [<CustomOperation("MaxDate")>] member inline this.MaxDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxDate), (fun ctx x -> ctx.Element.MaxDate <- x), x)
    [<CustomOperation("MaxSelectionCount")>] member inline this.MaxSelectionCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MaxSelectionCount), (fun ctx x -> ctx.Element.MaxSelectionCount <- x), x)
    [<CustomOperation("MaxSelectionCount")>] member inline this.MaxSelectionCount ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MaxSelectionCount), (fun ctx x -> ctx.Element.MaxSelectionCount <- x), x)
    [<CustomOperation("MinDate")>] member inline this.MinDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinDate), (fun ctx x -> ctx.Element.MinDate <- x), x)
    [<CustomOperation("MinDate")>] member inline this.MinDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinDate), (fun ctx x -> ctx.Element.MinDate <- x), x)
    [<CustomOperation("MonthlyBoldedDates")>] member inline this.MonthlyBoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime[]) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MonthlyBoldedDates), (fun ctx x -> ctx.Element.MonthlyBoldedDates <- x), x)
    [<CustomOperation("MonthlyBoldedDates")>] member inline this.MonthlyBoldedDates ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MonthlyBoldedDates), (fun ctx x -> ctx.Element.MonthlyBoldedDates <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("ScrollChange")>] member inline this.ScrollChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollChange), (fun ctx x -> ctx.Element.ScrollChange <- x), x)
    [<CustomOperation("ScrollChange")>] member inline this.ScrollChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ScrollChange), (fun ctx x -> ctx.Element.ScrollChange <- x), x)
    [<CustomOperation("SelectionEnd")>] member inline this.SelectionEnd ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionEnd), (fun ctx x -> ctx.Element.SelectionEnd <- x), x)
    [<CustomOperation("SelectionEnd")>] member inline this.SelectionEnd ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionEnd), (fun ctx x -> ctx.Element.SelectionEnd <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("SelectionStart")>] member inline this.SelectionStart ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionStart), (fun ctx x -> ctx.Element.SelectionStart <- x), x)
    [<CustomOperation("SelectionRange")>] member inline this.SelectionRange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SelectionRange) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionRange), (fun ctx x -> ctx.Element.SelectionRange <- x), x)
    [<CustomOperation("SelectionRange")>] member inline this.SelectionRange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectionRange), (fun ctx x -> ctx.Element.SelectionRange <- x), x)
    [<CustomOperation("ShowToday")>] member inline this.ShowToday ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowToday), (fun ctx x -> ctx.Element.ShowToday <- x), x)
    [<CustomOperation("ShowToday")>] member inline this.ShowToday ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowToday), (fun ctx x -> ctx.Element.ShowToday <- x), x)
    [<CustomOperation("ShowTodayCircle")>] member inline this.ShowTodayCircle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowTodayCircle), (fun ctx x -> ctx.Element.ShowTodayCircle <- x), x)
    [<CustomOperation("ShowTodayCircle")>] member inline this.ShowTodayCircle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowTodayCircle), (fun ctx x -> ctx.Element.ShowTodayCircle <- x), x)
    [<CustomOperation("ShowWeekNumbers")>] member inline this.ShowWeekNumbers ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowWeekNumbers), (fun ctx x -> ctx.Element.ShowWeekNumbers <- x), x)
    [<CustomOperation("ShowWeekNumbers")>] member inline this.ShowWeekNumbers ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowWeekNumbers), (fun ctx x -> ctx.Element.ShowWeekNumbers <- x), x)
    [<CustomOperation("SingleMonthSizeEx")>] member inline this.SingleMonthSizeEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SingleMonthSize), x)
    [<CustomOperation("SingleMonthSizeEx'")>] member inline this.SingleMonthSizeEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SingleMonthSize), x)
    [<CustomOperation("SingleMonthSize")>] member inline this.SingleMonthSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SingleMonthSize), x)
    [<CustomOperation("SingleMonthSize'")>] member inline this.SingleMonthSize' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SingleMonthSize), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Size")>] member inline this.Size ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Size), (fun ctx x -> ctx.Element.Size <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TodayDate")>] member inline this.TodayDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.DateTime) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TodayDate), (fun ctx x -> ctx.Element.TodayDate <- x), x)
    [<CustomOperation("TodayDate")>] member inline this.TodayDate ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TodayDate), (fun ctx x -> ctx.Element.TodayDate <- x), x)
    [<CustomOperation("TitleBackColor")>] member inline this.TitleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TitleBackColor), (fun ctx x -> ctx.Element.TitleBackColor <- x), x)
    [<CustomOperation("TitleBackColor")>] member inline this.TitleBackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TitleBackColor), (fun ctx x -> ctx.Element.TitleBackColor <- x), x)
    [<CustomOperation("TitleForeColor")>] member inline this.TitleForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TitleForeColor), (fun ctx x -> ctx.Element.TitleForeColor <- x), x)
    [<CustomOperation("TitleForeColor")>] member inline this.TitleForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TitleForeColor), (fun ctx x -> ctx.Element.TitleForeColor <- x), x)
    [<CustomOperation("TrailingForeColor")>] member inline this.TrailingForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TrailingForeColor), (fun ctx x -> ctx.Element.TrailingForeColor <- x), x)
    [<CustomOperation("TrailingForeColor")>] member inline this.TrailingForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TrailingForeColor), (fun ctx x -> ctx.Element.TrailingForeColor <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("DateChanged")>] member inline this.DateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DateChanged), "DateChanged", fn)
    [<CustomOperation("DateSelected")>] member inline this.DateSelected ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DateSelected), "DateSelected", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
                

type ListViewBuilder<'Element when 'Element :> System.Windows.Forms.ListView>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("Activation")>] member inline this.Activation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ItemActivation) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Activation), (fun ctx x -> ctx.Element.Activation <- x), x)
    [<CustomOperation("Activation")>] member inline this.Activation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Activation), (fun ctx x -> ctx.Element.Activation <- x), x)
    [<CustomOperation("Alignment")>] member inline this.Alignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ListViewAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Alignment), (fun ctx x -> ctx.Element.Alignment <- x), x)
    [<CustomOperation("Alignment")>] member inline this.Alignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Alignment), (fun ctx x -> ctx.Element.Alignment <- x), x)
    [<CustomOperation("AllowColumnReorder")>] member inline this.AllowColumnReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowColumnReorder), (fun ctx x -> ctx.Element.AllowColumnReorder <- x), x)
    [<CustomOperation("AllowColumnReorder")>] member inline this.AllowColumnReorder ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowColumnReorder), (fun ctx x -> ctx.Element.AllowColumnReorder <- x), x)
    [<CustomOperation("AutoArrange")>] member inline this.AutoArrange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoArrange), (fun ctx x -> ctx.Element.AutoArrange <- x), x)
    [<CustomOperation("AutoArrange")>] member inline this.AutoArrange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoArrange), (fun ctx x -> ctx.Element.AutoArrange <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageTiled")>] member inline this.BackgroundImageTiled ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageTiled), (fun ctx x -> ctx.Element.BackgroundImageTiled <- x), x)
    [<CustomOperation("BackgroundImageTiled")>] member inline this.BackgroundImageTiled ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageTiled), (fun ctx x -> ctx.Element.BackgroundImageTiled <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("CheckBoxes")>] member inline this.CheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckBoxes), (fun ctx x -> ctx.Element.CheckBoxes <- x), x)
    [<CustomOperation("CheckBoxes")>] member inline this.CheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckBoxes), (fun ctx x -> ctx.Element.CheckBoxes <- x), x)
    [<CustomOperation("CheckedIndicesEx")>] member inline this.CheckedIndicesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndicesEx'")>] member inline this.CheckedIndicesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndices")>] member inline this.CheckedIndices ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedIndices'")>] member inline this.CheckedIndices' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CheckedIndices), x)
    [<CustomOperation("CheckedItemsEx")>] member inline this.CheckedItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItemsEx'")>] member inline this.CheckedItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItems")>] member inline this.CheckedItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("CheckedItems'")>] member inline this.CheckedItems' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.CheckedItems), x)
    [<CustomOperation("ColumnsEx")>] member inline this.ColumnsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Columns), x)
    [<CustomOperation("ColumnsEx'")>] member inline this.ColumnsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Columns), x)
    [<CustomOperation("Columns")>] member inline this.Columns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Columns), x)
    [<CustomOperation("Columns'")>] member inline this.Columns' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Columns), x)
    [<CustomOperation("FocusedItem")>] member inline this.FocusedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ListViewItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FocusedItem), (fun ctx x -> ctx.Element.FocusedItem <- x), x)
    [<CustomOperation("FocusedItem")>] member inline this.FocusedItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FocusedItem), (fun ctx x -> ctx.Element.FocusedItem <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("FullRowSelect")>] member inline this.FullRowSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FullRowSelect), (fun ctx x -> ctx.Element.FullRowSelect <- x), x)
    [<CustomOperation("FullRowSelect")>] member inline this.FullRowSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FullRowSelect), (fun ctx x -> ctx.Element.FullRowSelect <- x), x)
    [<CustomOperation("GridLines")>] member inline this.GridLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GridLines), (fun ctx x -> ctx.Element.GridLines <- x), x)
    [<CustomOperation("GridLines")>] member inline this.GridLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GridLines), (fun ctx x -> ctx.Element.GridLines <- x), x)
    #if NET6_0
    [<CustomOperation("GroupImageList")>] member inline this.GroupImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.GroupImageList), (fun ctx x -> ctx.Element.GroupImageList <- x), x)
    [<CustomOperation("GroupImageList")>] member inline this.GroupImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.GroupImageList), (fun ctx x -> ctx.Element.GroupImageList <- x), x)
    #endif
    [<CustomOperation("GroupsEx")>] member inline this.GroupsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Groups), x)
    [<CustomOperation("GroupsEx'")>] member inline this.GroupsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Groups), x)
    [<CustomOperation("Groups")>] member inline this.Groups ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Groups), x)
    [<CustomOperation("Groups'")>] member inline this.Groups' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Groups), x)
    [<CustomOperation("HeaderStyle")>] member inline this.HeaderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ColumnHeaderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HeaderStyle), (fun ctx x -> ctx.Element.HeaderStyle <- x), x)
    [<CustomOperation("HeaderStyle")>] member inline this.HeaderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HeaderStyle), (fun ctx x -> ctx.Element.HeaderStyle <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("HotTracking")>] member inline this.HotTracking ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HotTracking), (fun ctx x -> ctx.Element.HotTracking <- x), x)
    [<CustomOperation("HotTracking")>] member inline this.HotTracking ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HotTracking), (fun ctx x -> ctx.Element.HotTracking <- x), x)
    [<CustomOperation("HoverSelection")>] member inline this.HoverSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HoverSelection), (fun ctx x -> ctx.Element.HoverSelection <- x), x)
    [<CustomOperation("HoverSelection")>] member inline this.HoverSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HoverSelection), (fun ctx x -> ctx.Element.HoverSelection <- x), x)
    [<CustomOperation("InsertionMarkEx")>] member inline this.InsertionMarkEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.InsertionMark), x)
    [<CustomOperation("InsertionMarkEx'")>] member inline this.InsertionMarkEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.InsertionMark), x)
    [<CustomOperation("InsertionMark")>] member inline this.InsertionMark ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.InsertionMark), x)
    [<CustomOperation("InsertionMark'")>] member inline this.InsertionMark' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.InsertionMark), x)
    [<CustomOperation("ItemsEx")>] member inline this.ItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("ItemsEx'")>] member inline this.ItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items")>] member inline this.Items ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("Items'")>] member inline this.Items' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Items), x)
    [<CustomOperation("LabelEdit")>] member inline this.LabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LabelEdit), (fun ctx x -> ctx.Element.LabelEdit <- x), x)
    [<CustomOperation("LabelEdit")>] member inline this.LabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LabelEdit), (fun ctx x -> ctx.Element.LabelEdit <- x), x)
    [<CustomOperation("LabelWrap")>] member inline this.LabelWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LabelWrap), (fun ctx x -> ctx.Element.LabelWrap <- x), x)
    [<CustomOperation("LabelWrap")>] member inline this.LabelWrap ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LabelWrap), (fun ctx x -> ctx.Element.LabelWrap <- x), x)
    [<CustomOperation("LargeImageList")>] member inline this.LargeImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LargeImageList), (fun ctx x -> ctx.Element.LargeImageList <- x), x)
    [<CustomOperation("LargeImageList")>] member inline this.LargeImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LargeImageList), (fun ctx x -> ctx.Element.LargeImageList <- x), x)
    [<CustomOperation("ListViewItemSorter")>] member inline this.ListViewItemSorter ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Collections.IComparer) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ListViewItemSorter), (fun ctx x -> ctx.Element.ListViewItemSorter <- x), x)
    [<CustomOperation("ListViewItemSorter")>] member inline this.ListViewItemSorter ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ListViewItemSorter), (fun ctx x -> ctx.Element.ListViewItemSorter <- x), x)
    [<CustomOperation("MultiSelect")>] member inline this.MultiSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MultiSelect), (fun ctx x -> ctx.Element.MultiSelect <- x), x)
    [<CustomOperation("MultiSelect")>] member inline this.MultiSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MultiSelect), (fun ctx x -> ctx.Element.MultiSelect <- x), x)
    [<CustomOperation("OwnerDraw")>] member inline this.OwnerDraw ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.OwnerDraw), (fun ctx x -> ctx.Element.OwnerDraw <- x), x)
    [<CustomOperation("OwnerDraw")>] member inline this.OwnerDraw ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.OwnerDraw), (fun ctx x -> ctx.Element.OwnerDraw <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("Scrollable")>] member inline this.Scrollable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Scrollable), (fun ctx x -> ctx.Element.Scrollable <- x), x)
    [<CustomOperation("Scrollable")>] member inline this.Scrollable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Scrollable), (fun ctx x -> ctx.Element.Scrollable <- x), x)
    [<CustomOperation("SelectedIndicesEx")>] member inline this.SelectedIndicesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndicesEx'")>] member inline this.SelectedIndicesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndices")>] member inline this.SelectedIndices ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedIndices'")>] member inline this.SelectedIndices' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedIndices), x)
    [<CustomOperation("SelectedItemsEx")>] member inline this.SelectedItemsEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItemsEx'")>] member inline this.SelectedItemsEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItems")>] member inline this.SelectedItems ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("SelectedItems'")>] member inline this.SelectedItems' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.SelectedItems), x)
    [<CustomOperation("ShowGroups")>] member inline this.ShowGroups ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowGroups), (fun ctx x -> ctx.Element.ShowGroups <- x), x)
    [<CustomOperation("ShowGroups")>] member inline this.ShowGroups ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowGroups), (fun ctx x -> ctx.Element.ShowGroups <- x), x)
    [<CustomOperation("SmallImageList")>] member inline this.SmallImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SmallImageList), (fun ctx x -> ctx.Element.SmallImageList <- x), x)
    [<CustomOperation("SmallImageList")>] member inline this.SmallImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SmallImageList), (fun ctx x -> ctx.Element.SmallImageList <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("ShowItemToolTips")>] member inline this.ShowItemToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowItemToolTips), (fun ctx x -> ctx.Element.ShowItemToolTips <- x), x)
    [<CustomOperation("Sorting")>] member inline this.Sorting ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.SortOrder) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorting), (fun ctx x -> ctx.Element.Sorting <- x), x)
    [<CustomOperation("Sorting")>] member inline this.Sorting ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Sorting), (fun ctx x -> ctx.Element.Sorting <- x), x)
    [<CustomOperation("StateImageList")>] member inline this.StateImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StateImageList), (fun ctx x -> ctx.Element.StateImageList <- x), x)
    [<CustomOperation("StateImageList")>] member inline this.StateImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StateImageList), (fun ctx x -> ctx.Element.StateImageList <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TileSize")>] member inline this.TileSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TileSize), (fun ctx x -> ctx.Element.TileSize <- x), x)
    [<CustomOperation("TileSize")>] member inline this.TileSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TileSize), (fun ctx x -> ctx.Element.TileSize <- x), x)
    [<CustomOperation("TopItem")>] member inline this.TopItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ListViewItem) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopItem), (fun ctx x -> ctx.Element.TopItem <- x), x)
    [<CustomOperation("TopItem")>] member inline this.TopItem ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopItem), (fun ctx x -> ctx.Element.TopItem <- x), x)
    [<CustomOperation("UseCompatibleStateImageBehavior")>] member inline this.UseCompatibleStateImageBehavior ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleStateImageBehavior), (fun ctx x -> ctx.Element.UseCompatibleStateImageBehavior <- x), x)
    [<CustomOperation("UseCompatibleStateImageBehavior")>] member inline this.UseCompatibleStateImageBehavior ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseCompatibleStateImageBehavior), (fun ctx x -> ctx.Element.UseCompatibleStateImageBehavior <- x), x)
    [<CustomOperation("View")>] member inline this.View ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.View) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.View), (fun ctx x -> ctx.Element.View <- x), x)
    [<CustomOperation("View")>] member inline this.View ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.View), (fun ctx x -> ctx.Element.View <- x), x)
    [<CustomOperation("VirtualListSize")>] member inline this.VirtualListSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualListSize), (fun ctx x -> ctx.Element.VirtualListSize <- x), x)
    [<CustomOperation("VirtualListSize")>] member inline this.VirtualListSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualListSize), (fun ctx x -> ctx.Element.VirtualListSize <- x), x)
    [<CustomOperation("VirtualMode")>] member inline this.VirtualMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualMode), (fun ctx x -> ctx.Element.VirtualMode <- x), x)
    [<CustomOperation("VirtualMode")>] member inline this.VirtualMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualMode), (fun ctx x -> ctx.Element.VirtualMode <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)

    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("AfterLabelEdit")>] member inline this.AfterLabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterLabelEdit), "AfterLabelEdit", fn)
    [<CustomOperation("BeforeLabelEdit")>] member inline this.BeforeLabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeLabelEdit), "BeforeLabelEdit", fn)
    [<CustomOperation("CacheVirtualItems")>] member inline this.CacheVirtualItems ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CacheVirtualItems), "CacheVirtualItems", fn)
    [<CustomOperation("ColumnClick")>] member inline this.ColumnClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnClick), "ColumnClick", fn)
    #if NET6_0
    [<CustomOperation("GroupTaskLinkClick")>] member inline this.GroupTaskLinkClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GroupTaskLinkClick), "GroupTaskLinkClick", fn)
    #endif
    [<CustomOperation("ColumnReordered")>] member inline this.ColumnReordered ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnReordered), "ColumnReordered", fn)
    [<CustomOperation("ColumnWidthChanged")>] member inline this.ColumnWidthChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnWidthChanged), "ColumnWidthChanged", fn)
    [<CustomOperation("ColumnWidthChanging")>] member inline this.ColumnWidthChanging ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ColumnWidthChanging), "ColumnWidthChanging", fn)
    [<CustomOperation("DrawColumnHeader")>] member inline this.DrawColumnHeader ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawColumnHeader), "DrawColumnHeader", fn)
    [<CustomOperation("DrawItem")>] member inline this.DrawItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawItem), "DrawItem", fn)
    [<CustomOperation("DrawSubItem")>] member inline this.DrawSubItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawSubItem), "DrawSubItem", fn)
    [<CustomOperation("ItemActivate")>] member inline this.ItemActivate ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemActivate), "ItemActivate", fn)
    [<CustomOperation("ItemCheck")>] member inline this.ItemCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemCheck), "ItemCheck", fn)
    [<CustomOperation("ItemChecked")>] member inline this.ItemChecked ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemChecked), "ItemChecked", fn)
    [<CustomOperation("ItemDrag")>] member inline this.ItemDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemDrag), "ItemDrag", fn)
    [<CustomOperation("ItemMouseHover")>] member inline this.ItemMouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemMouseHover), "ItemMouseHover", fn)
    [<CustomOperation("ItemSelectionChanged")>] member inline this.ItemSelectionChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemSelectionChanged), "ItemSelectionChanged", fn)
    #if NET6_0
    [<CustomOperation("GroupCollapsedStateChanged")>] member inline this.GroupCollapsedStateChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.GroupCollapsedStateChanged), "GroupCollapsedStateChanged", fn)
    #endif
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("RetrieveVirtualItem")>] member inline this.RetrieveVirtualItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RetrieveVirtualItem), "RetrieveVirtualItem", fn)
    [<CustomOperation("SearchForVirtualItem")>] member inline this.SearchForVirtualItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SearchForVirtualItem), "SearchForVirtualItem", fn)
    [<CustomOperation("SelectedIndexChanged")>] member inline this.SelectedIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndexChanged), "SelectedIndexChanged", fn)
    [<CustomOperation("VirtualItemsSelectionRangeChanged")>] member inline this.VirtualItemsSelectionRangeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.VirtualItemsSelectionRangeChanged), "VirtualItemsSelectionRangeChanged", fn)
                

type MdiClientBuilder() =
    inherit ControlBuilder<System.Windows.Forms.MdiClient>()

    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("MdiChildrenEx")>] member inline this.MdiChildrenEx ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildrenEx'")>] member inline this.MdiChildrenEx' ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildren")>] member inline this.MdiChildren ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.MdiChildren), x)
    [<CustomOperation("MdiChildren'")>] member inline this.MdiChildren' ([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.MdiChildren), x)

                

type PictureBoxBuilder<'Element when 'Element :> System.Windows.Forms.PictureBox>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("ErrorImage")>] member inline this.ErrorImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ErrorImage), (fun ctx x -> ctx.Element.ErrorImage <- x), x)
    [<CustomOperation("ErrorImage")>] member inline this.ErrorImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ErrorImage), (fun ctx x -> ctx.Element.ErrorImage <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("Image")>] member inline this.Image ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Image), (fun ctx x -> ctx.Element.Image <- x), x)
    [<CustomOperation("ImageLocation")>] member inline this.ImageLocation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageLocation), (fun ctx x -> ctx.Element.ImageLocation <- x), x)
    [<CustomOperation("ImageLocation")>] member inline this.ImageLocation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageLocation), (fun ctx x -> ctx.Element.ImageLocation <- x), x)
    [<CustomOperation("InitialImage")>] member inline this.InitialImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.InitialImage), (fun ctx x -> ctx.Element.InitialImage <- x), x)
    [<CustomOperation("InitialImage")>] member inline this.InitialImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.InitialImage), (fun ctx x -> ctx.Element.InitialImage <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("SizeMode")>] member inline this.SizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.PictureBoxSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeMode), (fun ctx x -> ctx.Element.SizeMode <- x), x)
    [<CustomOperation("SizeMode")>] member inline this.SizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SizeMode), (fun ctx x -> ctx.Element.SizeMode <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("TabIndex")>] member inline this.TabIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndex), (fun ctx x -> ctx.Element.TabIndex <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("WaitOnLoad")>] member inline this.WaitOnLoad ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.WaitOnLoad), (fun ctx x -> ctx.Element.WaitOnLoad <- x), x)
    [<CustomOperation("WaitOnLoad")>] member inline this.WaitOnLoad ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.WaitOnLoad), (fun ctx x -> ctx.Element.WaitOnLoad <- x), x)

    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("LoadCompleted")>] member inline this.LoadCompleted ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LoadCompleted), "LoadCompleted", fn)
    [<CustomOperation("LoadProgressChanged")>] member inline this.LoadProgressChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.LoadProgressChanged), "LoadProgressChanged", fn)
    [<CustomOperation("RightToLeftChanged")>] member inline this.RightToLeftChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftChanged), "RightToLeftChanged", fn)
    [<CustomOperation("SizeModeChanged")>] member inline this.SizeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeModeChanged), "SizeModeChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TabIndexChanged")>] member inline this.TabIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabIndexChanged), "TabIndexChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
                

type PrintPreviewControlBuilder<'Element when 'Element :> System.Windows.Forms.PrintPreviewControl>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("UseAntiAlias")>] member inline this.UseAntiAlias ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.UseAntiAlias), (fun ctx x -> ctx.Element.UseAntiAlias <- x), x)
    [<CustomOperation("UseAntiAlias")>] member inline this.UseAntiAlias ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.UseAntiAlias), (fun ctx x -> ctx.Element.UseAntiAlias <- x), x)
    [<CustomOperation("AutoZoom")>] member inline this.AutoZoom ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoZoom), (fun ctx x -> ctx.Element.AutoZoom <- x), x)
    [<CustomOperation("AutoZoom")>] member inline this.AutoZoom ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoZoom), (fun ctx x -> ctx.Element.AutoZoom <- x), x)
    [<CustomOperation("Document")>] member inline this.Document ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Printing.PrintDocument) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Document), (fun ctx x -> ctx.Element.Document <- x), x)
    [<CustomOperation("Document")>] member inline this.Document ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Document), (fun ctx x -> ctx.Element.Document <- x), x)
    [<CustomOperation("Columns")>] member inline this.Columns ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Columns), (fun ctx x -> ctx.Element.Columns <- x), x)
    [<CustomOperation("Columns")>] member inline this.Columns ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Columns), (fun ctx x -> ctx.Element.Columns <- x), x)
    [<CustomOperation("Rows")>] member inline this.Rows ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Rows), (fun ctx x -> ctx.Element.Rows <- x), x)
    [<CustomOperation("Rows")>] member inline this.Rows ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Rows), (fun ctx x -> ctx.Element.Rows <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.RightToLeft) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("RightToLeft")>] member inline this.RightToLeft ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeft), (fun ctx x -> ctx.Element.RightToLeft <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("StartPage")>] member inline this.StartPage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StartPage), (fun ctx x -> ctx.Element.StartPage <- x), x)
    [<CustomOperation("StartPage")>] member inline this.StartPage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StartPage), (fun ctx x -> ctx.Element.StartPage <- x), x)
    [<CustomOperation("Zoom")>] member inline this.Zoom ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Double) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Zoom), (fun ctx x -> ctx.Element.Zoom <- x), x)
    [<CustomOperation("Zoom")>] member inline this.Zoom ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Zoom), (fun ctx x -> ctx.Element.Zoom <- x), x)

    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("StartPageChanged")>] member inline this.StartPageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.StartPageChanged), "StartPageChanged", fn)
                

type ProgressBarBuilder<'Element when 'Element :> System.Windows.Forms.ProgressBar>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("Style")>] member inline this.Style ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ProgressBarStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Style), (fun ctx x -> ctx.Element.Style <- x), x)
    [<CustomOperation("Style")>] member inline this.Style ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Style), (fun ctx x -> ctx.Element.Style <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("CausesValidation")>] member inline this.CausesValidation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidation), (fun ctx x -> ctx.Element.CausesValidation <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("MarqueeAnimationSpeed")>] member inline this.MarqueeAnimationSpeed ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MarqueeAnimationSpeed), (fun ctx x -> ctx.Element.MarqueeAnimationSpeed <- x), x)
    [<CustomOperation("MarqueeAnimationSpeed")>] member inline this.MarqueeAnimationSpeed ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MarqueeAnimationSpeed), (fun ctx x -> ctx.Element.MarqueeAnimationSpeed <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("Step")>] member inline this.Step ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Step), (fun ctx x -> ctx.Element.Step <- x), x)
    [<CustomOperation("Step")>] member inline this.Step ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Step), (fun ctx x -> ctx.Element.Step <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("CausesValidationChanged")>] member inline this.CausesValidationChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.CausesValidationChanged), "CausesValidationChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
                

type SplitterBuilder<'Element when 'Element :> System.Windows.Forms.Splitter>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.AnchorStyles) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("Anchor")>] member inline this.Anchor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Anchor), (fun ctx x -> ctx.Element.Anchor <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("AllowDrop")>] member inline this.AllowDrop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AllowDrop), (fun ctx x -> ctx.Element.AllowDrop <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.DockStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("Dock")>] member inline this.Dock ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Dock), (fun ctx x -> ctx.Element.Dock <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("MinExtra")>] member inline this.MinExtra ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinExtra), (fun ctx x -> ctx.Element.MinExtra <- x), x)
    [<CustomOperation("MinExtra")>] member inline this.MinExtra ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinExtra), (fun ctx x -> ctx.Element.MinExtra <- x), x)
    [<CustomOperation("MinSize")>] member inline this.MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.MinSize), (fun ctx x -> ctx.Element.MinSize <- x), x)
    [<CustomOperation("MinSize")>] member inline this.MinSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.MinSize), (fun ctx x -> ctx.Element.MinSize <- x), x)
    [<CustomOperation("SplitPosition")>] member inline this.SplitPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitPosition), (fun ctx x -> ctx.Element.SplitPosition <- x), x)
    [<CustomOperation("SplitPosition")>] member inline this.SplitPosition ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SplitPosition), (fun ctx x -> ctx.Element.SplitPosition <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("TabStop")>] member inline this.TabStop ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TabStop), (fun ctx x -> ctx.Element.TabStop <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("TabStopChanged")>] member inline this.TabStopChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TabStopChanged), "TabStopChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Enter")>] member inline this.Enter ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Enter), "Enter", fn)
    [<CustomOperation("KeyUp")>] member inline this.KeyUp ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyUp), "KeyUp", fn)
    [<CustomOperation("KeyDown")>] member inline this.KeyDown ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyDown), "KeyDown", fn)
    [<CustomOperation("KeyPress")>] member inline this.KeyPress ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.KeyPress), "KeyPress", fn)
    [<CustomOperation("Leave")>] member inline this.Leave ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Leave), "Leave", fn)
    [<CustomOperation("SplitterMoving")>] member inline this.SplitterMoving ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterMoving), "SplitterMoving", fn)
    [<CustomOperation("SplitterMoved")>] member inline this.SplitterMoved ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SplitterMoved), "SplitterMoved", fn)
                

type TabControlBuilder<'Element when 'Element :> System.Windows.Forms.TabControl>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("Alignment")>] member inline this.Alignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TabAlignment) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Alignment), (fun ctx x -> ctx.Element.Alignment <- x), x)
    [<CustomOperation("Alignment")>] member inline this.Alignment ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Alignment), (fun ctx x -> ctx.Element.Alignment <- x), x)
    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TabAppearance) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("Appearance")>] member inline this.Appearance ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Appearance), (fun ctx x -> ctx.Element.Appearance <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("DisplayRectangleEx")>] member inline this.DisplayRectangleEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangleEx'")>] member inline this.DisplayRectangleEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle")>] member inline this.DisplayRectangle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DisplayRectangle'")>] member inline this.DisplayRectangle' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.DisplayRectangle), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TabDrawMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("HotTrack")>] member inline this.HotTrack ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HotTrack), (fun ctx x -> ctx.Element.HotTrack <- x), x)
    [<CustomOperation("HotTrack")>] member inline this.HotTrack ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HotTrack), (fun ctx x -> ctx.Element.HotTrack <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ItemSize")>] member inline this.ItemSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Size) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemSize), (fun ctx x -> ctx.Element.ItemSize <- x), x)
    [<CustomOperation("ItemSize")>] member inline this.ItemSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ItemSize), (fun ctx x -> ctx.Element.ItemSize <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Multiline")>] member inline this.Multiline ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Multiline), (fun ctx x -> ctx.Element.Multiline <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Point) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)
    [<CustomOperation("SelectedIndex")>] member inline this.SelectedIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndex), (fun ctx x -> ctx.Element.SelectedIndex <- x), x)

    [<CustomOperation("SelectedTab")>]
    member inline this.SelectedTab ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeSingleChildBuilder(builder, (fun ctx x -> ctx.Element.SelectedTab <- x), creator)

    [<CustomOperation("SelectedTab")>]
    member inline this.SelectedTab ([<InlineIfLambda>] builder: BuildElement<'Element>, creator) =
        this.MakeAdaptiveSingleChildBuilder(builder, (fun ctx x -> ctx.Element.SelectedTab <- x), creator)
                        
    [<CustomOperation("SizeMode")>] member inline this.SizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TabSizeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SizeMode), (fun ctx x -> ctx.Element.SizeMode <- x), x)
    [<CustomOperation("SizeMode")>] member inline this.SizeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SizeMode), (fun ctx x -> ctx.Element.SizeMode <- x), x)
    [<CustomOperation("ShowToolTips")>] member inline this.ShowToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowToolTips), (fun ctx x -> ctx.Element.ShowToolTips <- x), x)
    [<CustomOperation("ShowToolTips")>] member inline this.ShowToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowToolTips), (fun ctx x -> ctx.Element.ShowToolTips <- x), x)
    [<CustomOperation("TabPagesEx")>] member inline this.TabPagesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.TabPages), x)
    [<CustomOperation("TabPagesEx'")>] member inline this.TabPagesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.TabPages), x)
    [<CustomOperation("TabPages")>] member inline this.TabPages ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.TabPages), x)
    [<CustomOperation("TabPages'")>] member inline this.TabPages' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.TabPages), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)

    [<CustomOperation("BackColorChanged")>] member inline this.BackColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColorChanged), "BackColorChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("DrawItem")>] member inline this.DrawItem ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawItem), "DrawItem", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("SelectedIndexChanged")>] member inline this.SelectedIndexChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedIndexChanged), "SelectedIndexChanged", fn)
    [<CustomOperation("Selecting")>] member inline this.Selecting ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Selecting), "Selecting", fn)
    [<CustomOperation("Selected")>] member inline this.Selected ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Selected), "Selected", fn)
    [<CustomOperation("Deselecting")>] member inline this.Deselecting ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Deselecting), "Deselecting", fn)
    [<CustomOperation("Deselected")>] member inline this.Deselected ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Deselected), "Deselected", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
                

type TrackBarBuilder<'Element when 'Element :> System.Windows.Forms.TrackBar>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("AutoSize")>] member inline this.AutoSize ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSize), (fun ctx x -> ctx.Element.AutoSize <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Font) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("Font")>] member inline this.Font ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Font), (fun ctx x -> ctx.Element.Font <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImeMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("ImeMode")>] member inline this.ImeMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImeMode), (fun ctx x -> ctx.Element.ImeMode <- x), x)
    [<CustomOperation("LargeChange")>] member inline this.LargeChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LargeChange), (fun ctx x -> ctx.Element.LargeChange <- x), x)
    [<CustomOperation("LargeChange")>] member inline this.LargeChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LargeChange), (fun ctx x -> ctx.Element.LargeChange <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Maximum")>] member inline this.Maximum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Maximum), (fun ctx x -> ctx.Element.Maximum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Minimum")>] member inline this.Minimum ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Minimum), (fun ctx x -> ctx.Element.Minimum <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Orientation) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Orientation")>] member inline this.Orientation ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Orientation), (fun ctx x -> ctx.Element.Orientation <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("SmallChange")>] member inline this.SmallChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SmallChange), (fun ctx x -> ctx.Element.SmallChange <- x), x)
    [<CustomOperation("SmallChange")>] member inline this.SmallChange ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SmallChange), (fun ctx x -> ctx.Element.SmallChange <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TickStyle")>] member inline this.TickStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TickStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TickStyle), (fun ctx x -> ctx.Element.TickStyle <- x), x)
    [<CustomOperation("TickStyle")>] member inline this.TickStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TickStyle), (fun ctx x -> ctx.Element.TickStyle <- x), x)
    [<CustomOperation("TickFrequency")>] member inline this.TickFrequency ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TickFrequency), (fun ctx x -> ctx.Element.TickFrequency <- x), x)
    [<CustomOperation("TickFrequency")>] member inline this.TickFrequency ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TickFrequency), (fun ctx x -> ctx.Element.TickFrequency <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)
    [<CustomOperation("Value")>] member inline this.Value ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Value), (fun ctx x -> ctx.Element.Value <- x), x)

    [<CustomOperation("AutoSizeChanged")>] member inline this.AutoSizeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AutoSizeChanged), "AutoSizeChanged", fn)
    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("FontChanged")>] member inline this.FontChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.FontChanged), "FontChanged", fn)
    [<CustomOperation("ForeColorChanged")>] member inline this.ForeColorChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColorChanged), "ForeColorChanged", fn)
    [<CustomOperation("ImeModeChanged")>] member inline this.ImeModeChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ImeModeChanged), "ImeModeChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("Click")>] member inline this.Click ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Click), "Click", fn)
    [<CustomOperation("DoubleClick")>] member inline this.DoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DoubleClick), "DoubleClick", fn)
    [<CustomOperation("MouseClick")>] member inline this.MouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseClick), "MouseClick", fn)
    [<CustomOperation("MouseDoubleClick")>] member inline this.MouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.MouseDoubleClick), "MouseDoubleClick", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
    [<CustomOperation("Scroll")>] member inline this.Scroll ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Scroll), "Scroll", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("ValueChanged")>] member inline this.ValueChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ValueChanged), "ValueChanged", fn)
                

type TreeViewBuilder<'Element when 'Element :> System.Windows.Forms.TreeView>() =
    inherit ControlBuilder<'Element>()

    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackColor")>] member inline this.BackColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackColor), (fun ctx x -> ctx.Element.BackColor <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Image) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImage")>] member inline this.BackgroundImage ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImage), (fun ctx x -> ctx.Element.BackgroundImage <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageLayout) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BackgroundImageLayout")>] member inline this.BackgroundImageLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayout), (fun ctx x -> ctx.Element.BackgroundImageLayout <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.BorderStyle) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("BorderStyle")>] member inline this.BorderStyle ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.BorderStyle), (fun ctx x -> ctx.Element.BorderStyle <- x), x)
    [<CustomOperation("CheckBoxes")>] member inline this.CheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.CheckBoxes), (fun ctx x -> ctx.Element.CheckBoxes <- x), x)
    [<CustomOperation("CheckBoxes")>] member inline this.CheckBoxes ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.CheckBoxes), (fun ctx x -> ctx.Element.CheckBoxes <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("ForeColor")>] member inline this.ForeColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ForeColor), (fun ctx x -> ctx.Element.ForeColor <- x), x)
    [<CustomOperation("FullRowSelect")>] member inline this.FullRowSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.FullRowSelect), (fun ctx x -> ctx.Element.FullRowSelect <- x), x)
    [<CustomOperation("FullRowSelect")>] member inline this.FullRowSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.FullRowSelect), (fun ctx x -> ctx.Element.FullRowSelect <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("HideSelection")>] member inline this.HideSelection ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HideSelection), (fun ctx x -> ctx.Element.HideSelection <- x), x)
    [<CustomOperation("HotTracking")>] member inline this.HotTracking ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.HotTracking), (fun ctx x -> ctx.Element.HotTracking <- x), x)
    [<CustomOperation("HotTracking")>] member inline this.HotTracking ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.HotTracking), (fun ctx x -> ctx.Element.HotTracking <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageIndex")>] member inline this.ImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageIndex), (fun ctx x -> ctx.Element.ImageIndex <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageKey")>] member inline this.ImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageKey), (fun ctx x -> ctx.Element.ImageKey <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("ImageList")>] member inline this.ImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ImageList), (fun ctx x -> ctx.Element.ImageList <- x), x)
    [<CustomOperation("StateImageList")>] member inline this.StateImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.ImageList) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.StateImageList), (fun ctx x -> ctx.Element.StateImageList <- x), x)
    [<CustomOperation("StateImageList")>] member inline this.StateImageList ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.StateImageList), (fun ctx x -> ctx.Element.StateImageList <- x), x)
    [<CustomOperation("Indent")>] member inline this.Indent ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Indent), (fun ctx x -> ctx.Element.Indent <- x), x)
    [<CustomOperation("Indent")>] member inline this.Indent ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Indent), (fun ctx x -> ctx.Element.Indent <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("ItemHeight")>] member inline this.ItemHeight ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ItemHeight), (fun ctx x -> ctx.Element.ItemHeight <- x), x)
    [<CustomOperation("LabelEdit")>] member inline this.LabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LabelEdit), (fun ctx x -> ctx.Element.LabelEdit <- x), x)
    [<CustomOperation("LabelEdit")>] member inline this.LabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LabelEdit), (fun ctx x -> ctx.Element.LabelEdit <- x), x)
    [<CustomOperation("LineColor")>] member inline this.LineColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Drawing.Color) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.LineColor), (fun ctx x -> ctx.Element.LineColor <- x), x)
    [<CustomOperation("LineColor")>] member inline this.LineColor ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.LineColor), (fun ctx x -> ctx.Element.LineColor <- x), x)
    [<CustomOperation("NodesEx")>] member inline this.NodesEx ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder(builder, (fun x -> x.Nodes), x)
    [<CustomOperation("NodesEx'")>] member inline this.NodesEx' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder(builder, (fun x -> x.Nodes), x)
    [<CustomOperation("Nodes")>] member inline this.Nodes ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyBuilder1(builder, (fun x -> x.Nodes), x)
    [<CustomOperation("Nodes'")>] member inline this.Nodes' ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeGetOnlyAdaptiveBuilder1(builder, (fun x -> x.Nodes), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TreeViewDrawMode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("DrawMode")>] member inline this.DrawMode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.DrawMode), (fun ctx x -> ctx.Element.DrawMode <- x), x)
    [<CustomOperation("PathSeparator")>] member inline this.PathSeparator ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.PathSeparator), (fun ctx x -> ctx.Element.PathSeparator <- x), x)
    [<CustomOperation("PathSeparator")>] member inline this.PathSeparator ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.PathSeparator), (fun ctx x -> ctx.Element.PathSeparator <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.Padding) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("Padding")>] member inline this.Padding ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Padding), (fun ctx x -> ctx.Element.Padding <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("RightToLeftLayout")>] member inline this.RightToLeftLayout ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayout), (fun ctx x -> ctx.Element.RightToLeftLayout <- x), x)
    [<CustomOperation("Scrollable")>] member inline this.Scrollable ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Scrollable), (fun ctx x -> ctx.Element.Scrollable <- x), x)
    [<CustomOperation("Scrollable")>] member inline this.Scrollable ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Scrollable), (fun ctx x -> ctx.Element.Scrollable <- x), x)
    [<CustomOperation("SelectedImageIndex")>] member inline this.SelectedImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Int32) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedImageIndex), (fun ctx x -> ctx.Element.SelectedImageIndex <- x), x)
    [<CustomOperation("SelectedImageIndex")>] member inline this.SelectedImageIndex ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedImageIndex), (fun ctx x -> ctx.Element.SelectedImageIndex <- x), x)
    [<CustomOperation("SelectedImageKey")>] member inline this.SelectedImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedImageKey), (fun ctx x -> ctx.Element.SelectedImageKey <- x), x)
    [<CustomOperation("SelectedImageKey")>] member inline this.SelectedImageKey ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedImageKey), (fun ctx x -> ctx.Element.SelectedImageKey <- x), x)
    [<CustomOperation("SelectedNode")>] member inline this.SelectedNode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TreeNode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedNode), (fun ctx x -> ctx.Element.SelectedNode <- x), x)
    [<CustomOperation("SelectedNode")>] member inline this.SelectedNode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.SelectedNode), (fun ctx x -> ctx.Element.SelectedNode <- x), x)
    [<CustomOperation("ShowLines")>] member inline this.ShowLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowLines), (fun ctx x -> ctx.Element.ShowLines <- x), x)
    [<CustomOperation("ShowLines")>] member inline this.ShowLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowLines), (fun ctx x -> ctx.Element.ShowLines <- x), x)
    [<CustomOperation("ShowNodeToolTips")>] member inline this.ShowNodeToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowNodeToolTips), (fun ctx x -> ctx.Element.ShowNodeToolTips <- x), x)
    [<CustomOperation("ShowNodeToolTips")>] member inline this.ShowNodeToolTips ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowNodeToolTips), (fun ctx x -> ctx.Element.ShowNodeToolTips <- x), x)
    [<CustomOperation("ShowPlusMinus")>] member inline this.ShowPlusMinus ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowPlusMinus), (fun ctx x -> ctx.Element.ShowPlusMinus <- x), x)
    [<CustomOperation("ShowPlusMinus")>] member inline this.ShowPlusMinus ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowPlusMinus), (fun ctx x -> ctx.Element.ShowPlusMinus <- x), x)
    [<CustomOperation("ShowRootLines")>] member inline this.ShowRootLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.ShowRootLines), (fun ctx x -> ctx.Element.ShowRootLines <- x), x)
    [<CustomOperation("ShowRootLines")>] member inline this.ShowRootLines ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.ShowRootLines), (fun ctx x -> ctx.Element.ShowRootLines <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Boolean) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("Sorted")>] member inline this.Sorted ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Sorted), (fun ctx x -> ctx.Element.Sorted <- x), x)
    [<CustomOperation("TreeViewNodeSorter")>] member inline this.TreeViewNodeSorter ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Collections.IComparer) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TreeViewNodeSorter), (fun ctx x -> ctx.Element.TreeViewNodeSorter <- x), x)
    [<CustomOperation("TreeViewNodeSorter")>] member inline this.TreeViewNodeSorter ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TreeViewNodeSorter), (fun ctx x -> ctx.Element.TreeViewNodeSorter <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.String) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("Text")>] member inline this.Text ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.Text), (fun ctx x -> ctx.Element.Text <- x), x)
    [<CustomOperation("TopNode")>] member inline this.TopNode ([<InlineIfLambda>] builder: BuildElement<'Element>, x: System.Windows.Forms.TreeNode) = this.MakeEqualityPropertyBuilder(builder, (fun ctx -> ctx.Element.TopNode), (fun ctx x -> ctx.Element.TopNode <- x), x)
    [<CustomOperation("TopNode")>] member inline this.TopNode ([<InlineIfLambda>] builder: BuildElement<'Element>, x) = this.MakeAdaptivePropertyBuilder(builder, (fun ctx -> ctx.Element.TopNode), (fun ctx x -> ctx.Element.TopNode <- x), x)

    [<CustomOperation("BackgroundImageChanged")>] member inline this.BackgroundImageChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageChanged), "BackgroundImageChanged", fn)
    [<CustomOperation("BackgroundImageLayoutChanged")>] member inline this.BackgroundImageLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BackgroundImageLayoutChanged), "BackgroundImageLayoutChanged", fn)
    [<CustomOperation("PaddingChanged")>] member inline this.PaddingChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.PaddingChanged), "PaddingChanged", fn)
    [<CustomOperation("TextChanged")>] member inline this.TextChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.TextChanged), "TextChanged", fn)
    [<CustomOperation("BeforeLabelEdit")>] member inline this.BeforeLabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeLabelEdit), "BeforeLabelEdit", fn)
    [<CustomOperation("AfterLabelEdit")>] member inline this.AfterLabelEdit ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterLabelEdit), "AfterLabelEdit", fn)
    [<CustomOperation("BeforeCheck")>] member inline this.BeforeCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeCheck), "BeforeCheck", fn)
    [<CustomOperation("AfterCheck")>] member inline this.AfterCheck ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterCheck), "AfterCheck", fn)
    [<CustomOperation("BeforeCollapse")>] member inline this.BeforeCollapse ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeCollapse), "BeforeCollapse", fn)
    [<CustomOperation("AfterCollapse")>] member inline this.AfterCollapse ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterCollapse), "AfterCollapse", fn)
    [<CustomOperation("BeforeExpand")>] member inline this.BeforeExpand ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeExpand), "BeforeExpand", fn)
    [<CustomOperation("AfterExpand")>] member inline this.AfterExpand ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterExpand), "AfterExpand", fn)
    [<CustomOperation("DrawNode")>] member inline this.DrawNode ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.DrawNode), "DrawNode", fn)
    [<CustomOperation("ItemDrag")>] member inline this.ItemDrag ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.ItemDrag), "ItemDrag", fn)
    [<CustomOperation("NodeMouseHover")>] member inline this.NodeMouseHover ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.NodeMouseHover), "NodeMouseHover", fn)
    [<CustomOperation("BeforeSelect")>] member inline this.BeforeSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.BeforeSelect), "BeforeSelect", fn)
    [<CustomOperation("AfterSelect")>] member inline this.AfterSelect ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.AfterSelect), "AfterSelect", fn)
    [<CustomOperation("Paint")>] member inline this.Paint ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.Paint), "Paint", fn)
    [<CustomOperation("NodeMouseClick")>] member inline this.NodeMouseClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.NodeMouseClick), "NodeMouseClick", fn)
    [<CustomOperation("NodeMouseDoubleClick")>] member inline this.NodeMouseDoubleClick ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.NodeMouseDoubleClick), "NodeMouseDoubleClick", fn)
    [<CustomOperation("RightToLeftLayoutChanged")>] member inline this.RightToLeftLayoutChanged ([<InlineIfLambda>] builder: BuildElement<'Element>, fn) = this.MakeEventPropertyBuilder(builder, (fun ctx -> ctx.Element.RightToLeftLayoutChanged), "RightToLeftLayoutChanged", fn)
                
            

// =======================================================================================================================

namespace System.Windows.Forms

[<AutoOpen>]
module WinFormsControlBuilderDslCE =
  
    open Fun.SunUI
    open System.Windows.Forms.DslInternals

    type Control' () = 
        inherit ControlBuilder<System.Windows.Forms.Control>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Control>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Control()), this.GetRenderMode())

    type ScrollableControl' () = 
        inherit ScrollableControlBuilder<System.Windows.Forms.ScrollableControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ScrollableControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ScrollableControl()), this.GetRenderMode())

    type ToolStrip' () = 
        inherit ToolStripBuilder<System.Windows.Forms.ToolStrip>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStrip>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStrip()), this.GetRenderMode())

    type ToolStripDropDown' () = 
        inherit ToolStripDropDownBuilder<System.Windows.Forms.ToolStripDropDown>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStripDropDown>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStripDropDown()), this.GetRenderMode())

    type ToolStripDropDownMenu' () = 
        inherit ToolStripDropDownMenuBuilder<System.Windows.Forms.ToolStripDropDownMenu>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStripDropDownMenu>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStripDropDownMenu()), this.GetRenderMode())

    type ContextMenuStrip' () = 
        inherit ContextMenuStripBuilder<System.Windows.Forms.ContextMenuStrip>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ContextMenuStrip>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ContextMenuStrip()), this.GetRenderMode())

    type BindingNavigator' () = 
        inherit BindingNavigatorBuilder<System.Windows.Forms.BindingNavigator>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.BindingNavigator>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.BindingNavigator()), this.GetRenderMode())

    type MenuStrip' () = 
        inherit MenuStripBuilder<System.Windows.Forms.MenuStrip>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MenuStrip>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.MenuStrip()), this.GetRenderMode())

    type StatusStrip' () = 
        inherit StatusStripBuilder<System.Windows.Forms.StatusStrip>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.StatusStrip>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.StatusStrip()), this.GetRenderMode())

    type ContainerControl' () = 
        inherit ContainerControlBuilder<System.Windows.Forms.ContainerControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ContainerControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ContainerControl()), this.GetRenderMode())

    type DomainUpDown' () = 
        inherit DomainUpDownBuilder<System.Windows.Forms.DomainUpDown>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.DomainUpDown>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.DomainUpDown()), this.GetRenderMode())

    type NumericUpDown' () = 
        inherit NumericUpDownBuilder<System.Windows.Forms.NumericUpDown>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.NumericUpDown>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.NumericUpDown()), this.GetRenderMode())

    type Form' () = 
        inherit FormBuilder<System.Windows.Forms.Form>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Form>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Form()), this.GetRenderMode())

    type PrintPreviewDialog' () = 
        inherit PrintPreviewDialogBuilder<System.Windows.Forms.PrintPreviewDialog>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.PrintPreviewDialog>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.PrintPreviewDialog()), this.GetRenderMode())

    type PropertyGrid' () = 
        inherit PropertyGridBuilder<System.Windows.Forms.PropertyGrid>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.PropertyGrid>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.PropertyGrid()), this.GetRenderMode())

    type SplitContainer' () = 
        inherit SplitContainerBuilder<System.Windows.Forms.SplitContainer>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.SplitContainer>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.SplitContainer()), this.GetRenderMode())

    type ToolStripContainer' () = 
        inherit ToolStripContainerBuilder<System.Windows.Forms.ToolStripContainer>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStripContainer>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStripContainer()), this.GetRenderMode())

    type ToolStripPanel' () = 
        inherit ToolStripPanelBuilder<System.Windows.Forms.ToolStripPanel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStripPanel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStripPanel()), this.GetRenderMode())

    type UserControl' () = 
        inherit UserControlBuilder<System.Windows.Forms.UserControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.UserControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.UserControl()), this.GetRenderMode())

    type Panel' () = 
        inherit PanelBuilder<System.Windows.Forms.Panel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Panel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Panel()), this.GetRenderMode())

    type FlowLayoutPanel' () = 
        inherit FlowLayoutPanelBuilder<System.Windows.Forms.FlowLayoutPanel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.FlowLayoutPanel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.FlowLayoutPanel()), this.GetRenderMode())

    type TableLayoutPanel' () = 
        inherit TableLayoutPanelBuilder<System.Windows.Forms.TableLayoutPanel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TableLayoutPanel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TableLayoutPanel()), this.GetRenderMode())

    type TabPage' () = 
        inherit TabPageBuilder<System.Windows.Forms.TabPage>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TabPage>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TabPage()), this.GetRenderMode())

    type ToolStripContentPanel' () = 
        inherit ToolStripContentPanelBuilder<System.Windows.Forms.ToolStripContentPanel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ToolStripContentPanel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ToolStripContentPanel()), this.GetRenderMode())

    type ListBox' () = 
        inherit ListBoxBuilder<System.Windows.Forms.ListBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ListBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ListBox()), this.GetRenderMode())

    type CheckedListBox' () = 
        inherit CheckedListBoxBuilder<System.Windows.Forms.CheckedListBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.CheckedListBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.CheckedListBox()), this.GetRenderMode())

    type ComboBox' () = 
        inherit ComboBoxBuilder<System.Windows.Forms.ComboBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ComboBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ComboBox()), this.GetRenderMode())

    type DataGridViewComboBoxEditingControl' () = 
        inherit DataGridViewComboBoxEditingControlBuilder<System.Windows.Forms.DataGridViewComboBoxEditingControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.DataGridViewComboBoxEditingControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.DataGridViewComboBoxEditingControl()), this.GetRenderMode())

    type TextBox' () = 
        inherit TextBoxBuilder<System.Windows.Forms.TextBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TextBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TextBox()), this.GetRenderMode())

    type DataGridViewTextBoxEditingControl' () = 
        inherit DataGridViewTextBoxEditingControlBuilder<System.Windows.Forms.DataGridViewTextBoxEditingControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.DataGridViewTextBoxEditingControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.DataGridViewTextBoxEditingControl()), this.GetRenderMode())

    type MaskedTextBox' () = 
        inherit MaskedTextBoxBuilder<System.Windows.Forms.MaskedTextBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MaskedTextBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.MaskedTextBox()), this.GetRenderMode())

    type RichTextBox' () = 
        inherit RichTextBoxBuilder<System.Windows.Forms.RichTextBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.RichTextBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.RichTextBox()), this.GetRenderMode())

    type Button' () = 
        inherit ButtonBuilder<System.Windows.Forms.Button>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Button>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Button()), this.GetRenderMode())

    type CheckBox' () = 
        inherit CheckBoxBuilder<System.Windows.Forms.CheckBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.CheckBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.CheckBox()), this.GetRenderMode())

    type RadioButton' () = 
        inherit RadioButtonBuilder<System.Windows.Forms.RadioButton>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.RadioButton>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.RadioButton()), this.GetRenderMode())

    type HScrollBar' () = 
        inherit HScrollBarBuilder<System.Windows.Forms.HScrollBar>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.HScrollBar>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.HScrollBar()), this.GetRenderMode())

    type VScrollBar' () = 
        inherit VScrollBarBuilder<System.Windows.Forms.VScrollBar>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.VScrollBar>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.VScrollBar()), this.GetRenderMode())

    type Label' () = 
        inherit LabelBuilder<System.Windows.Forms.Label>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Label>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Label()), this.GetRenderMode())

    type LinkLabel' () = 
        inherit LinkLabelBuilder<System.Windows.Forms.LinkLabel>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.LinkLabel>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.LinkLabel()), this.GetRenderMode())

    type WebBrowser' () = 
        inherit WebBrowserBuilder<System.Windows.Forms.WebBrowser>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.WebBrowser>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.WebBrowser()), this.GetRenderMode())

    type DataGridView' () = 
        inherit DataGridViewBuilder<System.Windows.Forms.DataGridView>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.DataGridView>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.DataGridView()), this.GetRenderMode())

    type DateTimePicker' () = 
        inherit DateTimePickerBuilder<System.Windows.Forms.DateTimePicker>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.DateTimePicker>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.DateTimePicker()), this.GetRenderMode())

    type GroupBox' () = 
        inherit GroupBoxBuilder<System.Windows.Forms.GroupBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.GroupBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.GroupBox()), this.GetRenderMode())

    type MonthCalendar' () = 
        inherit MonthCalendarBuilder<System.Windows.Forms.MonthCalendar>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MonthCalendar>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.MonthCalendar()), this.GetRenderMode())

    type ListView' () = 
        inherit ListViewBuilder<System.Windows.Forms.ListView>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ListView>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ListView()), this.GetRenderMode())

    type MdiClient' () = 
        inherit MdiClientBuilder()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.MdiClient>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.MdiClient()), this.GetRenderMode())

    type PictureBox' () = 
        inherit PictureBoxBuilder<System.Windows.Forms.PictureBox>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.PictureBox>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.PictureBox()), this.GetRenderMode())

    type PrintPreviewControl' () = 
        inherit PrintPreviewControlBuilder<System.Windows.Forms.PrintPreviewControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.PrintPreviewControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.PrintPreviewControl()), this.GetRenderMode())

    type ProgressBar' () = 
        inherit ProgressBarBuilder<System.Windows.Forms.ProgressBar>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.ProgressBar>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.ProgressBar()), this.GetRenderMode())

    type Splitter' () = 
        inherit SplitterBuilder<System.Windows.Forms.Splitter>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.Splitter>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.Splitter()), this.GetRenderMode())

    type TabControl' () = 
        inherit TabControlBuilder<System.Windows.Forms.TabControl>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TabControl>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TabControl()), this.GetRenderMode())

    type TrackBar' () = 
        inherit TrackBarBuilder<System.Windows.Forms.TrackBar>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TrackBar>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TrackBar()), this.GetRenderMode())

    type TreeView' () = 
        inherit TreeViewBuilder<System.Windows.Forms.TreeView>()
        member inline this.Run([<InlineIfLambda>] builder: BuildElement<System.Windows.Forms.TreeView>) = this.MakeElementCreator(builder, (fun _ -> new System.Windows.Forms.TreeView()), this.GetRenderMode())

            
namespace System.Windows.Forms.Design

[<AutoOpen>]
module WinFormsControlBuilderDslCE_Design =
  
    open Fun.SunUI
    open System.Windows.Forms.DslInternals.Design


            